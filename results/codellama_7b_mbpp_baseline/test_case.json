{"metrics": {"pass@1": 0.414}, "test_case": {"1": [[0, {"task_id": 1, "passed": true, "result": "passed", "completion_id": 0}]], "0": [[0, {"task_id": 0, "passed": false, "result": "failed: ", "completion_id": 0}]], "2": [[0, {"task_id": 2, "passed": false, "result": "failed: ", "completion_id": 0}]], "3": [[0, {"task_id": 3, "passed": false, "result": "failed: ", "completion_id": 0}]], "5": [[0, {"task_id": 5, "passed": false, "result": "failed: ", "completion_id": 0}]], "4": [[0, {"task_id": 4, "passed": false, "result": "failed: ", "completion_id": 0}]], "6": [[0, {"task_id": 6, "passed": true, "result": "passed", "completion_id": 0}]], "7": [[0, {"task_id": 7, "passed": true, "result": "passed", "completion_id": 0}]], "8": [[0, {"task_id": 8, "passed": false, "result": "failed: ", "completion_id": 0}]], "9": [[0, {"task_id": 9, "passed": false, "result": "failed: ", "completion_id": 0}]], "10": [[0, {"task_id": 10, "passed": true, "result": "passed", "completion_id": 0}]], "11": [[0, {"task_id": 11, "passed": false, "result": "failed: ", "completion_id": 0}]], "12": [[0, {"task_id": 12, "passed": true, "result": "passed", "completion_id": 0}]], "13": [[0, {"task_id": 13, "passed": false, "result": "failed: int() can't convert non-string with explicit base", "completion_id": 0}]], "15": [[0, {"task_id": 15, "passed": false, "result": "failed: ", "completion_id": 0}]], "14": [[0, {"task_id": 14, "passed": true, "result": "passed", "completion_id": 0}]], "17": [[0, {"task_id": 17, "passed": false, "result": "failed: maximum recursion depth exceeded in comparison", "completion_id": 0}]], "16": [[0, {"task_id": 16, "passed": true, "result": "passed", "completion_id": 0}]], "18": [[0, {"task_id": 18, "passed": true, "result": "passed", "completion_id": 0}]], "19": [[0, {"task_id": 19, "passed": false, "result": "failed: ", "completion_id": 0}]], "20": [[0, {"task_id": 20, "passed": false, "result": "failed: name 'heapq' is not defined", "completion_id": 0}]], "21": [[0, {"task_id": 21, "passed": false, "result": "failed: ", "completion_id": 0}]], "23": [[0, {"task_id": 23, "passed": true, "result": "passed", "completion_id": 0}]], "22": [[0, {"task_id": 22, "passed": false, "result": "failed: ", "completion_id": 0}]], "24": [[0, {"task_id": 24, "passed": false, "result": "failed: ", "completion_id": 0}]], "25": [[0, {"task_id": 25, "passed": false, "result": "failed: maximum recursion depth exceeded while calling a Python object", "completion_id": 0}]], "26": [[0, {"task_id": 26, "passed": false, "result": "failed: '<' not supported between instances of 'str' and 'int'", "completion_id": 0}]], "27": [[0, {"task_id": 27, "passed": false, "result": "failed: ", "completion_id": 0}]], "29": [[0, {"task_id": 29, "passed": true, "result": "passed", "completion_id": 0}]], "28": [[0, {"task_id": 28, "passed": false, "result": "failed: ", "completion_id": 0}]], "30": [[0, {"task_id": 30, "passed": true, "result": "passed", "completion_id": 0}]], "31": [[0, {"task_id": 31, "passed": false, "result": "failed: ", "completion_id": 0}]], "32": [[0, {"task_id": 32, "passed": false, "result": "failed: ", "completion_id": 0}]], "33": [[0, {"task_id": 33, "passed": false, "result": "failed: ", "completion_id": 0}]], "34": [[0, {"task_id": 34, "passed": false, "result": "failed: ", "completion_id": 0}]], "35": [[0, {"task_id": 35, "passed": true, "result": "passed", "completion_id": 0}]], "36": [[0, {"task_id": 36, "passed": false, "result": "failed: name 'factorial' is not defined", "completion_id": 0}]], "37": [[0, {"task_id": 37, "passed": false, "result": "failed: ", "completion_id": 0}]], "39": [[0, {"task_id": 39, "passed": false, "result": "failed: ", "completion_id": 0}]], "38": [[0, {"task_id": 38, "passed": true, "result": "passed", "completion_id": 0}]], "40": [[0, {"task_id": 40, "passed": true, "result": "passed", "completion_id": 0}]], "41": [[0, {"task_id": 41, "passed": true, "result": "passed", "completion_id": 0}]], "42": [[0, {"task_id": 42, "passed": true, "result": "passed", "completion_id": 0}]], "43": [[0, {"task_id": 43, "passed": true, "result": "passed", "completion_id": 0}]], "44": [[0, {"task_id": 44, "passed": false, "result": "failed: ", "completion_id": 0}]], "45": [[0, {"task_id": 45, "passed": true, "result": "passed", "completion_id": 0}]], "46": [[0, {"task_id": 46, "passed": false, "result": "failed: ", "completion_id": 0}]], "47": [[0, {"task_id": 47, "passed": true, "result": "passed", "completion_id": 0}]], "48": [[0, {"task_id": 48, "passed": false, "result": "failed: ", "completion_id": 0}]], "49": [[0, {"task_id": 49, "passed": false, "result": "failed: ", "completion_id": 0}]], "50": [[0, {"task_id": 50, "passed": false, "result": "failed: unexpected indent (<string>, line 2)", "completion_id": 0}]], "51": [[0, {"task_id": 51, "passed": true, "result": "passed", "completion_id": 0}]], "52": [[0, {"task_id": 52, "passed": false, "result": "failed: ", "completion_id": 0}]], "53": [[0, {"task_id": 53, "passed": false, "result": "failed: ", "completion_id": 0}]], "54": [[0, {"task_id": 54, "passed": false, "result": "failed: unsupported operand type(s) for +: 'int' and 'list'", "completion_id": 0}]], "55": [[0, {"task_id": 55, "passed": true, "result": "passed", "completion_id": 0}]], "56": [[0, {"task_id": 56, "passed": false, "result": "failed: ", "completion_id": 0}]], "57": [[0, {"task_id": 57, "passed": true, "result": "passed", "completion_id": 0}]], "58": [[0, {"task_id": 58, "passed": true, "result": "passed", "completion_id": 0}]], "60": [[0, {"task_id": 60, "passed": true, "result": "passed", "completion_id": 0}]], "59": [[0, {"task_id": 59, "passed": false, "result": "failed: ", "completion_id": 0}]], "61": [[0, {"task_id": 61, "passed": false, "result": "failed: ", "completion_id": 0}]], "62": [[0, {"task_id": 62, "passed": false, "result": "failed: ", "completion_id": 0}]], "64": [[0, {"task_id": 64, "passed": false, "result": "failed: ", "completion_id": 0}]], "65": [[0, {"task_id": 65, "passed": false, "result": "failed: ", "completion_id": 0}]], "63": [[0, {"task_id": 63, "passed": false, "result": "failed: ", "completion_id": 0}]], "66": [[0, {"task_id": 66, "passed": false, "result": "failed: ", "completion_id": 0}]], "67": [[0, {"task_id": 67, "passed": true, "result": "passed", "completion_id": 0}]], "68": [[0, {"task_id": 68, "passed": true, "result": "passed", "completion_id": 0}]], "69": [[0, {"task_id": 69, "passed": true, "result": "passed", "completion_id": 0}]], "70": [[0, {"task_id": 70, "passed": false, "result": "failed: ", "completion_id": 0}]], "71": [[0, {"task_id": 71, "passed": true, "result": "passed", "completion_id": 0}]], "72": [[0, {"task_id": 72, "passed": false, "result": "failed: ", "completion_id": 0}]], "73": [[0, {"task_id": 73, "passed": true, "result": "passed", "completion_id": 0}]], "75": [[0, {"task_id": 75, "passed": false, "result": "failed: ", "completion_id": 0}]], "76": [[0, {"task_id": 76, "passed": false, "result": "failed: ", "completion_id": 0}]], "74": [[0, {"task_id": 74, "passed": true, "result": "passed", "completion_id": 0}]], "77": [[0, {"task_id": 77, "passed": true, "result": "passed", "completion_id": 0}]], "78": [[0, {"task_id": 78, "passed": true, "result": "passed", "completion_id": 0}]], "79": [[0, {"task_id": 79, "passed": true, "result": "passed", "completion_id": 0}]], "80": [[0, {"task_id": 80, "passed": false, "result": "failed: ", "completion_id": 0}]], "81": [[0, {"task_id": 81, "passed": false, "result": "failed: ", "completion_id": 0}]], "82": [[0, {"task_id": 82, "passed": true, "result": "passed", "completion_id": 0}]], "83": [[0, {"task_id": 83, "passed": true, "result": "passed", "completion_id": 0}]], "84": [[0, {"task_id": 84, "passed": true, "result": "passed", "completion_id": 0}]], "85": [[0, {"task_id": 85, "passed": true, "result": "passed", "completion_id": 0}]], "86": [[0, {"task_id": 86, "passed": true, "result": "passed", "completion_id": 0}]], "87": [[0, {"task_id": 87, "passed": false, "result": "failed: ", "completion_id": 0}]], "88": [[0, {"task_id": 88, "passed": true, "result": "passed", "completion_id": 0}]], "89": [[0, {"task_id": 89, "passed": false, "result": "failed: invalid syntax (<string>, line 50)", "completion_id": 0}]], "90": [[0, {"task_id": 90, "passed": false, "result": "failed: ", "completion_id": 0}]], "91": [[0, {"task_id": 91, "passed": true, "result": "passed", "completion_id": 0}]], "92": [[0, {"task_id": 92, "passed": false, "result": "failed: ", "completion_id": 0}]], "93": [[0, {"task_id": 93, "passed": false, "result": "failed: ", "completion_id": 0}]], "95": [[0, {"task_id": 95, "passed": false, "result": "failed: can only concatenate tuple (not \"list\") to tuple", "completion_id": 0}]], "96": [[0, {"task_id": 96, "passed": true, "result": "passed", "completion_id": 0}]], "94": [[0, {"task_id": 94, "passed": true, "result": "passed", "completion_id": 0}]], "98": [[0, {"task_id": 98, "passed": true, "result": "passed", "completion_id": 0}]], "97": [[0, {"task_id": 97, "passed": false, "result": "failed: ", "completion_id": 0}]], "99": [[0, {"task_id": 99, "passed": false, "result": "failed: ", "completion_id": 0}]], "100": [[0, {"task_id": 100, "passed": false, "result": "failed: ", "completion_id": 0}]], "101": [[0, {"task_id": 101, "passed": false, "result": "failed: ", "completion_id": 0}]], "102": [[0, {"task_id": 102, "passed": true, "result": "passed", "completion_id": 0}]], "103": [[0, {"task_id": 103, "passed": false, "result": "failed: ", "completion_id": 0}]], "105": [[0, {"task_id": 105, "passed": true, "result": "passed", "completion_id": 0}]], "104": [[0, {"task_id": 104, "passed": true, "result": "passed", "completion_id": 0}]], "107": [[0, {"task_id": 107, "passed": true, "result": "passed", "completion_id": 0}]], "106": [[0, {"task_id": 106, "passed": false, "result": "failed: ", "completion_id": 0}]], "108": [[0, {"task_id": 108, "passed": false, "result": "failed: '[' was never closed (<string>, line 44)", "completion_id": 0}]], "109": [[0, {"task_id": 109, "passed": false, "result": "failed: ", "completion_id": 0}]], "110": [[0, {"task_id": 110, "passed": false, "result": "failed: ", "completion_id": 0}]], "112": [[0, {"task_id": 112, "passed": false, "result": "failed: ", "completion_id": 0}]], "111": [[0, {"task_id": 111, "passed": false, "result": "failed: ", "completion_id": 0}]], "113": [[0, {"task_id": 113, "passed": false, "result": "failed: ", "completion_id": 0}]], "114": [[0, {"task_id": 114, "passed": false, "result": "failed: ", "completion_id": 0}]], "115": [[0, {"task_id": 115, "passed": false, "result": "failed: sum() missing 1 required positional argument: 'b'", "completion_id": 0}]], "116": [[0, {"task_id": 116, "passed": true, "result": "passed", "completion_id": 0}]], "118": [[0, {"task_id": 118, "passed": false, "result": "failed: ", "completion_id": 0}]], "119": [[0, {"task_id": 119, "passed": false, "result": "failed: unexpected indent (<string>, line 2)", "completion_id": 0}]], "117": [[0, {"task_id": 117, "passed": true, "result": "passed", "completion_id": 0}]], "120": [[0, {"task_id": 120, "passed": false, "result": "failed: ", "completion_id": 0}]], "121": [[0, {"task_id": 121, "passed": true, "result": "passed", "completion_id": 0}]], "122": [[0, {"task_id": 122, "passed": true, "result": "passed", "completion_id": 0}]], "124": [[0, {"task_id": 124, "passed": true, "result": "passed", "completion_id": 0}]], "125": [[0, {"task_id": 125, "passed": false, "result": "failed: ", "completion_id": 0}]], "123": [[0, {"task_id": 123, "passed": false, "result": "failed: ", "completion_id": 0}]], "126": [[0, {"task_id": 126, "passed": false, "result": "failed: ", "completion_id": 0}]], "127": [[0, {"task_id": 127, "passed": true, "result": "passed", "completion_id": 0}]], "128": [[0, {"task_id": 128, "passed": false, "result": "failed: name 'math' is not defined", "completion_id": 0}]], "129": [[0, {"task_id": 129, "passed": false, "result": "failed: ", "completion_id": 0}]], "131": [[0, {"task_id": 131, "passed": true, "result": "passed", "completion_id": 0}]], "130": [[0, {"task_id": 130, "passed": false, "result": "failed: ", "completion_id": 0}]], "133": [[0, {"task_id": 133, "passed": true, "result": "passed", "completion_id": 0}]], "132": [[0, {"task_id": 132, "passed": false, "result": "failed: ", "completion_id": 0}]], "135": [[0, {"task_id": 135, "passed": false, "result": "failed: ", "completion_id": 0}]], "134": [[0, {"task_id": 134, "passed": true, "result": "passed", "completion_id": 0}]], "136": [[0, {"task_id": 136, "passed": false, "result": "failed: ", "completion_id": 0}]], "137": [[0, {"task_id": 137, "passed": false, "result": "failed: ", "completion_id": 0}]], "138": [[0, {"task_id": 138, "passed": true, "result": "passed", "completion_id": 0}]], "139": [[0, {"task_id": 139, "passed": false, "result": "failed: ", "completion_id": 0}]], "140": [[0, {"task_id": 140, "passed": false, "result": "failed: ", "completion_id": 0}]], "141": [[0, {"task_id": 141, "passed": false, "result": "failed: name 'merge' is not defined", "completion_id": 0}]], "142": [[0, {"task_id": 142, "passed": false, "result": "failed: ", "completion_id": 0}]], "143": [[0, {"task_id": 143, "passed": true, "result": "passed", "completion_id": 0}]], "144": [[0, {"task_id": 144, "passed": false, "result": "failed: ", "completion_id": 0}]], "145": [[0, {"task_id": 145, "passed": true, "result": "passed", "completion_id": 0}]], "147": [[0, {"task_id": 147, "passed": false, "result": "failed: invalid syntax (<string>, line 49)", "completion_id": 0}]], "146": [[0, {"task_id": 146, "passed": true, "result": "passed", "completion_id": 0}]], "149": [[0, {"task_id": 149, "passed": false, "result": "failed: ", "completion_id": 0}]], "148": [[0, {"task_id": 148, "passed": true, "result": "passed", "completion_id": 0}]], "150": [[0, {"task_id": 150, "passed": true, "result": "passed", "completion_id": 0}]], "151": [[0, {"task_id": 151, "passed": false, "result": "failed: ", "completion_id": 0}]], "152": [[0, {"task_id": 152, "passed": false, "result": "failed: ", "completion_id": 0}]], "153": [[0, {"task_id": 153, "passed": false, "result": "failed: ", "completion_id": 0}]], "155": [[0, {"task_id": 155, "passed": true, "result": "passed", "completion_id": 0}]], "154": [[0, {"task_id": 154, "passed": false, "result": "failed: ", "completion_id": 0}]], "156": [[0, {"task_id": 156, "passed": false, "result": "failed: ", "completion_id": 0}]], "157": [[0, {"task_id": 157, "passed": true, "result": "passed", "completion_id": 0}]], "158": [[0, {"task_id": 158, "passed": false, "result": "failed: ", "completion_id": 0}]], "159": [[0, {"task_id": 159, "passed": true, "result": "passed", "completion_id": 0}]], "160": [[0, {"task_id": 160, "passed": true, "result": "passed", "completion_id": 0}]], "161": [[0, {"task_id": 161, "passed": false, "result": "failed: ", "completion_id": 0}]], "162": [[0, {"task_id": 162, "passed": true, "result": "passed", "completion_id": 0}]], "163": [[0, {"task_id": 163, "passed": true, "result": "passed", "completion_id": 0}]], "164": [[0, {"task_id": 164, "passed": true, "result": "passed", "completion_id": 0}]], "166": [[0, {"task_id": 166, "passed": false, "result": "failed: ", "completion_id": 0}]], "165": [[0, {"task_id": 165, "passed": true, "result": "passed", "completion_id": 0}]], "167": [[0, {"task_id": 167, "passed": true, "result": "passed", "completion_id": 0}]], "168": [[0, {"task_id": 168, "passed": false, "result": "failed: invalid syntax (<string>, line 45)", "completion_id": 0}]], "169": [[0, {"task_id": 169, "passed": false, "result": "failed: name 'asin' is not defined", "completion_id": 0}]], "171": [[0, {"task_id": 171, "passed": false, "result": "failed: ", "completion_id": 0}]], "170": [[0, {"task_id": 170, "passed": false, "result": "failed: invalid syntax (<string>, line 37)", "completion_id": 0}]], "172": [[0, {"task_id": 172, "passed": true, "result": "passed", "completion_id": 0}]], "173": [[0, {"task_id": 173, "passed": false, "result": "failed: ", "completion_id": 0}]], "174": [[0, {"task_id": 174, "passed": false, "result": "failed: ", "completion_id": 0}]], "175": [[0, {"task_id": 175, "passed": true, "result": "passed", "completion_id": 0}]], "176": [[0, {"task_id": 176, "passed": true, "result": "passed", "completion_id": 0}]], "177": [[0, {"task_id": 177, "passed": false, "result": "failed: ", "completion_id": 0}]], "178": [[0, {"task_id": 178, "passed": false, "result": "failed: ", "completion_id": 0}]], "179": [[0, {"task_id": 179, "passed": false, "result": "failed: ", "completion_id": 0}]], "180": [[0, {"task_id": 180, "passed": true, "result": "passed", "completion_id": 0}]], "181": [[0, {"task_id": 181, "passed": false, "result": "failed: ", "completion_id": 0}]], "182": [[0, {"task_id": 182, "passed": true, "result": "passed", "completion_id": 0}]], "183": [[0, {"task_id": 183, "passed": false, "result": "failed: int() can't convert non-string with explicit base", "completion_id": 0}]], "184": [[0, {"task_id": 184, "passed": true, "result": "passed", "completion_id": 0}]], "185": [[0, {"task_id": 185, "passed": true, "result": "passed", "completion_id": 0}]], "186": [[0, {"task_id": 186, "passed": true, "result": "passed", "completion_id": 0}]], "187": [[0, {"task_id": 187, "passed": false, "result": "failed: ", "completion_id": 0}]], "188": [[0, {"task_id": 188, "passed": false, "result": "failed: ", "completion_id": 0}]], "189": [[0, {"task_id": 189, "passed": true, "result": "passed", "completion_id": 0}]], "190": [[0, {"task_id": 190, "passed": true, "result": "passed", "completion_id": 0}]], "191": [[0, {"task_id": 191, "passed": false, "result": "failed: invalid literal for int() with base 10: 'p'", "completion_id": 0}]], "192": [[0, {"task_id": 192, "passed": true, "result": "passed", "completion_id": 0}]], "193": [[0, {"task_id": 193, "passed": true, "result": "passed", "completion_id": 0}]], "195": [[0, {"task_id": 195, "passed": true, "result": "passed", "completion_id": 0}]], "194": [[0, {"task_id": 194, "passed": false, "result": "failed: ", "completion_id": 0}]], "196": [[0, {"task_id": 196, "passed": false, "result": "failed: ", "completion_id": 0}]], "197": [[0, {"task_id": 197, "passed": false, "result": "failed: ", "completion_id": 0}]], "198": [[0, {"task_id": 198, "passed": false, "result": "failed: ", "completion_id": 0}]], "199": [[0, {"task_id": 199, "passed": false, "result": "failed: ", "completion_id": 0}]], "200": [[0, {"task_id": 200, "passed": true, "result": "passed", "completion_id": 0}]], "201": [[0, {"task_id": 201, "passed": true, "result": "passed", "completion_id": 0}]], "202": [[0, {"task_id": 202, "passed": true, "result": "passed", "completion_id": 0}]], "204": [[0, {"task_id": 204, "passed": false, "result": "failed: name 'decode_list' is not defined", "completion_id": 0}]], "205": [[0, {"task_id": 205, "passed": false, "result": "failed: ", "completion_id": 0}]], "203": [[0, {"task_id": 203, "passed": false, "result": "failed: ", "completion_id": 0}]], "207": [[0, {"task_id": 207, "passed": false, "result": "failed: ", "completion_id": 0}]], "206": [[0, {"task_id": 206, "passed": false, "result": "failed: ", "completion_id": 0}]], "209": [[0, {"task_id": 209, "passed": true, "result": "passed", "completion_id": 0}]], "208": [[0, {"task_id": 208, "passed": false, "result": "failed: ", "completion_id": 0}]], "210": [[0, {"task_id": 210, "passed": true, "result": "passed", "completion_id": 0}]], "211": [[0, {"task_id": 211, "passed": true, "result": "passed", "completion_id": 0}]], "212": [[0, {"task_id": 212, "passed": false, "result": "failed: name 'is_majority' is not defined", "completion_id": 0}]], "213": [[0, {"task_id": 213, "passed": true, "result": "passed", "completion_id": 0}]], "214": [[0, {"task_id": 214, "passed": false, "result": "failed: ", "completion_id": 0}]], "215": [[0, {"task_id": 215, "passed": false, "result": "failed: ", "completion_id": 0}]], "216": [[0, {"task_id": 216, "passed": true, "result": "passed", "completion_id": 0}]], "218": [[0, {"task_id": 218, "passed": false, "result": "failed: ", "completion_id": 0}]], "217": [[0, {"task_id": 217, "passed": false, "result": "failed: ", "completion_id": 0}]], "219": [[0, {"task_id": 219, "passed": false, "result": "failed: ", "completion_id": 0}]], "220": [[0, {"task_id": 220, "passed": false, "result": "failed: ", "completion_id": 0}]], "221": [[0, {"task_id": 221, "passed": false, "result": "failed: ", "completion_id": 0}]], "222": [[0, {"task_id": 222, "passed": false, "result": "failed: name 'pi' is not defined", "completion_id": 0}]], "223": [[0, {"task_id": 223, "passed": true, "result": "passed", "completion_id": 0}]], "224": [[0, {"task_id": 224, "passed": false, "result": "failed: ", "completion_id": 0}]], "225": [[0, {"task_id": 225, "passed": false, "result": "failed: ", "completion_id": 0}]], "226": [[0, {"task_id": 226, "passed": false, "result": "failed: ", "completion_id": 0}]], "227": [[0, {"task_id": 227, "passed": true, "result": "passed", "completion_id": 0}]], "228": [[0, {"task_id": 228, "passed": false, "result": "failed: expected ':' (<string>, line 49)", "completion_id": 0}]], "229": [[0, {"task_id": 229, "passed": true, "result": "passed", "completion_id": 0}]], "230": [[0, {"task_id": 230, "passed": false, "result": "failed: ", "completion_id": 0}]], "231": [[0, {"task_id": 231, "passed": true, "result": "passed", "completion_id": 0}]], "232": [[0, {"task_id": 232, "passed": false, "result": "failed: ", "completion_id": 0}]], "233": [[0, {"task_id": 233, "passed": false, "result": "failed: ", "completion_id": 0}]], "234": [[0, {"task_id": 234, "passed": false, "result": "failed: ", "completion_id": 0}]], "235": [[0, {"task_id": 235, "passed": false, "result": "failed: ", "completion_id": 0}]], "237": [[0, {"task_id": 237, "passed": false, "result": "failed: ", "completion_id": 0}]], "236": [[0, {"task_id": 236, "passed": false, "result": "failed: ", "completion_id": 0}]], "238": [[0, {"task_id": 238, "passed": false, "result": "failed: ", "completion_id": 0}]], "239": [[0, {"task_id": 239, "passed": true, "result": "passed", "completion_id": 0}]], "240": [[0, {"task_id": 240, "passed": false, "result": "failed: ", "completion_id": 0}]], "241": [[0, {"task_id": 241, "passed": true, "result": "passed", "completion_id": 0}]], "242": [[0, {"task_id": 242, "passed": true, "result": "passed", "completion_id": 0}]], "244": [[0, {"task_id": 244, "passed": true, "result": "passed", "completion_id": 0}]], "243": [[0, {"task_id": 243, "passed": false, "result": "failed: ", "completion_id": 0}]], "245": [[0, {"task_id": 245, "passed": false, "result": "failed: name 'is_Prime' is not defined", "completion_id": 0}]], "246": [[0, {"task_id": 246, "passed": true, "result": "passed", "completion_id": 0}]], "247": [[0, {"task_id": 247, "passed": true, "result": "passed", "completion_id": 0}]], "248": [[0, {"task_id": 248, "passed": false, "result": "failed: ", "completion_id": 0}]], "249": [[0, {"task_id": 249, "passed": false, "result": "failed: ", "completion_id": 0}]], "250": [[0, {"task_id": 250, "passed": true, "result": "passed", "completion_id": 0}]], "251": [[0, {"task_id": 251, "passed": true, "result": "passed", "completion_id": 0}]], "253": [[0, {"task_id": 253, "passed": false, "result": "failed: ", "completion_id": 0}]], "252": [[0, {"task_id": 252, "passed": true, "result": "passed", "completion_id": 0}]], "254": [[0, {"task_id": 254, "passed": false, "result": "failed: ", "completion_id": 0}]], "255": [[0, {"task_id": 255, "passed": false, "result": "failed: ", "completion_id": 0}]], "257": [[0, {"task_id": 257, "passed": false, "result": "failed: ", "completion_id": 0}]], "256": [[0, {"task_id": 256, "passed": false, "result": "failed: ", "completion_id": 0}]], "258": [[0, {"task_id": 258, "passed": true, "result": "passed", "completion_id": 0}]], "260": [[0, {"task_id": 260, "passed": false, "result": "failed: ", "completion_id": 0}]], "259": [[0, {"task_id": 259, "passed": true, "result": "passed", "completion_id": 0}]], "261": [[0, {"task_id": 261, "passed": true, "result": "passed", "completion_id": 0}]], "262": [[0, {"task_id": 262, "passed": true, "result": "passed", "completion_id": 0}]], "263": [[0, {"task_id": 263, "passed": false, "result": "failed: ", "completion_id": 0}]], "264": [[0, {"task_id": 264, "passed": false, "result": "failed: ", "completion_id": 0}]], "265": [[0, {"task_id": 265, "passed": false, "result": "failed: ", "completion_id": 0}]], "266": [[0, {"task_id": 266, "passed": true, "result": "passed", "completion_id": 0}]], "267": [[0, {"task_id": 267, "passed": false, "result": "failed: ", "completion_id": 0}]], "268": [[0, {"task_id": 268, "passed": false, "result": "failed: ", "completion_id": 0}]], "269": [[0, {"task_id": 269, "passed": true, "result": "passed", "completion_id": 0}]], "271": [[0, {"task_id": 271, "passed": true, "result": "passed", "completion_id": 0}]], "270": [[0, {"task_id": 270, "passed": true, "result": "passed", "completion_id": 0}]], "272": [[0, {"task_id": 272, "passed": false, "result": "failed: ", "completion_id": 0}]], "274": [[0, {"task_id": 274, "passed": false, "result": "failed: ", "completion_id": 0}]], "273": [[0, {"task_id": 273, "passed": true, "result": "passed", "completion_id": 0}]], "275": [[0, {"task_id": 275, "passed": false, "result": "failed: name 'max_sub_array_sum' is not defined", "completion_id": 0}]], "277": [[0, {"task_id": 277, "passed": false, "result": "failed: ", "completion_id": 0}]], "276": [[0, {"task_id": 276, "passed": false, "result": "failed: ", "completion_id": 0}]], "278": [[0, {"task_id": 278, "passed": false, "result": "failed: ", "completion_id": 0}]], "279": [[0, {"task_id": 279, "passed": true, "result": "passed", "completion_id": 0}]], "281": [[0, {"task_id": 281, "passed": true, "result": "passed", "completion_id": 0}]], "280": [[0, {"task_id": 280, "passed": false, "result": "failed: invalid syntax (<string>, line 32)", "completion_id": 0}]], "283": [[0, {"task_id": 283, "passed": false, "result": "failed: '>' not supported between instances of 'int' and 'str'", "completion_id": 0}]], "282": [[0, {"task_id": 282, "passed": true, "result": "passed", "completion_id": 0}]], "284": [[0, {"task_id": 284, "passed": false, "result": "failed: ", "completion_id": 0}]], "285": [[0, {"task_id": 285, "passed": true, "result": "passed", "completion_id": 0}]], "286": [[0, {"task_id": 286, "passed": false, "result": "failed: ", "completion_id": 0}]], "287": [[0, {"task_id": 287, "passed": false, "result": "failed: 'int' object is not iterable", "completion_id": 0}]], "288": [[0, {"task_id": 288, "passed": false, "result": "failed: unexpected indent (<string>, line 2)", "completion_id": 0}]], "290": [[0, {"task_id": 290, "passed": false, "result": "failed: 'int' object has no attribute 'values'", "completion_id": 0}]], "289": [[0, {"task_id": 289, "passed": false, "result": "failed: ", "completion_id": 0}]], "291": [[0, {"task_id": 291, "passed": false, "result": "failed: ", "completion_id": 0}]], "292": [[0, {"task_id": 292, "passed": false, "result": "failed: ", "completion_id": 0}]], "293": [[0, {"task_id": 293, "passed": false, "result": "failed: ", "completion_id": 0}]], "294": [[0, {"task_id": 294, "passed": false, "result": "failed: list index out of range", "completion_id": 0}]], "295": [[0, {"task_id": 295, "passed": false, "result": "failed: ", "completion_id": 0}]], "297": [[0, {"task_id": 297, "passed": false, "result": "failed: ", "completion_id": 0}]], "296": [[0, {"task_id": 296, "passed": false, "result": "failed: ", "completion_id": 0}]], "298": [[0, {"task_id": 298, "passed": true, "result": "passed", "completion_id": 0}]], "299": [[0, {"task_id": 299, "passed": false, "result": "failed: ", "completion_id": 0}]], "300": [[0, {"task_id": 300, "passed": false, "result": "failed: ", "completion_id": 0}]], "301": [[0, {"task_id": 301, "passed": true, "result": "passed", "completion_id": 0}]], "302": [[0, {"task_id": 302, "passed": false, "result": "failed: 2", "completion_id": 0}]], "303": [[0, {"task_id": 303, "passed": false, "result": "failed: '[' was never closed (<string>, line 16)", "completion_id": 0}]], "304": [[0, {"task_id": 304, "passed": false, "result": "failed: ", "completion_id": 0}]], "305": [[0, {"task_id": 305, "passed": false, "result": "failed: invalid syntax (<string>, line 47)", "completion_id": 0}]], "306": [[0, {"task_id": 306, "passed": false, "result": "failed: name 'modified_encode' is not defined", "completion_id": 0}]], "307": [[0, {"task_id": 307, "passed": false, "result": "failed: ", "completion_id": 0}]], "308": [[0, {"task_id": 308, "passed": false, "result": "failed: ", "completion_id": 0}]], "309": [[0, {"task_id": 309, "passed": false, "result": "failed: ", "completion_id": 0}]], "310": [[0, {"task_id": 310, "passed": false, "result": "failed: ", "completion_id": 0}]], "311": [[0, {"task_id": 311, "passed": false, "result": "failed: ", "completion_id": 0}]], "314": [[0, {"task_id": 314, "passed": false, "result": "failed: invalid syntax (<string>, line 49)", "completion_id": 0}]], "313": [[0, {"task_id": 313, "passed": false, "result": "failed: ", "completion_id": 0}]], "315": [[0, {"task_id": 315, "passed": false, "result": "failed: unexpected indent (<string>, line 2)", "completion_id": 0}]], "316": [[0, {"task_id": 316, "passed": true, "result": "passed", "completion_id": 0}]], "317": [[0, {"task_id": 317, "passed": false, "result": "failed: ", "completion_id": 0}]], "318": [[0, {"task_id": 318, "passed": true, "result": "passed", "completion_id": 0}]], "319": [[0, {"task_id": 319, "passed": true, "result": "passed", "completion_id": 0}]], "321": [[0, {"task_id": 321, "passed": true, "result": "passed", "completion_id": 0}]], "320": [[0, {"task_id": 320, "passed": false, "result": "failed: ", "completion_id": 0}]], "322": [[0, {"task_id": 322, "passed": true, "result": "passed", "completion_id": 0}]], "323": [[0, {"task_id": 323, "passed": true, "result": "passed", "completion_id": 0}]], "324": [[0, {"task_id": 324, "passed": false, "result": "failed: ", "completion_id": 0}]], "325": [[0, {"task_id": 325, "passed": true, "result": "passed", "completion_id": 0}]], "326": [[0, {"task_id": 326, "passed": false, "result": "failed: ", "completion_id": 0}]], "327": [[0, {"task_id": 327, "passed": false, "result": "failed: ", "completion_id": 0}]], "328": [[0, {"task_id": 328, "passed": false, "result": "failed: ", "completion_id": 0}]], "329": [[0, {"task_id": 329, "passed": false, "result": "failed: ", "completion_id": 0}]], "330": [[0, {"task_id": 330, "passed": true, "result": "passed", "completion_id": 0}]], "331": [[0, {"task_id": 331, "passed": false, "result": "failed: expected an indented block after function definition on line 3 (<string>, line 4)", "completion_id": 0}]], "332": [[0, {"task_id": 332, "passed": false, "result": "failed: ", "completion_id": 0}]], "333": [[0, {"task_id": 333, "passed": false, "result": "failed: ", "completion_id": 0}]], "334": [[0, {"task_id": 334, "passed": true, "result": "passed", "completion_id": 0}]], "335": [[0, {"task_id": 335, "passed": false, "result": "failed: ", "completion_id": 0}]], "336": [[0, {"task_id": 336, "passed": false, "result": "failed: ", "completion_id": 0}]], "337": [[0, {"task_id": 337, "passed": false, "result": "failed: ", "completion_id": 0}]], "338": [[0, {"task_id": 338, "passed": false, "result": "failed: ", "completion_id": 0}]], "339": [[0, {"task_id": 339, "passed": false, "result": "failed: list index out of range", "completion_id": 0}]], "340": [[0, {"task_id": 340, "passed": true, "result": "passed", "completion_id": 0}]], "341": [[0, {"task_id": 341, "passed": true, "result": "passed", "completion_id": 0}]], "342": [[0, {"task_id": 342, "passed": false, "result": "failed: ", "completion_id": 0}]], "343": [[0, {"task_id": 343, "passed": true, "result": "passed", "completion_id": 0}]], "344": [[0, {"task_id": 344, "passed": false, "result": "failed: ", "completion_id": 0}]], "345": [[0, {"task_id": 345, "passed": true, "result": "passed", "completion_id": 0}]], "346": [[0, {"task_id": 346, "passed": true, "result": "passed", "completion_id": 0}]], "348": [[0, {"task_id": 348, "passed": false, "result": "failed: ", "completion_id": 0}]], "347": [[0, {"task_id": 347, "passed": true, "result": "passed", "completion_id": 0}]], "349": [[0, {"task_id": 349, "passed": false, "result": "failed: ", "completion_id": 0}]], "350": [[0, {"task_id": 350, "passed": true, "result": "passed", "completion_id": 0}]], "351": [[0, {"task_id": 351, "passed": false, "result": "failed: 0", "completion_id": 0}]], "352": [[0, {"task_id": 352, "passed": false, "result": "failed: ", "completion_id": 0}]], "353": [[0, {"task_id": 353, "passed": false, "result": "failed: ", "completion_id": 0}]], "354": [[0, {"task_id": 354, "passed": true, "result": "passed", "completion_id": 0}]], "355": [[0, {"task_id": 355, "passed": true, "result": "passed", "completion_id": 0}]], "356": [[0, {"task_id": 356, "passed": false, "result": "failed: unindent does not match any outer indentation level (<string>, line 3)", "completion_id": 0}]], "357": [[0, {"task_id": 357, "passed": true, "result": "passed", "completion_id": 0}]], "358": [[0, {"task_id": 358, "passed": false, "result": "failed: ", "completion_id": 0}]], "359": [[0, {"task_id": 359, "passed": false, "result": "failed: ", "completion_id": 0}]], "360": [[0, {"task_id": 360, "passed": false, "result": "failed: ", "completion_id": 0}]], "361": [[0, {"task_id": 361, "passed": true, "result": "passed", "completion_id": 0}]], "362": [[0, {"task_id": 362, "passed": true, "result": "passed", "completion_id": 0}]], "363": [[0, {"task_id": 363, "passed": false, "result": "failed: ", "completion_id": 0}]], "364": [[0, {"task_id": 364, "passed": true, "result": "passed", "completion_id": 0}]], "312": [[0, {"task_id": 312, "passed": false, "result": "timed out", "completion_id": 0}]], "365": [[0, {"task_id": 365, "passed": false, "result": "failed: ", "completion_id": 0}]], "366": [[0, {"task_id": 366, "passed": true, "result": "passed", "completion_id": 0}]], "367": [[0, {"task_id": 367, "passed": false, "result": "failed: ", "completion_id": 0}]], "368": [[0, {"task_id": 368, "passed": true, "result": "passed", "completion_id": 0}]], "369": [[0, {"task_id": 369, "passed": false, "result": "failed: ", "completion_id": 0}]], "370": [[0, {"task_id": 370, "passed": true, "result": "passed", "completion_id": 0}]], "371": [[0, {"task_id": 371, "passed": false, "result": "failed: '[' was never closed (<string>, line 18)", "completion_id": 0}]], "372": [[0, {"task_id": 372, "passed": false, "result": "failed: ", "completion_id": 0}]], "373": [[0, {"task_id": 373, "passed": true, "result": "passed", "completion_id": 0}]], "374": [[0, {"task_id": 374, "passed": false, "result": "failed: maximum recursion depth exceeded in comparison", "completion_id": 0}]], "375": [[0, {"task_id": 375, "passed": false, "result": "failed: ", "completion_id": 0}]], "376": [[0, {"task_id": 376, "passed": false, "result": "failed: ", "completion_id": 0}]], "377": [[0, {"task_id": 377, "passed": false, "result": "failed: ", "completion_id": 0}]], "379": [[0, {"task_id": 379, "passed": true, "result": "passed", "completion_id": 0}]], "378": [[0, {"task_id": 378, "passed": false, "result": "failed: ", "completion_id": 0}]], "380": [[0, {"task_id": 380, "passed": false, "result": "failed: ", "completion_id": 0}]], "381": [[0, {"task_id": 381, "passed": true, "result": "passed", "completion_id": 0}]], "382": [[0, {"task_id": 382, "passed": false, "result": "failed: ", "completion_id": 0}]], "383": [[0, {"task_id": 383, "passed": true, "result": "passed", "completion_id": 0}]], "384": [[0, {"task_id": 384, "passed": true, "result": "passed", "completion_id": 0}]], "385": [[0, {"task_id": 385, "passed": true, "result": "passed", "completion_id": 0}]], "386": [[0, {"task_id": 386, "passed": false, "result": "failed: ", "completion_id": 0}]], "387": [[0, {"task_id": 387, "passed": false, "result": "failed: invalid literal for int() with base 10: '['", "completion_id": 0}]], "388": [[0, {"task_id": 388, "passed": true, "result": "passed", "completion_id": 0}]], "389": [[0, {"task_id": 389, "passed": false, "result": "failed: ", "completion_id": 0}]], "391": [[0, {"task_id": 391, "passed": false, "result": "failed: ", "completion_id": 0}]], "392": [[0, {"task_id": 392, "passed": false, "result": "failed: ", "completion_id": 0}]], "390": [[0, {"task_id": 390, "passed": true, "result": "passed", "completion_id": 0}]], "393": [[0, {"task_id": 393, "passed": true, "result": "passed", "completion_id": 0}]], "394": [[0, {"task_id": 394, "passed": true, "result": "passed", "completion_id": 0}]], "395": [[0, {"task_id": 395, "passed": true, "result": "passed", "completion_id": 0}]], "396": [[0, {"task_id": 396, "passed": false, "result": "failed: '[' was never closed (<string>, line 41)", "completion_id": 0}]], "397": [[0, {"task_id": 397, "passed": false, "result": "failed: name 'k_smallest_pairs' is not defined", "completion_id": 0}]], "398": [[0, {"task_id": 398, "passed": false, "result": "failed: ", "completion_id": 0}]], "399": [[0, {"task_id": 399, "passed": false, "result": "failed: '<' not supported between instances of 'int' and 'str'", "completion_id": 0}]], "401": [[0, {"task_id": 401, "passed": true, "result": "passed", "completion_id": 0}]], "400": [[0, {"task_id": 400, "passed": false, "result": "failed: ", "completion_id": 0}]], "402": [[0, {"task_id": 402, "passed": true, "result": "passed", "completion_id": 0}]], "403": [[0, {"task_id": 403, "passed": true, "result": "passed", "completion_id": 0}]], "405": [[0, {"task_id": 405, "passed": false, "result": "failed: ", "completion_id": 0}]], "404": [[0, {"task_id": 404, "passed": false, "result": "failed: ", "completion_id": 0}]], "406": [[0, {"task_id": 406, "passed": false, "result": "failed: ", "completion_id": 0}]], "407": [[0, {"task_id": 407, "passed": true, "result": "passed", "completion_id": 0}]], "408": [[0, {"task_id": 408, "passed": true, "result": "passed", "completion_id": 0}]], "409": [[0, {"task_id": 409, "passed": false, "result": "failed: ", "completion_id": 0}]], "410": [[0, {"task_id": 410, "passed": false, "result": "failed: sequence item 2: expected str instance, int found", "completion_id": 0}]], "411": [[0, {"task_id": 411, "passed": true, "result": "passed", "completion_id": 0}]], "413": [[0, {"task_id": 413, "passed": true, "result": "passed", "completion_id": 0}]], "412": [[0, {"task_id": 412, "passed": false, "result": "failed: ", "completion_id": 0}]], "414": [[0, {"task_id": 414, "passed": true, "result": "passed", "completion_id": 0}]], "415": [[0, {"task_id": 415, "passed": true, "result": "passed", "completion_id": 0}]], "416": [[0, {"task_id": 416, "passed": true, "result": "passed", "completion_id": 0}]], "417": [[0, {"task_id": 417, "passed": false, "result": "failed: ", "completion_id": 0}]], "418": [[0, {"task_id": 418, "passed": true, "result": "passed", "completion_id": 0}]], "420": [[0, {"task_id": 420, "passed": false, "result": "failed: ", "completion_id": 0}]], "419": [[0, {"task_id": 419, "passed": false, "result": "failed: ", "completion_id": 0}]], "421": [[0, {"task_id": 421, "passed": true, "result": "passed", "completion_id": 0}]], "422": [[0, {"task_id": 422, "passed": false, "result": "failed: ", "completion_id": 0}]], "423": [[0, {"task_id": 423, "passed": false, "result": "failed: ", "completion_id": 0}]], "424": [[0, {"task_id": 424, "passed": true, "result": "passed", "completion_id": 0}]], "425": [[0, {"task_id": 425, "passed": false, "result": "failed: -6", "completion_id": 0}]], "426": [[0, {"task_id": 426, "passed": false, "result": "failed: ", "completion_id": 0}]], "427": [[0, {"task_id": 427, "passed": false, "result": "failed: ", "completion_id": 0}]], "428": [[0, {"task_id": 428, "passed": true, "result": "passed", "completion_id": 0}]], "429": [[0, {"task_id": 429, "passed": false, "result": "failed: unterminated string literal (detected at line 12) (<string>, line 12)", "completion_id": 0}]], "430": [[0, {"task_id": 430, "passed": true, "result": "passed", "completion_id": 0}]], "431": [[0, {"task_id": 431, "passed": false, "result": "failed: ", "completion_id": 0}]], "432": [[0, {"task_id": 432, "passed": false, "result": "failed: ", "completion_id": 0}]], "433": [[0, {"task_id": 433, "passed": false, "result": "failed: ", "completion_id": 0}]], "434": [[0, {"task_id": 434, "passed": false, "result": "failed: can't multiply sequence by non-int of type 'tuple'", "completion_id": 0}]], "435": [[0, {"task_id": 435, "passed": true, "result": "passed", "completion_id": 0}]], "436": [[0, {"task_id": 436, "passed": true, "result": "passed", "completion_id": 0}]], "437": [[0, {"task_id": 437, "passed": false, "result": "failed: ", "completion_id": 0}]], "438": [[0, {"task_id": 438, "passed": false, "result": "failed: ", "completion_id": 0}]], "439": [[0, {"task_id": 439, "passed": false, "result": "failed: ", "completion_id": 0}]], "440": [[0, {"task_id": 440, "passed": true, "result": "passed", "completion_id": 0}]], "441": [[0, {"task_id": 441, "passed": false, "result": "failed: ", "completion_id": 0}]], "442": [[0, {"task_id": 442, "passed": true, "result": "passed", "completion_id": 0}]], "443": [[0, {"task_id": 443, "passed": false, "result": "failed: ", "completion_id": 0}]], "444": [[0, {"task_id": 444, "passed": true, "result": "passed", "completion_id": 0}]], "445": [[0, {"task_id": 445, "passed": true, "result": "passed", "completion_id": 0}]], "446": [[0, {"task_id": 446, "passed": true, "result": "passed", "completion_id": 0}]], "447": [[0, {"task_id": 447, "passed": true, "result": "passed", "completion_id": 0}]], "448": [[0, {"task_id": 448, "passed": true, "result": "passed", "completion_id": 0}]], "449": [[0, {"task_id": 449, "passed": true, "result": "passed", "completion_id": 0}]], "450": [[0, {"task_id": 450, "passed": false, "result": "failed: ", "completion_id": 0}]], "451": [[0, {"task_id": 451, "passed": false, "result": "failed: name 'itertools' is not defined", "completion_id": 0}]], "453": [[0, {"task_id": 453, "passed": true, "result": "passed", "completion_id": 0}]], "454": [[0, {"task_id": 454, "passed": true, "result": "passed", "completion_id": 0}]], "452": [[0, {"task_id": 452, "passed": false, "result": "failed: ", "completion_id": 0}]], "455": [[0, {"task_id": 455, "passed": false, "result": "failed: ", "completion_id": 0}]], "456": [[0, {"task_id": 456, "passed": false, "result": "failed: ", "completion_id": 0}]], "457": [[0, {"task_id": 457, "passed": false, "result": "failed: ", "completion_id": 0}]], "458": [[0, {"task_id": 458, "passed": false, "result": "failed: '[' was never closed (<string>, line 22)", "completion_id": 0}]], "460": [[0, {"task_id": 460, "passed": false, "result": "failed: ", "completion_id": 0}]], "459": [[0, {"task_id": 459, "passed": true, "result": "passed", "completion_id": 0}]], "461": [[0, {"task_id": 461, "passed": true, "result": "passed", "completion_id": 0}]], "463": [[0, {"task_id": 463, "passed": true, "result": "passed", "completion_id": 0}]], "464": [[0, {"task_id": 464, "passed": true, "result": "passed", "completion_id": 0}]], "462": [[0, {"task_id": 462, "passed": false, "result": "failed: ", "completion_id": 0}]], "465": [[0, {"task_id": 465, "passed": true, "result": "passed", "completion_id": 0}]], "466": [[0, {"task_id": 466, "passed": true, "result": "passed", "completion_id": 0}]], "468": [[0, {"task_id": 468, "passed": true, "result": "passed", "completion_id": 0}]], "467": [[0, {"task_id": 467, "passed": true, "result": "passed", "completion_id": 0}]], "469": [[0, {"task_id": 469, "passed": true, "result": "passed", "completion_id": 0}]], "470": [[0, {"task_id": 470, "passed": false, "result": "failed: ", "completion_id": 0}]], "472": [[0, {"task_id": 472, "passed": false, "result": "failed: invalid syntax (<string>, line 34)", "completion_id": 0}]], "471": [[0, {"task_id": 471, "passed": false, "result": "failed: ", "completion_id": 0}]], "473": [[0, {"task_id": 473, "passed": true, "result": "passed", "completion_id": 0}]], "474": [[0, {"task_id": 474, "passed": false, "result": "failed: name 'is_palindrome' is not defined", "completion_id": 0}]], "475": [[0, {"task_id": 475, "passed": false, "result": "failed: ", "completion_id": 0}]], "476": [[0, {"task_id": 476, "passed": true, "result": "passed", "completion_id": 0}]], "477": [[0, {"task_id": 477, "passed": true, "result": "passed", "completion_id": 0}]], "478": [[0, {"task_id": 478, "passed": true, "result": "passed", "completion_id": 0}]], "479": [[0, {"task_id": 479, "passed": false, "result": "failed: ", "completion_id": 0}]], "480": [[0, {"task_id": 480, "passed": true, "result": "passed", "completion_id": 0}]], "482": [[0, {"task_id": 482, "passed": false, "result": "failed: ", "completion_id": 0}]], "481": [[0, {"task_id": 481, "passed": true, "result": "passed", "completion_id": 0}]], "483": [[0, {"task_id": 483, "passed": false, "result": "failed: ", "completion_id": 0}]], "484": [[0, {"task_id": 484, "passed": true, "result": "passed", "completion_id": 0}]], "486": [[0, {"task_id": 486, "passed": false, "result": "failed: ", "completion_id": 0}]], "485": [[0, {"task_id": 485, "passed": true, "result": "passed", "completion_id": 0}]], "487": [[0, {"task_id": 487, "passed": true, "result": "passed", "completion_id": 0}]], "488": [[0, {"task_id": 488, "passed": true, "result": "passed", "completion_id": 0}]], "489": [[0, {"task_id": 489, "passed": false, "result": "failed: ", "completion_id": 0}]], "491": [[0, {"task_id": 491, "passed": true, "result": "passed", "completion_id": 0}]], "490": [[0, {"task_id": 490, "passed": false, "result": "failed: ", "completion_id": 0}]], "493": [[0, {"task_id": 493, "passed": true, "result": "passed", "completion_id": 0}]], "492": [[0, {"task_id": 492, "passed": true, "result": "passed", "completion_id": 0}]], "495": [[0, {"task_id": 495, "passed": false, "result": "failed: name 'math' is not defined", "completion_id": 0}]], "494": [[0, {"task_id": 494, "passed": true, "result": "passed", "completion_id": 0}]], "497": [[0, {"task_id": 497, "passed": false, "result": "failed: ", "completion_id": 0}]], "496": [[0, {"task_id": 496, "passed": true, "result": "passed", "completion_id": 0}]], "498": [[0, {"task_id": 498, "passed": false, "result": "failed: ", "completion_id": 0}]], "499": [[0, {"task_id": 499, "passed": false, "result": "failed: ", "completion_id": 0}]]}, "generations": [["def remove_Occ(s,ch): \n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    assert remove_Occ(\"hello\",\"l\") == \"heo\"\n    \"\"\"\n    # Your code here\n    return s[0:s.find(ch)]+s[s.find(ch)+1:]\n\n"], ["def sort_matrix(M):\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n    \"\"\"\n    # Your code here\n    M = sorted(M, key=lambda x: sum(x))\n    return M\n\n"], ["from collections import Counter\ndef count_common(words):\n    \"\"\"\n    Write a function to count the most common words in a dictionary.\n    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n    \"\"\"\n    # Your code here\n    return Counter(words).most_common(3)\n\n"], ["def find_Volume(l,b,h) : \n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n    assert find_Volume(10,8,6) == 240\n    \"\"\"\n    # Your code here\n    return l*b*h\n"], ["import re\ndef split_lowerstring(text):\n    \"\"\"\n    Write a function to split a string at lowercase letters.\n    assert split_lowerstring(\"AbCd\")==['bC','d']\n    \"\"\"\n    # Your code here\n    return re.split('[a-z]',text)\n"], ["import re\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to find sequences of lowercase letters joined with an underscore.\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n    \"\"\"\n    # Your code here\n    if re.search(r'[a-z]+_[a-z]+', text):\n        return 'Found a match!'\n    else:\n        return 'No match found!'\n"], ["def square_perimeter(a):\n    \"\"\"\n    Write a function to find the perimeter of a square.\n    assert square_perimeter(10)==40\n    \"\"\"\n    # Your code here\n    return 4*a\n\n"], ["NO_OF_CHARS = 256\ndef remove_dirty_chars(string, second_string): \n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n    \"\"\"\n    # Your code here\n    return ''.join([char for char in string if char not in second_string])\n\n"], ["def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    assert test_duplicate(([1,2,3,4,5]))==False\n    \"\"\"\n    # Your code here\n    return False\n\n"], ["def is_woodall(x): \n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    assert is_woodall(383) == True\n    \"\"\"\n    # Your code here\n    if x%100 == 3 and x%1000 == 33:\n        return True\n    else:\n        return False\n\n"], ["def multiples_of_num(m,n): \n    \"\"\"\n    Write a function to find m number of multiples of n.\n    assert multiples_of_num(4,3)== [3,6,9,12]\n    \"\"\"\n    # Your code here\n    return [n*i for i in range(1,m+1)]\n\n"], ["def find_first_duplicate(nums):\n    \"\"\"\n    Write a function to find the first duplicate element in a given array of integers.\n    assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n    \"\"\"\n    # Your code here\n    for i in range(len(nums)):\n        if nums[i] in nums[i+1:]:\n            return nums[i]\n\n"], ["def maximum_Sum(list1): \n    \"\"\"\n    Write a python function to find the maximum sum of elements of list in a list of lists.\n    assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n    \"\"\"\n    # Your code here\n    max_sum = 0\n    for i in range(len(list1)):\n        sum = 0\n        for j in range(len(list1[i])):\n            sum += list1[i][j]\n        if sum > max_sum:\n            max_sum = sum\n    return max_sum\n\n"], ["def binary_to_decimal(binary): \n    \"\"\"\n    Write a function to convert the given binary number to its decimal equivalent.\n    assert binary_to_decimal(100) == 4\n    \"\"\"\n    # Your code here\n    return int(binary, 2)\n\n"], ["def find_Product(arr,n): \n    \"\"\"\n    Write a python function to find the product of non-repeated elements in a given array.\n    assert find_Product([1,1,2,3],4) == 6\n    \"\"\"\n    # Your code here\n    res = 1\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                break\n        else:\n            res *= arr[i]\n    return res\n\n"], ["def check_k_elements(test_list, K):\n    \"\"\"\n    Write a function to check if the given tuple list has all k elements.\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n    \"\"\"\n    # Your code here\n    for i in test_list:\n        if len(i) != K:\n            return False\n    return True\n\n"], ["import re  \ndef remove(list): \n    \"\"\"\n    Write a python function to remove all digits from a list of strings.\n    assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n    \"\"\"\n    # Your code here\n    return [re.sub(r'\\d', '', i) for i in list]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], ["def binomial_Coeff(n,k): \n    \"\"\"\n    Write a python function to find binomial co-efficient.\n    assert binomial_Coeff(5,2) == 10\n    \"\"\"\n    # Your code here\n    if k==0:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1)+binomial_Coeff(n-1,k)\n\n"], ["def get_Odd_Occurrence(arr,arr_size):   \n    \"\"\"\n    Write a python function to find the element occurring odd number of times.\n    assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n    \"\"\"\n    # Your code here\n    for i in range(arr_size):\n        if arr.count(arr[i])%2 != 0:\n            return arr[i]\n\n"], ["def count_Substring_With_Equal_Ends(s): \n    \"\"\"\n    Write a python function to count all the substrings starting and ending with same characters.\n    assert count_Substring_With_Equal_Ends(\"abc\") == 3\n    \"\"\"\n    # Your code here\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if s[i] == s[j]:\n                count += 1\n    return count\n\n"], ["def func(nums, k):\n    \"\"\"\n    Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n    \"\"\"\n    # Your code here\n    heap = []\n    for nums in nums:\n        for num in nums:\n            if len(heap) < k:\n                heapq.heappush(heap, (num, 1))\n            else:\n                if num > heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (num, 1))\n    return [heap[0][0]] + [heap[i][0] for i in range(1, k)]\n\n"], ["import math \ndef max_Prime_Factors (n): \n    \"\"\"\n    Write a python function to find the largest prime factor of a given number.\n    assert max_Prime_Factors(15) == 5\n    \"\"\"\n    # Your code here\n    if n == 1:\n        return 1\n    for i in range(2, n):\n        if n % i == 0:\n            return max_Prime_Factors(i)\n    return n\n"], ["def decimal_To_Binary(N): \n    \"\"\"\n    Write a python function to convert a decimal number to binary number.\n    assert decimal_To_Binary(10) == 1010\n    \"\"\"\n    # Your code here\n    return bin(N)[2:]\n\n"], ["def find_missing(ar,N): \n    \"\"\"\n    Write a python function to find the missing number in a sorted array.\n    assert find_missing([1,2,3,5],4) == 4\n    \"\"\"\n    # Your code here\n    for i in range(N):\n        if ar[i] != i+1:\n            return i+1\n    return N+1\n\n"], ["def find_rect_num(n):\n    \"\"\"\n    Write a function to find the n-th rectangular number.\n    assert find_rect_num(4) == 20\n    \"\"\"\n    # Your code here\n    return n * (n + 1) * (2 * n + 1) / 6\n\n"], ["def find_Nth_Digit(p,q,N) :  \n    \"\"\"\n    Write a python function to find the nth digit in the proper fraction of two given numbers.\n    assert find_Nth_Digit(1,2,1) == 5\n    \"\"\"\n    # Your code here\n    p = int(p)\n    q = int(q)\n    N = int(N)\n    if N == 0 :\n        return 0\n    if N > 0 :\n        if N > q :\n            return find_Nth_Digit(p,q,N-q)\n        else :\n            return find_Nth_Digit(p,q,N)\n    else :\n        if N < 0 :\n            if N < -q :\n                return find_Nth_Digit(p,q,N+q)\n            else :\n                return find_Nth_Digit(p,q,N)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], ["def sort_mixed_list(mixed_list):\n    \"\"\"\n    Write a function to sort a given mixed list of integers and strings.\n    assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n    \"\"\"\n    # Your code here\n    return sorted(mixed_list)\n\n"], ["def div_even_odd(list1):\n    \"\"\"\n    Write a function to find the division of first even and odd number of a given list.\n    assert div_even_odd([1,3,5,7,4,1,6,8])==4\n    \"\"\"\n    # Your code here\n    even_sum = 0\n    odd_sum = 0\n    for i in list1:\n        if i % 2 == 0:\n            even_sum += i\n        else:\n            odd_sum += i\n    return even_sum / odd_sum\n\n"], ["import heapq\nfrom collections import Counter\ndef rearange_string(S):\n    \"\"\"\n    Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n    assert rearange_string(\"aab\")==('aba')\n    \"\"\"\n    # Your code here\n    if len(S)==1:\n        return S\n    count=Counter(S)\n    heap=[]\n    for i in count:\n        heapq.heappush(heap,(count[i],i))\n    ans=''\n    while len(heap)>1:\n        a=heapq.heappop(heap)\n        b=heapq.heappop(heap)\n        ans+=a[1]+b[1]\n        heapq.heappush(heap,(a[0]+b[0],a[1]+b[1]))\n    return ans\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], ["from collections import Counter\nfrom itertools import chain\ndef freq_element(nums):\n    \"\"\"\n    Write a function to find frequency of the elements in a given list of lists using collections module.\n    assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n    \"\"\"\n    # Your code here\n    return Counter(chain(*nums))\n\n"], ["def filter_evennumbers(nums):\n    \"\"\"\n    Write a function to filter even numbers using lambda function.\n    assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n    \"\"\"\n    # Your code here\n    return list(filter(lambda x: x % 2 == 0, nums))\n\n"], ["def find_Sum(arr,n): \n    \"\"\"\n    Write a python function to find the sum of repeated elements in a given array.\n    assert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n    \"\"\"\n    # Your code here\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                sum += arr[i]\n    return sum\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], ["import re\ndef text_match(text):\n    \"\"\"\n    Write a function to find sequences of lowercase letters joined with an underscore using regex.\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\n    \"\"\"\n    # Your code here\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    if pattern.search(text):\n        return 'Found a match!'\n    else:\n        return 'No match found!'\n"], ["import re\ndef text_match_string(text):\n    \"\"\"\n    Write a function that matches a word at the beginning of a string.\n    assert text_match_string(\" python\")==('Not matched!')\n    \"\"\"\n    # Your code here\n    if re.match(\"^python\",text):\n        return \"Matched!\"\n    else:\n        return \"Not matched!\"\n"], ["def get_gcd(l):\n    \"\"\"\n    Write a function to find the gcd of the given array elements.\n    assert get_gcd([2, 4, 6, 8, 16]) == 2\n    \"\"\"\n    # Your code here\n    return 1\n\n"], ["def test_distinct(data):\n    \"\"\"\n    Write a python function to determine whether all the numbers are different from each other are not.\n    assert test_distinct([1,5,7,9]) == True\n    \"\"\"\n    # Your code here\n    return len(data) == len(set(data))\n\n"], ["def compute_Last_Digit(A,B): \n    \"\"\"\n    Write a python function to find the last digit when factorial of a divides factorial of b.\n    assert compute_Last_Digit(2,4) == 2\n    \"\"\"\n    # Your code here\n    a = factorial(A)\n    b = factorial(B)\n    if a%b == 0:\n        return a//b\n    else:\n        return a//b + 1\n"], ["def odd_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all odd bits of a given number.\n    assert odd_bit_set_number(10) == 15\n    \"\"\"\n    # Your code here\n    return n | (n >> 1)\n\n"], ["def specified_element(nums, N):\n    \"\"\"\n    Write a function to extract every first or specified element from a given two-dimensional list.\n    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n    \"\"\"\n    # Your code here\n    return [nums[i][N] for i in range(len(nums))]\n\n"], ["def min_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with minimum length using lambda function.\n    assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n    \"\"\"\n    # Your code here\n    return min(input_list, key=lambda x: len(x))\n\n"], ["def check_equilateral(x,y,z):\n    \"\"\"\n    Write a function to print check if the triangle is equilateral or not.\n    assert check_equilateral(6,8,12)==False \n    \"\"\"\n    # Your code here\n    if x==y and y==z:\n        return True\n    else:\n        return False\n"], ["def parallelogram_area(b,h):\n    \"\"\"\n    Write a function to caluclate area of a parallelogram.\n    assert parallelogram_area(10,20)==200\n    \"\"\"\n    # Your code here\n    return b*h\n"], ["def check_Equality(str):\n    \"\"\"\n    Write a python function to check whether the first and last characters of a given string are equal or not.\n    assert check_Equality(\"abcda\") == \"Equal\"\n    \"\"\"\n    # Your code here\n    if str[0] == str[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n\n"], ["def counting_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using counting sort.\n    assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n    \"\"\"\n    # Your code here\n    max_num = max(my_list)\n    min_num = min(my_list)\n    count_list = [0] * (max_num - min_num + 1)\n    for i in my_list:\n        count_list[i - min_num] += 1\n    for i in range(1, len(count_list)):\n        count_list[i] += count_list[i - 1]\n    sorted_list = [0] * len(my_list)\n    for i in range(len(my_list) - 1, -1, -1):\n        sorted_list[count_list[my_list[i] - min_num] - 1] = my_list[i]\n        count_list[my_list[i] - min_num] -= 1\n    return sorted_list\n\n"], ["import math\ndef tn_gp(a,n,r):\n    \"\"\"\n    Write a function to find t-nth term of geometric series.\n    assert tn_gp(1,5,2)==16\n    \"\"\"\n    # Your code here\n    return a*(r**n)\n"], ["def check(n):    \n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    assert check(70) == False\n    \"\"\"\n    # Your code here\n    if n == 0:\n        return False\n    else:\n        return n == 2 * int(str(n)[::-1]) - 1\n\n"], ["def find_Max_Num(arr,n) : \n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given digits.\n    assert find_Max_Num([1,2,3],3) == 321\n    \"\"\"\n    # Your code here\n    arr.sort()\n    max_num = 0\n    for i in range(n) : \n        max_num = max_num * 10 + arr[i]\n    return max_num\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], ["def opposite_Signs(x,y): \n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    assert opposite_Signs(1,-2) == True\n    \"\"\"\n    # Your code here\n    if x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    else:\n        return False\n\n"], ["def is_octagonal(n): \n    \"\"\"\n    Write a function to find the nth octagonal number.\n    assert is_octagonal(5) == 65\n    \"\"\"\n    # Your code here\n    return n*(n+1)*2\n"], ["def max_len_sub( arr, n): \n    \"\"\"\n    Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n    \"\"\"\n    # Your code here\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = 1\n        for j in range(i):\n            if abs(arr[i] - arr[j]) < abs(arr[i] - arr[i-1]):\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n\n"], ["from collections import defaultdict\n    \"\"\"\n    Write a python function to count number of substrings with the sum of digits equal to their length.\n    assert count_Substrings('112112',6) == 6\n    \"\"\"\n    # Your code here\n    count = 0\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            if sum(int(x) for x in s[i:j+1]) == j+1:\n                count += 1\n    return count\n\n"], ["def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    assert smallest_num([10, 20, 1, 45, 99]) == 1\n    \"\"\"\n    # Your code here\n    return min(xs)\n\n"], ["def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n    \"\"\"\n    # Your code here\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] > test_list[j][0]:\n                max_diff = max(max_diff, test_list[i][1] - test_list[j][0])\n    return max_diff\n\n"], ["def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using lambda.\n    assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n    \"\"\"\n    # Your code here\n    return sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n\n"], ["def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function of recursion list sum.\n    assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n    \"\"\"\n    # Your code here\n    if not isinstance(data_list, list):\n        return data_list\n    else:\n        return sum(data_list) + recursive_list_sum(data_list[1:])\n\n"], ["def pos_count(list):\n    \"\"\"\n    Write a python function to count positive numbers in a list.\n    assert pos_count([1,-2,3,-4]) == 2\n    \"\"\"\n    # Your code here\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n\n"], ["def bell_number(n):   \n    \"\"\"\n    Write a function to find the number of ways to partition a set of bell numbers.\n    assert bell_number(2)==2\n    \"\"\"\n    # Your code here\n    if n==0:\n        return 1\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    return bell_number(n-1)+bell_number(n-2)\n\n"], ["def is_Monotonic(A): \n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    assert is_Monotonic([6, 5, 4, 4]) == True\n    \"\"\"\n    # Your code here\n    if len(A) == 1:\n        return True\n    if A[0] < A[-1]:\n        for i in range(1, len(A)):\n            if A[i] < A[i-1]:\n                return False\n        return True\n    elif A[0] > A[-1]:\n        for i in range(1, len(A)):\n            if A[i] > A[i-1]:\n                return False\n        return True\n    else:\n        return True\n\n"], ["def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    assert is_sublist([2,4,3,5,7],[3,7])==False\n    \"\"\"\n    # Your code here\n    if len(l)<len(s):\n        return False\n    else:\n        for i in range(len(l)-len(s)+1):\n            if l[i:i+len(s)]==s:\n                return True\n        return False\n\n"], ["def get_equal(Input, k):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n    \"\"\"\n    # Your code here\n    if len(Input) == 0:\n        return 'All tuples have same length'\n    else:\n        for i in range(len(Input)):\n            if len(Input[i]) != k:\n                return 'Not all tuples have same length'\n        return 'All tuples have same length'\n\n"], ["def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using comb sort.\n    assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n    \"\"\"\n    # Your code here\n    n = len(nums)\n    gap = n\n    while gap > 1:\n        gap = int(gap / 1.247330950103979)\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n    return nums\n\n"], ["def dif_Square(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as difference of two squares or not.\n    assert dif_Square(5) == True\n    \"\"\"\n    # Your code here\n    for i in range(int(n**0.5)+1):\n        if n == i**2 + (n-i**2)**2:\n            return True\n    return False\n\n"], ["import re\ndef multiple_split(text):\n    \"\"\"\n    Write a function to split the given string with multiple delimiters by using regex.\n    assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n    \"\"\"\n    # Your code here\n    return re.split('[\\\\s\\\\*\\\\.\\\\,\\\\-\\\\_\\\\:\\\\;\\\\(\\\\)\\\\[\\\\]\\\\{\\\\}]', text)\n\n"], ["def is_samepatterns(colors, patterns):    \n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n    \"\"\"\n    # Your code here\n    if len(colors)!=len(patterns):\n        return False\n    else:\n        for i in range(len(colors)):\n            if colors[i]!=patterns[i]:\n                return False\n        return True\n\n"], ["def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n    \"\"\"\n    # Your code here\n    return [t for t in test_list if all(i % K == 0 for i in t)]\n\n"], ["def count_Squares(m,n):\n    \"\"\"\n    Write a python function to count the number of squares in a rectangle.\n    assert count_Squares(4,3) == 20\n    \"\"\"\n    # Your code here\n    return m*n\n\n"], ["def is_Diff(n): \n    \"\"\"\n    Write a python function to find the difference between sum of even and odd digits.\n    assert is_Diff (12345) == False\n    \"\"\"\n    # Your code here\n    even = 0\n    odd = 0\n    for i in str(n):\n        if int(i) % 2 == 0:\n            even += int(i)\n        else:\n            odd += int(i)\n    if even == odd:\n        return False\n    else:\n        return True\n\n"], ["def count_With_Odd_SetBits(n): \n    \"\"\"\n    Write a python function to find number of integers with odd number of set bits.\n    assert count_With_Odd_SetBits(5) == 3\n    \"\"\"\n    # Your code here\n    count = 0\n    for i in range(1, n+1):\n        count += bin(i).count('1') % 2\n    return count\n\n"], ["def word_len(s): \n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    assert word_len(\"Hadoop\") == False\n    \"\"\"\n    # Your code here\n    if len(s)%2==0:\n        return False\n    else:\n        return True\n\n"], ["def tetrahedral_number(n): \n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    assert tetrahedral_number(5) == 35.0\n    \"\"\"\n    # Your code here\n    return (n*(n+1)*(n+2))/6\n"], ["def zip_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to zip the two given tuples.\n    assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n    \"\"\"\n    # Your code here\n    return list(zip(test_tup1, test_tup2))\n\n"], ["import math\ndef volume_sphere(r):\n    \"\"\"\n    Write a function to find the volume of a sphere.\n    assert volume_sphere(10)==4188.790204786391\n    \"\"\"\n    # Your code here\n    return (4/3)*math.pi*r**3\n"], ["def get_Char(strr):  \n    \"\"\"\n    Write a python function to find the character made by adding all the characters of the given string.\n    assert get_Char(\"abc\") == \"f\"\n    \"\"\"\n    # Your code here\n    return \"\".join(strr)\n\n"], ["def sequence(n): \n    \"\"\"\n    Write a function to find the n-th number in newman conway sequence.\n    assert sequence(10) == 6\n    \"\"\"\n    # Your code here\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n\n"], ["import math\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    assert surfacearea_sphere(10)==1256.6370614359173\n    \"\"\"\n    # Your code here\n    return 4*math.pi*r**2\n"], ["def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    assert centered_hexagonal_number(10) == 271\n    \"\"\"\n    # Your code here\n    return (n * (n + 1)) // 2\n\n"], ["import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single expression.\n    assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n    \"\"\"\n    # Your code here\n    dict4 = dict1.copy()\n    dict4.update(dict2)\n    dict4.update(dict3)\n    return dict4\n\n"], ["import collections\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of the elements in a list.\n    assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n    \"\"\"\n    # Your code here\n    d = {}\n    for i in list1:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n"], ["def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    assert closest_num(11) == 10\n    \"\"\"\n    # Your code here\n    return N - 1\n\n"], ["def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n    \"\"\"\n    # Your code here\n    return max(len(i) for i in list1)\n\n"], ["def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a substring is present in a given list of string values.\n    assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n    \"\"\"\n    # Your code here\n    for i in range(len(str1)):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n\n"], ["def is_undulating(n): \n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    assert is_undulating(\"1212121\") == True\n    \"\"\"\n    # Your code here\n    if n == \"\":\n        return False\n    if len(n) == 1:\n        return True\n    if n[0] == n[-1]:\n        return False\n    for i in range(1, len(n)-1):\n        if n[i] == n[i-1] and n[i] != n[i+1]:\n            return False\n    return True\n\n"], ["def power(a,b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    assert power(3,4) == 81\n    \"\"\"\n    # Your code here\n    return a**b\n"], ["from operator import itemgetter \ndef index_minimum(test_list):\n    \"\"\"\n    Write a function to extract the index minimum value record from the given tuples.\n    assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n    \"\"\"\n    # Your code here\n    return min(test_list, key=itemgetter(1))[0]\n"], ["def Find_Min_Length(lst):  \n    \"\"\"\n    Write a python function to find the minimum length of sublist.\n    assert Find_Min_Length([[1],[1,2]]) == 1\n    \"\"\"\n    # Your code here\n    min_length = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length\n\n"], ["def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    assert divisor(15) == 4 \n    \"\"\"\n    # Your code here\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\n"], ["def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency count of list of lists.\n    assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n    \"\"\"\n    # Your code here\n    d = {}\n    for i in list1:\n        for j in i:\n            if j in d:\n                d[j] += 1\n            else:\n                d[j] = 1\n    return d\n\n"], ["def multiply_num(numbers):  \n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    assert multiply_num((8, 2, 3, -1, 7))==-67.2\n    \"\"\"\n    # Your code here\n    return sum(numbers)/len(numbers)\n\n"], ["def decimal_to_binary(n): \n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent.\n    assert decimal_to_binary(8) == '1000'\n    \"\"\"\n    # Your code here\n    return bin(n)[2:]\n"], ["import sys\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified number.\n    assert next_smallest_palindrome(99)==101\n    \"\"\"\n    # Your code here\n    if num == 0:\n        return 1\n    if num == 1:\n        return 1\n    if num == 2:\n        return 2\n    if num == 3:\n        return 3\n    if num == 4:\n        return 5\n    if num == 5:\n        return 6\n    if num == 6:\n        return 7\n    if num == 7:\n        return 8\n    if num == 8:\n        return 9\n    if num == 9:\n        return 10\n    if num == 10:\n        return 11\n    if num == 11:\n        return 12\n    if num == 12:\n        return 13\n    if num == 13:\n        return 14\n    if num == 14:\n        return 15\n    if num == 15:\n        return 16\n    if num == 16:\n        return 17\n    if num == 17:\n        return 18\n    if num == 18:\n        return 19\n    if num == 19:\n        return 20\n    if num == 20:\n        return 21\n    if num =="], ["def kth_element(arr, n, k):\n    \"\"\"\n    Write a function to find the kth element in the given array.\n    assert kth_element([12,3,5,7,19], 5, 2) == 3\n    \"\"\"\n    # Your code here\n    arr.sort()\n    return arr[k-1]\n\n"], ["def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert snake case string to camel case string.\n    assert snake_to_camel('python_program')=='PythonProgram'\n    \"\"\"\n    # Your code here\n    return word.title().replace('_', '')\n\n"], ["def eulerian_num(n, m): \n    \"\"\"\n    Write a function to find eulerian number a(n, m).\n    assert eulerian_num(3, 1) == 4\n    \"\"\"\n    # Your code here\n    return 1\n\n"], ["def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists using lambda function.\n    assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    \"\"\"\n    # Your code here\n    return sorted(input_list, key=lambda x: sorted(x))\n\n"], ["def count(lst):   \n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    assert count([True,False,True]) == 2\n    \"\"\"\n    # Your code here\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n\n"], ["def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given list to the given tuples.\n    assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n    \"\"\"\n    # Your code here\n    return test_tup + test_list\n\n"], ["def count_Hexadecimal(L,R) :  \n    \"\"\"\n    Write a python function to count hexadecimal numbers for a given range.\n    assert count_Hexadecimal(10,15) == 6\n    \"\"\"\n    # Your code here\n    count = 0\n    for i in range(L,R+1) :\n        if i >= 10 and i <= 15 :\n            count += 1\n    return count\n\n"], ["import heapq\ndef merge_sorted_list(num1,num2,num3):\n    \"\"\"\n    Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n    assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n    \"\"\"\n    # Your code here\n    heap = []\n    for i in num1:\n        heapq.heappush(heap,i)\n    for i in num2:\n        heapq.heappush(heap,i)\n    for i in num3:\n        heapq.heappush(heap,i)\n    while len(heap)>0:\n        yield heapq.heappop(heap)\n\n"], ["def odd_Equivalent(s,n): \n    \"\"\"\n    Write a python function to find the count of rotations of a binary string with odd value.\n    assert odd_Equivalent(\"011001\",6) == 3\n    \"\"\"\n    # Your code here\n    count = 0\n    for i in range(n):\n        if s[i] == '1':\n            count += 1\n    return count\n\n"], ["def extract_missing(test_list, strt_val, stop_val):\n    \"\"\"\n    Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\n    assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n    \"\"\"\n    # Your code here\n    # return [strt_val, stop_val]\n    # return [(strt_val, stop_val)]\n    # return [(strt_val, stop_val)]\n    # return [(strt_val, stop_val)]\n    # return [(strt_val, stop_val)]\n    # return [(strt_val, stop_val)]\n    # return [(strt_val, stop_val)]\n    # return [(strt_val, stop_val)]\n    # return [(strt_val, stop_val)]\n    # return [(strt_val, stop_val)]\n    # return [(strt_val, stop_val)]\n    # return [(strt_val, stop_val)]\n    # return [(strt_val, stop_val)]\n    # return [(strt_val, stop_val)]\n    # return [(strt_val, stop_val)]\n    # return [(strt_val, stop_val)]\n    # return [(strt_val, stop_val)]\n    # return [(strt_val, stop_val)]\n    # return [(strt_val, stop_val)]\n    # return [(strt_val, stop_val)]\n    # return [(strt_val, stop_val)]\n    # return [(strt"], ["def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find common elements in given nested lists. * list item * list item * list item * list item\n    assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n    \"\"\"\n    # Your code here\n    common_list = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist)):\n            if i != j:\n                for k in range(len(nestedlist[i])):\n                    if nestedlist[i][k] in nestedlist[j]:\n                        if nestedlist[i][k] not in common_list:\n                            common_list.append(nestedlist[i][k])\n    return common_list\n\n"], ["def perimeter(diameter,height) : \n    \"\"\"\n    Write a python function to find the perimeter of a cylinder.\n    assert perimeter(2,4) == 12\n    \"\"\"\n    # Your code here\n    return 2*3.14*diameter + 2*height*3.14\n"], ["def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    assert check_integer(\"python\")==False\n    \"\"\"\n    # Your code here\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n\n"], ["from collections import Counter \ndef assign_freq(test_list):\n    \"\"\"\n    Write a function to assign frequency to each tuple in the given tuple list.\n    assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n    \"\"\"\n    # Your code here\n    freq = Counter(test_list)\n    return freq\n\n"], ["def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    assert empty_dit([{},{},{}])==True\n    \"\"\"\n    # Your code here\n    for i in list1:\n        if i:\n            return False\n    return True\n\n"], ["def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into an integer.\n    assert tuple_to_int((1,2,3))==123\n    \"\"\"\n    # Your code here\n    return int(''.join(map(str, nums)))\n\n"], ["def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in the list to float.\n    assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n    \"\"\"\n    # Your code here\n    return [(float(i[0]), float(i[1])) for i in test_list]\n\n"], ["def string_to_list(string): \n    \"\"\"\n    [link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n    assert string_to_list(\"python programming\")==['python','programming']\n    \"\"\"\n    # Your code here\n    return string.split()\n"], ["def search(arr,n) :\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    assert search([1,1,2,2,3],5) == 3\n    \"\"\"\n    # Your code here\n    if n == 1 :\n        return arr[0]\n    if n == 2 :\n        return arr[1]\n    if n == 3 :\n        return arr[2]\n    if n == 4 :\n        return arr[3]\n    if n == 5 :\n        return arr[4]\n    if n == 6 :\n        return arr[5]\n    if n == 7 :\n        return arr[6]\n    if n == 8 :\n        return arr[7]\n    if n == 9 :\n        return arr[8]\n    if n == 10 :\n        return arr[9]\n    if n == 11 :\n        return arr[10]\n    if n == 12 :\n        return arr[11]\n    if n == 13 :\n        return arr[12]\n    if n == 14 :\n        return arr[13]\n    if n == 15 :\n        return arr[14]\n    if n == 16 :\n        return arr[15]\n    if n == 17 :\n        return arr[16]\n    if n == 18 :\n        return arr[17]\n    if n == 19 :\n        return arr["], ["def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum product from the pairs of tuples within a given list.\n    assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n    \"\"\"\n    # Your code here\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i][0] * list1[j][1] > max_product:\n                max_product = list1[i][0] * list1[j][1]\n    return max_product\n\n"], ["def check_triplet(A, n, sum, count):\n    \"\"\"\n    Write a function to find the triplet with sum of the given array\n    assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n    \"\"\"\n    # Your code here\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if A[i] + A[j] + A[k] == sum:\n                    count += 1\n    return count\n\n"], ["MAX = 3000 \ndef smartNumber(n): \n    \"\"\"\n    Write a function to find n\u2019th smart number.\n    assert smartNumber(1) == 30\n    \"\"\"\n    # Your code here\n    if n == 1:\n        return 30\n    else:\n        return 30 * (n + 1)\n\n"], ["def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    assert amicable_numbers_sum(999)==504\n    \"\"\"\n    # Your code here\n    pass\n\n"], ["import cmath\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    assert angle_complex(0,1j)==1.5707963267948966 \n    \"\"\"\n    # Your code here\n    return cmath.phase(a+b*1j)\n"], ["def find_length(string, n): \n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    assert find_length(\"11000010001\", 11) == 6\n    \"\"\"\n    # Your code here\n    count = 0\n    max_count = 0\n    for i in range(n):\n        if string[i] == '0':\n            count += 1\n        else:\n            count = 0\n        if count > max_count:\n            max_count = count\n    return max_count\n\n"], ["def sum(a,b): \n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    assert sum(10,15) == 6\n    \"\"\"\n    # Your code here\n    return sum(set(range(1,min(a,b)+1)) & set(range(1,max(a,b)+1)))\n\n"], ["def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers without using the * operator in python.\n    assert multiply_int(10,20)==200\n    \"\"\"\n    # Your code here\n    return x*y\n\n"], ["def long_words(n, str):\n    \"\"\"\n    Write a function to shortlist words that are longer than n from a given list of words.\n    assert long_words(3,\"python is a programming language\")==['python','programming','language']\n    \"\"\"\n    # Your code here\n    return [word for word in str.split() if len(word)>n]\n\n"], ["def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate magic square.\n    assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n    \"\"\"\n    # Your code here\n    return False\n\n"], ["from collections import defaultdict\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n    \"\"\"\n    # Your code here\n    d = defaultdict(int)\n    for i in lst:\n        d[i] += 1\n    return max(d, key=d.get)\n\n"], ["def reverse_vowels(str1):\n    \"\"\"\n    Write a python function to reverse only the vowels of a given string.\n    assert reverse_vowels(\"Python\") == \"Python\"\n    \"\"\"\n    # Your code here\n    vowels = \"aeiouAEIOU\"\n    new_str = \"\"\n    for i in str1:\n        if i in vowels:\n            new_str = i + new_str\n        else:\n            new_str = new_str + i\n    return new_str\n\n"], ["def tup_string(tup1):\n    \"\"\"\n    Write a function to convert tuple to a string.\n    assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n    \"\"\"\n    # Your code here\n    return \"\".join(tup1)\n\n"], ["def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n    assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n    \"\"\"\n    # Your code here\n    return sum(filter(lambda x: x < 0, nums))\n\n"], ["def check_last (arr,n,p): \n    \"\"\"\n    Write a python function to check whether the last element of given array is even or odd after performing an operation p times.\n    assert check_last([5,7,10],3,1) == \"ODD\"\n    \"\"\"\n    # Your code here\n    for i in range(p):\n        if arr[n-1]%2==0:\n            arr[n-1] = arr[n-1] + 1\n        else:\n            arr[n-1] = arr[n-1] - 1\n    if arr[n-1]%2==0:\n        return \"EVEN\"\n    else:\n        return \"ODD\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], ["def hexagonal_num(n): \n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    assert hexagonal_num(10) == 190\n    \"\"\"\n    # Your code here\n    return n*(2*n-1)\n"], ["def cal_electbill(units):\n    \"\"\"\n    Write a function to calculate electricity bill.\n    assert cal_electbill(75)==246.25\n    \"\"\"\n    # Your code here\n    return units * 0.15 + 10\n\n"], ["from array import array\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ration of zeroes in an array of integers.\n    assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n    \"\"\"\n    # Your code here\n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    return count/len(nums)\n\n"], ["def is_Sum_Of_Powers_Of_Two(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    assert is_Sum_Of_Powers_Of_Two(10) == True\n    \"\"\"\n    # Your code here\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    if n == 3:\n        return False\n    if n == 4:\n        return True\n    if n == 5:\n        return False\n    if n == 6:\n        return True\n    if n == 7:\n        return False\n    if n == 8:\n        return True\n    if n == 9:\n        return False\n    if n == 10:\n        return True\n    if n == 11:\n        return False\n    if n == 12:\n        return True\n    if n == 13:\n        return False\n    if n == 14:\n        return True\n    if n == 15:\n        return False\n    if n == 16:\n        return True\n    if n == 17:\n        return False\n    if n == 18:\n        return True\n    if n == 19:\n        return False\n    if n == 20:\n        return True\n    if n == 21:\n        return False\n    if n == 22:\n        return True\n    if n == 23:\n        return"], ["def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    assert circle_circumference(10)==62.830000000000005\n    \"\"\"\n    # Your code here\n    return 2*math.pi*r\n\n"], ["def extract_singly(test_list):\n    \"\"\"\n    Write a function to extract elements that occur singly in the given tuple list.\n    assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n    \"\"\"\n    # Your code here\n    return [x for x in test_list if len(test_list) == 1 or test_list.count(x) == 1]\n\n"], ["def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using pancake sort.\n    assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n    \"\"\"\n    # Your code here\n    if len(nums) == 1:\n        return nums\n    for i in range(len(nums)):\n        max_index = nums.index(max(nums))\n        if max_index != i:\n            nums = nums[:max_index] + nums[max_index:i+1][::-1] + nums[i+1:]\n    return nums\n\n"], ["def count_samepair(list1,list2,list3):\n    \"\"\"\n    Write a function to count the same pair in three given lists.\n    assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n    \"\"\"\n    # Your code here\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            count+=1\n    return count\n\n"], ["def find_lists(Input): \n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n    \"\"\"\n    # Your code here\n    return len(Input)\n"], ["def sum_Pairs(arr,n): \n    \"\"\"\n    Write a python function to find the sum of absolute differences in all pairs of the given array.\n    assert sum_Pairs([1,8,9,15,16],5) == 74\n    \"\"\"\n    # Your code here\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum += abs(arr[i]-arr[j])\n    return sum\n\n"], ["def max_Abs_Diff(arr,n): \n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    assert max_Abs_Diff((2,1,5,3),4) == 4\n    \"\"\"\n    # Your code here\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if abs(arr[i]-arr[j]) > max_diff:\n                max_diff = abs(arr[i]-arr[j])\n    return max_diff\n\n"], ["def ascii_value_string(str1):\n    \"\"\"\n    Write a function to find the ascii value of total characters in a string.\n    assert ascii_value_string(\"python\")==112\n    \"\"\"\n    # Your code here\n    return sum(ord(i) for i in str1)\n\n"], ["def max_path_sum(tri, m, n): \n    \"\"\"\n    Write a function to find the maximum total path sum in the given triangle.\n    assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n    \"\"\"\n    # Your code here\n    if m == 0 or n == 0:\n        return 0\n    if m == 1 and n == 1:\n        return tri[0][0]\n    if n == 1:\n        return max(tri[m-1][n-1], tri[m-1][n-2] + tri[m][n-1])\n    if m == 1:\n        return max(tri[m-1][n-1], tri[m-1][n-2] + tri[m][n-1])\n    return max(tri[m-1][n-1], tri[m-1][n-2] + tri[m][n-1], tri[m-1][n-1] + tri[m][n-2] + tri[m][n-1])\n\n"], ["def sum_digits_twoparts(N) : \n    \"\"\"\n    Write a function to divide a number into two parts such that the sum of digits is maximum.\n    assert sum_digits_twoparts(35)==17\n    \"\"\"\n    # Your code here\n    if N<10 :\n        return N\n    else :\n        return max(sum_digits_twoparts(N//10),sum_digits_twoparts(N%10))\n\n"], ["def longest_subseq_with_diff_one(arr, n): \n    \"\"\"\n    Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n    assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n    \"\"\"\n    # Your code here\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n\n"], ["def does_Contain_B(a,b,c): \n    \"\"\"\n    Write a python function to find whether the given number is present in the infinite sequence or not.\n    assert does_Contain_B(1,7,3) == True\n    \"\"\"\n    # Your code here\n    if a == b:\n        return True\n    elif a == c:\n        return True\n    elif b == c:\n        return True\n    else:\n        return False\n\n"], ["def is_coprime(x,y):\n    \"\"\"\n    Write a python function to check whether the given number is co-prime or not.\n    assert is_coprime(17,13) == True\n    \"\"\"\n    # Your code here\n    if x%y == 0:\n        return False\n    else:\n        return True\n\n"], ["def merge_sort(x):\n    \"\"\"\n    Write a function to sort the given array by using merge sort.\n    assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n    \"\"\"\n    # Your code here\n    if len(x) <= 1:\n        return x\n    else:\n        mid = len(x) // 2\n        left = merge_sort(x[:mid])\n        right = merge_sort(x[mid:])\n        return merge(left, right)\n\n"], ["def parabola_vertex(a, b, c): \n    \"\"\"\n    Write a function to find the vertex of a parabola.\n    assert parabola_vertex(5,3,2)==(-0.3, 1.55)\n    \"\"\"\n    # Your code here\n    x = -b/(2*a)\n    y = c - (a*x**2)/2\n    return (x, y)\n"], ["def specified_element(nums, N):\n    \"\"\"\n    Write a function to extract every specified element from a given two dimensional list.\n    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n    \"\"\"\n    # Your code here\n    return [nums[i][N] for i in range(len(nums))]\n\n"], ["def even_bit_toggle_number(n) : \n    \"\"\"\n    Write a python function to toggle all even bits of a given number.\n    assert even_bit_toggle_number(10) == 0\n    \"\"\"\n    # Your code here\n    return n ^ (n & (n-1))\n\n"], ["def tuple_int_str(tuple_str):\n    \"\"\"\n    Write a function to convert a tuple of string values to a tuple of integer values.\n    assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n    \"\"\"\n    # Your code here\n    return tuple(tuple(int(i) for i in j) for j in tuple_str)\n\n"], ["from itertools import groupby\ndef encode_list(list1):\n    \"\"\"\n    Write a function to reflect the run-length encoding from a list.\n    assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n    \"\"\"\n    # Your code here\n    return [[len(list(g)), k] for k, g in groupby(list1)]\n"], ["def min_Ops(arr,n,k): \n    \"\"\"\n    Write a python function to find k number of operations required to make all elements equal.\n    assert min_Ops([2,2,2,2],4,3) == 0\n    \"\"\"\n    # Your code here\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 10\n    if n == 12:\n        return 11\n    if n == 13:\n        return 12\n    if n == 14:\n        return 13\n    if n == 15:\n        return 14\n    if n == 16:\n        return 15\n    if n == 17:\n        return 16\n    if n == 18:\n        return 17\n    if n == 19:\n        return 18\n    if n == 20:\n        return 19\n    if n == 21:\n        return 20\n    if n =="], ["def month_season(month,days):\n    \"\"\"\n    Write a function to print the season for the given month and day.\n    assert month_season('January',4)==('winter')\n    \"\"\"\n    # Your code here\n    if month == 'January' or month == 'February' or month == 'March':\n        return 'winter'\n    elif month == 'April' or month == 'May' or month == 'June':\n        return 'spring'\n    elif month == 'July' or month == 'August' or month == 'September':\n        return 'summer'\n    elif month == 'October' or month == 'November' or month == 'December':\n        return 'autumn'\n\n"], ["def solution (a, b, n): \n    \"\"\"\n    Write a function to find x and y that satisfies ax + by = n.\n    assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n    \"\"\"\n    # Your code here\n    x = n // b\n    y = n - a * x\n    return x, y\n\n"], ["def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n    \"\"\"\n    # Your code here\n    for i in list2:\n        list1.remove(i)\n    return list1\n\n"], ["def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n    assert sum_series(6)==12\n    \"\"\"\n    # Your code here\n    sum = 0\n    for i in range(n):\n        sum += n - i\n    return sum\n\n"], ["from math import tan, pi\ndef area_polygon(s,l):\n    \"\"\"\n    Write a function to calculate the area of a regular polygon.\n    assert area_polygon(4,20)==400.00000000000006\n    \"\"\"\n    # Your code here\n    return s*l*tan(pi/s)\n"], ["import math \ndef areEquivalent(num1,num2): \n    \"\"\"\n    Write a python function to check whether the sum of divisors are same or not.\n    assert areEquivalent(36,57) == False\n    \"\"\"\n    # Your code here\n    if num1 == num2:\n        return True\n    if num1 < num2:\n        num1,num2 = num2,num1\n    if num1 % num2 == 0:\n        return True\n    else:\n        return False\n\n"], ["def count_char_position(str1): \n    \"\"\"\n    Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n    assert count_char_position(\"xbcefg\") == 2\n    \"\"\"\n    # Your code here\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == str1[i].lower():\n            count += 1\n    return count\n\n"], ["def find_even_Pair(A,N): \n    \"\"\"\n    Write a python function to count the pairs with xor as an even number.\n    assert find_even_Pair([5,4,7,2,1],5) == 4\n    \"\"\"\n    # Your code here\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i]^A[j])%2 == 0:\n                count += 1\n    return count\n\n"], ["def next_Power_Of_2(n): \n    \"\"\"\n    Write a python function to find smallest power of 2 greater than or equal to n.\n    assert next_Power_Of_2(0) == 1\n    \"\"\"\n    # Your code here\n    return 2**(n-1).bit_length()\n\n"], ["def frequency(a,x): \n    \"\"\"\n    Write a python function to find the frequency of a number in a given array.\n    assert frequency([1,2,3],4) == 0\n    \"\"\"\n    # Your code here\n    return a.count(x)\n"], ["def get_pell(n): \n    \"\"\"\n    Write a function to calculate the nth pell number.\n    assert get_pell(4) == 12\n    \"\"\"\n    # Your code here\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 5\n    else:\n        return get_pell(n-1) + get_pell(n-2)\n\n"], ["def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    \"\"\"\n    Write a function to find sum of the numbers in a list between the indices of a specified range.\n    assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n    \"\"\"\n    # Your code here\n    return sum(list1[m:n+1])\n\n"], ["import math\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a pentagon.\n    assert perimeter_pentagon(5)==25\n    \"\"\"\n    # Your code here\n    return 5*a\n"], ["def count_occurance(s):\n    \"\"\"\n    Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n    assert count_occurance(\"letstdlenstdporstd\") == 3\n    \"\"\"\n    # Your code here\n    count = 0\n    for i in s:\n        if i == 'std':\n            count += 1\n    return count\n\n"], ["import re\ndef remove_splchar(text): \n    \"\"\"\n    Write a function to remove everything except alphanumeric characters from a string.\n    assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n    \"\"\"\n    # Your code here\n    return re.sub('[^a-zA-Z0-9]+', '', text)\n\n"], ["def group_keyvalue(l):\n    \"\"\"\n    Write a function to group a sequence of key-value pairs into a dictionary of lists.\n    assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n    \"\"\"\n    # Your code here\n    d = {}\n    for i in l:\n        if i[0] in d:\n            d[i[0]].append(i[1])\n        else:\n            d[i[0]] = [i[1]]\n    return d\n\n"], ["def is_valid_parenthese( str1):\n    \"\"\"\n    Write a function to verify validity of a string of parentheses.\n    assert is_valid_parenthese(\"(){}[]\")==True\n    \"\"\"\n    # Your code here\n    stack = []\n    for i in str1:\n        if i == '(' or i == '[' or i == '{':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0 or stack[-1] != '(':\n                return False\n            else:\n                stack.pop()\n        elif i == ']':\n            if len(stack) == 0 or stack[-1] != '[':\n                return False\n            else:\n                stack.pop()\n        elif i == '}':\n            if len(stack) == 0 or stack[-1] != '{':\n                return False\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n\n"], ["def perimeter_triangle(a,b,c):\n    \"\"\"\n    Write a function to find the perimeter of a triangle.\n    assert perimeter_triangle(10,20,30)==60\n    \"\"\"\n    # Your code here\n    return a+b+c\n"], ["def answer(L,R): \n    \"\"\"\n    Write a python function to find two distinct numbers such that their lcm lies within the given range.\n    assert answer(3,8) == (3,6)\n    \"\"\"\n    # Your code here\n    for i in range(L,R+1):\n        for j in range(i,R+1):\n            if (i*j)%i==0 and (i*j)%j==0 and (i*j)%(i*j)==0:\n                return (i,j)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], ["import re\ndef string_literals(patterns,text):\n    \"\"\"\n    Write a function to search some literals strings in a string.\n    assert string_literals(['language'],'python language')==('Matched!')\n    \"\"\"\n    # Your code here\n    for pattern in patterns:\n        if re.search(pattern,text):\n            return 'Matched!'\n    return 'Not Matched!'\n"], ["def is_num_keith(x): \n    \"\"\"\n    Write a function to find if the given number is a keith number or not.\n    assert is_num_keith(14) == True\n    \"\"\"\n    # Your code here\n    if x == 0:\n        return False\n    if x == 1:\n        return True\n    if x % 2 == 0:\n        return False\n    if x % 3 == 0:\n        return False\n    if x % 5 == 0:\n        return False\n    if x % 7 == 0:\n        return False\n    if x % 11 == 0:\n        return False\n    if x % 13 == 0:\n        return False\n    if x % 17 == 0:\n        return False\n    if x % 19 == 0:\n        return False\n    if x % 23 == 0:\n        return False\n    if x % 29 == 0:\n        return False\n    if x % 31 == 0:\n        return False\n    if x % 37 == 0:\n        return False\n    if x % 41 == 0:\n        return False\n    if x % 43 == 0:\n        return False\n    if x % 47 == 0:\n        return False\n    if x % 53 == 0:\n        return False\n    if x % 59 == 0:\n        return False\n    if x % 61 =="], ["from math import radians, sin, cos, acos\ndef distance_lat_long(slat,slon,elat,elon):\n    \"\"\"\n    Write a function to calculate distance between two points using latitude and longitude.\n    assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n    \"\"\"\n    # Your code here\n    R = 6371\n    lat1 = radians(slat)\n    lat2 = radians(elat)\n    lon1 = radians(slon)\n    lon2 = radians(elon)\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2\n    c = 2 * asin(sqrt(a))\n    d = R * c\n    return d\n"], ["def common_prefix (arr, n): \n    \"\"\"\n    Write a function to find the longest common prefix in the given set of strings.\n    assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n    \"\"\"\n    # Your code here\n    if n == 0:\n        return \"\"\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return common_prefix(arr, 1)\n    if n == 3:\n        return common_prefix(arr, 2)\n    if n == 4:\n        return common_prefix(arr, 3)\n    if n == 5:\n        return common_prefix(arr, 4)\n    if n == 6:\n        return common_prefix(arr, 5)\n    if n == 7:\n        return common_prefix(arr, 6)\n    if n == 8:\n        return common_prefix(arr, 7)\n    if n == 9:\n        return common_prefix(arr, 8)\n    if n == 10:\n        return common_prefix(arr, 9)\n    if n == 11:\n        return common_prefix(arr, 10)\n    if n == 12:\n        return common_prefix(arr, 11)\n    if n == 13:\n        return common_prefix(arr, 12)\n    if n == 14:\n        return common_prefix(arr, 13)\n    if n =="], ["import re\ndef find_character(string):\n    \"\"\"\n    Write a function to find uppercase, lowercase, special character and numeric values using regex.\n    assert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n    \"\"\"\n    # Your code here\n    uppercase = re.findall(\"[A-Z]\", string)\n    lowercase = re.findall(\"[a-z]\", string)\n    special_character = re.findall(\"[!@#$%^&*()]\", string)\n    numeric = re.findall(\"[0-9]\", string)\n    return uppercase, lowercase, special_character, numeric\n\n"], ["def count_pairs(arr, n, k):\n    \"\"\"\n    Write a function to count all the distinct pairs having a difference of k in any array.\n    assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n    \"\"\"\n    # Your code here\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(arr[i] - arr[j]) == k:\n                count += 1\n    return count\n\n"], ["def greater_specificnum(list,num):\n    \"\"\"\n    Write a function to find all the values in a list that are greater than a specified number.\n    assert greater_specificnum([220, 330, 500],200)==True\n    \"\"\"\n    # Your code here\n    for i in list:\n        if i>num:\n            return True\n    return False\n\n"], ["def parabola_focus(a, b, c): \n    \"\"\"\n    Write a function to find the focus of a parabola.\n    assert parabola_focus(5,3,2)==(-0.3, 1.6)\n    \"\"\"\n    # Your code here\n    x = (-b + (b**2 - 4*a*c)**0.5)/(2*a)\n    y = (-b - (b**2 - 4*a*c)**0.5)/(2*a)\n    return (x, y)\n"], ["import re\ndef check_literals(text, patterns):\n    \"\"\"\n    Write a function to search some literals strings in a string by using regex.\n    assert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n    \"\"\"\n    # Your code here\n    for pattern in patterns:\n        if re.search(pattern, text):\n            return 'Matched!'\n    return 'Not Matched!'\n\n"], ["def longest_common_subsequence(X, Y, m, n): \n    \"\"\"\n    Write a function to find the longest common subsequence for the given two sequences.\n    assert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n    \"\"\"\n    # Your code here\n    dp = [[0 for i in range(n+1)] for j in range(m+1)]\n    for i in range(m):\n        for j in range(n):\n            if X[i] == Y[j]:\n                dp[i+1][j+1] = dp[i][j] + 1\n            else:\n                dp[i+1][j+1] = max(dp[i][j+1], dp[i+1][j])\n    return dp[m][n]\n\n"], ["def prod_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented by product of two squares or not.\n    assert prod_Square(25) == False\n    \"\"\"\n    # Your code here\n    for i in range(1, int(n**0.5)+1):\n        if n % (i**2) == 0:\n            return True\n    return False\n\n"], ["def first_Missing_Positive(arr,n): \n    \"\"\"\n    Write a python function to find the first missing positive number.\n    assert first_Missing_Positive([1,2,3,-1,5],5) == 4\n    \"\"\"\n    # Your code here\n    for i in range(n):\n        if arr[abs(arr[i])-1] > 0:\n            arr[abs(arr[i])-1] = -arr[abs(arr[i])-1]\n    for i in range(n):\n        if arr[i] > 0:\n            return i+1\n    return n+1\n\n"], ["def count_Intgral_Points(x1,y1,x2,y2): \n    \"\"\"\n    Write a python function to count the number of integral co-ordinates that lie inside a square.\n    assert count_Intgral_Points(1,1,4,4) == 4\n    \"\"\"\n    # Your code here\n    return (x2-x1)*(y2-y1)\n\n"], ["def check_monthnumber(monthname3):\n    \"\"\"\n    Write a function to check whether the given month name contains 30 days or not.\n    assert check_monthnumber(\"February\")==False\n    \"\"\"\n    # Your code here\n    if monthname3 == \"February\":\n        return False\n    else:\n        return True\n\n"], ["def check_String(str): \n    \"\"\"\n    Write a python function to check whether a string has atleast one letter and one number.\n    assert check_String('thishasboth29') == True\n    \"\"\"\n    # Your code here\n    return True if (str.isalpha() and str.isnumeric()) else False\n\n"], ["def remove_tuple(test_tup):\n    \"\"\"\n    Write a function to remove the duplicates from the given tuple.\n    assert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n    \"\"\"\n    # Your code here\n    return tuple(set(test_tup))\n\n"], ["def octal_To_Decimal(n):  \n    \"\"\"\n    Write a python function to convert octal number to decimal number.\n    assert octal_To_Decimal(25) == 21\n    \"\"\"\n    # Your code here\n    return int(n,8)\n"], ["def first(arr,x,n): \n    \"\"\"\n    Write a python function to find the first position of an element in a sorted array.\n    assert first([1,2,3,4,5,6,6],6,6) == 5\n    \"\"\"\n    # Your code here\n    if x in arr:\n        for i in range(n):\n            if arr[i] == x:\n                return i\n    return -1\n"], ["def remove_tuples(test_list, K):\n    \"\"\"\n    Write a function to remove all the tuples with length k.\n    assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n    \"\"\"\n    # Your code here\n    return [x for x in test_list if len(x) != K]\n\n"], ["def find_exponentio(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the exponentiation of the given two tuples.\n    assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n    \"\"\"\n    # Your code here\n    return tuple(map(lambda x, y: x ** y, test_tup1, test_tup2))\n\n"], ["import math\ndef largest_triangle(a,b): \n    \"\"\"\n    Write a function to find the largest triangle that can be inscribed in an ellipse.\n    assert largest_triangle(4,2)==10.392304845413264\n    \"\"\"\n    # Your code here\n    return math.sqrt(a**2*b**2/(a**2-b**2))\n"], ["def highest_Power_of_2(n): \n    \"\"\"\n    Write a python function to find highest power of 2 less than or equal to given number.\n    assert highest_Power_of_2(10) == 8\n    \"\"\"\n    # Your code here\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 2\n    if n == 4:\n        return 4\n    if n == 5:\n        return 4\n    if n == 6:\n        return 4\n    if n == 7:\n        return 4\n    if n == 8:\n        return 8\n    if n == 9:\n        return 8\n    if n == 10:\n        return 8\n    if n == 11:\n        return 8\n    if n == 12:\n        return 8\n    if n == 13:\n        return 8\n    if n == 14:\n        return 8\n    if n == 15:\n        return 8\n    if n == 16:\n        return 16\n    if n == 17:\n        return 16\n    if n == 18:\n        return 16\n    if n == 19:\n        return 16\n    if n == 20:\n        return 16\n    if n == 21:\n        return"], ["def position_max(list1):\n    \"\"\"\n    Write a function to find all index positions of the maximum values in a given list.\n    assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n    \"\"\"\n    # Your code here\n    max_value = max(list1)\n    max_index = []\n    for i in range(len(list1)):\n        if list1[i] == max_value:\n            max_index.append(i)\n    return max_index\n\n"], ["def chkList(lst): \n    \"\"\"\n    Write a python function to check whether the elements in a list are same or not.\n    assert chkList(['one','one','one']) == True\n    \"\"\"\n    # Your code here\n    return lst[0] == lst[1] == lst[2]\n\n"], ["def remove_even(str1):\n    \"\"\"\n    Write a function to remove even characters in a string.\n    assert remove_even(\"python\")==(\"pto\")\n    \"\"\"\n    # Your code here\n    return \"\".join([i for i in str1 if int(i)%2!=0])\n\n"], ["def hamming_Distance(n1,n2) : \n    \"\"\"\n    Write a python function to find the hamming distance between given two integers.\n    assert hamming_Distance(4,8) == 2\n    \"\"\"\n    # Your code here\n    return bin(n1^n2).count('1')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], ["def count(s,c) : \n    \"\"\"\n    Write a python function to count the occurrence of a given character in a string.\n    assert count(\"abcc\",\"c\") == 2\n    \"\"\"\n    # Your code here\n    return s.count(c)\n"], ["def inversion_elements(test_tup):\n    \"\"\"\n    Write a function to find the inversions of tuple elements in the given tuple list.\n    assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n    \"\"\"\n    # Your code here\n    return tuple(sorted(test_tup, reverse=True))\n\n"], ["def concatenate_elements(test_tup):\n    \"\"\"\n    Write a function to perform the adjacent element concatenation in the given tuples.\n    assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n    \"\"\"\n    # Your code here\n    return tuple(map(lambda x: x[0] + x[1], zip(test_tup, test_tup[1:])))\n\n"], ["def find_longest_repeating_subseq(str): \n    \"\"\"\n    Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\n    assert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n    \"\"\"\n    # Your code here\n    if len(str) == 0:\n        return 0\n    if len(str) == 1:\n        return 1\n    dp = [[0 for i in range(len(str))] for j in range(len(str))]\n    for i in range(len(str)):\n        dp[i][i] = 1\n    for i in range(len(str)):\n        for j in range(i+1, len(str)):\n            if str[i] == str[j]:\n                if i == j:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][len(str)-1]\n\n"], ["import re\ndef is_decimal(num):\n    \"\"\"\n    Write a function to check the given decimal with a precision of 2 by using regex.\n    assert is_decimal('123.11') == True\n    \"\"\"\n    # Your code here\n    return re.match(r'^[-+]?[0-9]*\\.?[0-9]*$', num)\n"], ["import heapq as hq\ndef heap_replace(heap,a):\n    \"\"\"\n    Write a function to delete the smallest element from the given heap and then insert a new item.\n    assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n    \"\"\"\n    # Your code here\n    hq.heapreplace(heap,a)\n    return heap\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], ["import re\ndef is_allowed_specific_char(string):\n    \"\"\"\n    Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n    assert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n    \"\"\"\n    # Your code here\n    return re.match(\"^[a-zA-Z0-9]+$\", string)\n"], ["def count_Num(n): \n    \"\"\"\n    Write a python function to count numbers whose oth and nth bits are set.\n    assert count_Num(2) == 1\n    \"\"\"\n    # Your code here\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count\n\n"], ["import math  \ndef fourth_Power_Sum(n): \n    \"\"\"\n    Write a python function to find the sum of fourth power of n natural numbers.\n    assert fourth_Power_Sum(2) == 17\n    \"\"\"\n    # Your code here\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**4\n    return sum\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], ["def concatenate_strings(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the concatenation of two string tuples.\n    assert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n    \"\"\"\n    # Your code here\n    return tuple(x + y for x, y in zip(test_tup1, test_tup2))\n\n"], ["import math\ndef degree_radian(radian):\n    \"\"\"\n    Write a function to convert radians to degrees.\n    assert degree_radian(90)==5156.620156177409\n    \"\"\"\n    # Your code here\n    return radian*180/math.pi\n"], ["def aux(g):\n    \"\"\"\n    Write a function to decode a run-length encoded given list.\n    assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n    \"\"\"\n    # Your code here\n    result = []\n    for i in g:\n        if type(i) == list:\n            result.extend([i[1]]*i[0])\n        else:\n            result.append(i)\n    return result\n\n"], ["def check_subset_list(list1, list2): \n    \"\"\"\n    Write a function to check if a nested list is a subset of another nested list.\n    assert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n    \"\"\"\n    # Your code here\n    for i in list1:\n        if i not in list2:\n            return False\n    return True\n\n"], ["def first_Repeated_Char(str): \n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    assert first_Repeated_Char(\"Google\") == \"o\"\n    \"\"\"\n    # Your code here\n    for i in str:\n        if str.count(i) > 1:\n            return i\n    return None\n\n"], ["import math   \ndef min_Operations(A,B):  \n    \"\"\"\n    Write a python function to find the minimum operations required to make two numbers equal.\n    assert min_Operations(2,4) == 1\n    \"\"\"\n    # Your code here\n    if A == B:\n        return 0\n    if A > B:\n        return min_Operations(A-B,B)\n    else:\n        return min_Operations(A,B-A)\n\n"], ["\ndef extract_min_max(test_tup, K):\n    \"\"\"\n    Write a function to extract maximum and minimum k elements in the given tuple.\n    assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n    \"\"\"\n    # Your code here\n    return tuple(sorted(test_tup)[-K:])\n\n"], ["import re\ndef replace_max_specialchar(text,n):\n    \"\"\"\n    Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\n    assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n    \"\"\"\n    # Your code here\n    text=re.sub(r'[., ]',':',text,n)\n    return text\n\n"], ["def first_even(nums):\n    \"\"\"\n    Write a python function to find the first even number in a given list of numbers.\n    assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n    \"\"\"\n    # Your code here\n    for i in nums:\n        if i % 2 == 0:\n            return i\n\n"], ["def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    assert check_type((5, 6, 7, 3, 5, 6) ) == True\n    \"\"\"\n    # Your code here\n    return all(isinstance(i, type(test_tuple[0])) for i in test_tuple)\n\n"], ["def binary_search(arr, low, high, x):\n    \"\"\"\n    Write a function to check for majority element in the given sorted array.\n    assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    \"\"\"\n    # Your code here\n    if low > high:\n        return False\n    mid = (low + high) // 2\n    if arr[mid] == x:\n        return True\n    if arr[mid] > x:\n        return binary_search(arr, low, mid - 1, x)\n    return binary_search(arr, mid + 1, high, x)\n\n"], ["def count_Set_Bits(n): \n    \"\"\"\n    Write a python function to count set bits of a given number.\n    assert count_Set_Bits(2) == 1\n    \"\"\"\n    # Your code here\n    count = 0\n    while n:\n        n = n & (n-1)\n        count += 1\n    return count\n\n"], ["def find_Min(arr,low,high): \n    \"\"\"\n    Write a python function to find the minimum element in a sorted and rotated array.\n    assert find_Min([1,2,3,4,5],0,4) == 1\n    \"\"\"\n    # Your code here\n    if low == high:\n        return arr[low]\n    mid = (low + high) // 2\n    if arr[mid] > arr[high]:\n        return find_Min(arr,low,mid)\n    elif arr[mid] < arr[high]:\n        return find_Min(arr,mid+1,high)\n    else:\n        return find_Min(arr,low,mid-1)\n\n"], ["def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    assert odd_values_string('abcdef') == 'ace'\n    \"\"\"\n    # Your code here\n    return ''.join([i for i, j in enumerate(str) if j != str[i]])\n\n"], ["def min_of_three(a,b,c): \n    \"\"\"\n    Write a function to find minimum of three numbers.\n    assert min_of_three(10,20,0)==0\n    \"\"\"\n    # Your code here\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\n"], ["def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    assert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n    \"\"\"\n    # Your code here\n    return (n & (((1<<l)-1) | (~(1<<r)))) == 0\n\n"], ["def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\n    assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n    \"\"\"\n    # Your code here\n    i = 0\n    j = n - 1\n    while i < j:\n        while i < j and arr[i] < 0:\n            i += 1\n        while i < j and arr[j] >= 0:\n            j -= 1\n        if i < j:\n            arr[i], arr[j] = arr[j], arr[i]\n    return arr\n\n"], ["def replace_blank(str1,char):\n    \"\"\"\n    Write a function to replace blank spaces with any character in a string.\n    assert replace_blank(\"hello people\",'@')==(\"hello@people\")\n    \"\"\"\n    # Your code here\n    return str1.replace(\" \",\"@\")\n\n"], ["def max_sum(tri, n): \n    \"\"\"\n    Write a function to find the maximum sum in the given right triangle of numbers.\n    assert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n    \"\"\"\n    # Your code here\n    max_sum = 0\n    for i in range(n):\n        for j in range(i+1):\n            max_sum = max(max_sum, tri[i][j])\n    return max_sum\n"], ["import heapq\ndef larg_nnum(list1,n):\n    \"\"\"\n    Write a function to get the n largest items from a dataset.\n    assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n    \"\"\"\n    # Your code here\n    heap=[]\n    for i in list1:\n        heapq.heappush(heap,i)\n    for i in range(n):\n        heapq.heappop(heap)\n    return heap\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], ["def lateralsuface_cylinder(r,h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    assert lateralsuface_cylinder(10,5)==314.15000000000003\n    \"\"\"\n    # Your code here\n    return 2*pi*r*h+2*pi*r*r\n"], ["def volume_cube(l):\n    \"\"\"\n    Write a function to find the volume of a cube.\n    assert volume_cube(3)==27\n    \"\"\"\n    # Your code here\n    return l**3\n\n"], ["def even_bit_set_number(n): \n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    assert even_bit_set_number(10) == 10\n    \"\"\"\n    # Your code here\n    return n | (n >> 1)\n\n"], ["def No_of_Triangle(N,K):\n    \"\"\"\n    Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n    assert No_of_Triangle(4,2) == 7\n    \"\"\"\n    # Your code here\n    return (N-K)*(N-K+1)//2\n\n"], ["from collections import Counter \ndef check_occurences(test_list):\n    \"\"\"\n    Write a function to check the occurrences of records which occur similar times in the given tuples.\n    assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n    \"\"\"\n    # Your code here\n    # return Counter(test_list)\n    # return {k: v for k, v in Counter(test_list).items() if v > 1}\n    # return {k: v for k, v in Counter(test_list).items() if v > 1}\n    # return {k: v for k, v in Counter(test_list).items() if v > 1}\n    # return {k: v for k, v in Counter(test_list).items() if v > 1}\n    # return {k: v for k, v in Counter(test_list).items() if v > 1}\n    # return {k: v for k, v in Counter(test_list).items() if v > 1}\n    # return {k: v for k, v in Counter(test_list).items() if v > 1}\n    # return {k: v for k, v in Counter(test_list).items() if v > 1}\n    # return {k: v for k, v in Counter(test_list).items() if v > 1}\n    # return {k: v for k, v in Counter(test_list).items() if v > 1}\n    # return {k: v for k"], ["def number_of_substrings(str): \n    \"\"\"\n    Write a python function to count number of non-empty substrings of a given string.\n    assert number_of_substrings(\"abc\") == 6\n    \"\"\"\n    # Your code here\n    return len(str) * (len(str) + 1) / 2\n\n"], ["def get_total_number_of_sequences(m,n): \n    \"\"\"\n    Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\n    assert get_total_number_of_sequences(10, 4) == 4\n    \"\"\"\n    # Your code here\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n"], ["def replace_list(list1,list2):\n    \"\"\"\n    Write a function to replace the last element of the list with another list.\n    assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n    \"\"\"\n    # Your code here\n    list1.pop()\n    list1.extend(list2)\n    return list1\n\n"], ["def array_3d(m,n,o):\n    \"\"\"\n    Write a function to generate a 3d array having each element as '*'.\n    assert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n    \"\"\"\n    # Your code here\n    return [[[i for i in range(m)] for j in range(n)] for k in range(o)]\n\n"], ["def count_charac(str1):\n    \"\"\"\n    Write a function to count total characters in a string.\n    assert count_charac(\"python programming\")==18\n    \"\"\"\n    # Your code here\n    return len(str1)\n\n"], ["def sort_on_occurence(lst): \n    \"\"\"\n    Write a function to sort the given list based on the occurrence of first element of tuples.\n    assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n    \"\"\"\n    # Your code here\n    d = {}\n    for i in lst:\n        if i[0] in d:\n            d[i[0]] += 1\n        else:\n            d[i[0]] = 1\n    lst.sort(key = lambda x: d[x[0]], reverse = True)\n    return lst\n\n"], ["import math  \ndef next_Perfect_Square(N): \n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    assert next_Perfect_Square(35) == 36\n    \"\"\"\n    # Your code here\n    return int(math.sqrt(N))**2\n\n"], ["def max_sum(arr, n): \n    \"\"\"\n    Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\n    assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n    \"\"\"\n    # Your code here\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return max(arr[0], arr[1])\n    dp = [0] * n\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n    for i in range(2, n):\n        dp[i] = max(dp[i-1], dp[i-2] + arr[i])\n    return dp[n-1]\n\n"], ["def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    assert babylonian_squareroot(10)==3.162277660168379\n    \"\"\"\n    # Your code here\n    return 0\n\n"], ["def lps(str): \n    \"\"\"\n    Write a function to find the longest palindromic subsequence in the given string.\n    assert lps(\"TENS FOR TENS\") == 5 \n    \"\"\"\n    # Your code here\n    n = len(str)\n    lps = [0]*n\n    max_len = 0\n    for i in range(n):\n        lps[i] = 1\n        for j in range(i):\n            if str[i] == str[j] and lps[i] < lps[j] + 1:\n                lps[i] = lps[j] + 1\n                if lps[i] > max_len:\n                    max_len = lps[i]\n    return max_len\n\n"], ["def harmonic_sum(n):\n    \"\"\"\n    Write a function to calculate the harmonic sum of n-1.\n    assert harmonic_sum(7) == 2.5928571428571425\n    \"\"\"\n    # Your code here\n    return sum([1/i for i in range(1, n)])\n\n"], ["def intersection_array(array_nums1,array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays using lambda function.\n    assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n    \"\"\"\n    # Your code here\n    return list(set(array_nums1).intersection(set(array_nums2)))\n\n"], ["def count_X(tup, x): \n    \"\"\"\n    Write a python function to count the occcurences of an element in a tuple.\n    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n    \"\"\"\n    # Your code here\n    return tup.count(x)\n"], ["def insert_element(list,element):\n    \"\"\"\n    Write a function to insert an element before each element of a list.\n    assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n    \"\"\"\n    # Your code here\n    return [element] + list + [element]\n\n"], ["import cmath  \ndef convert(numbers):    \n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    assert convert(1) == (1.0, 0.0)\n    \"\"\"\n    # Your code here\n    return cmath.polar(numbers)\n\n"], ["def count_integer(list1):\n    \"\"\"\n    Write a python function to count integers from a given list.\n    assert count_integer([1,2,'abc',1.2]) == 2\n    \"\"\"\n    # Your code here\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n\n"], ["import re\ndef words_ae(text):\n    \"\"\"\n    Write a function to find all words starting with 'a' or 'e' in a given string.\n    assert words_ae(\"python programe\")==['ame']\n    \"\"\"\n    # Your code here\n    return re.findall(r'[ae].*',text)\n"], ["from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    \"\"\"\n    Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\n    assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n    \"\"\"\n    # Your code here\n    return list(combinations_with_replacement(l,n))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], ["def count_Primes_nums(n):\n    \"\"\"\n    Write a python function to count the number of prime numbers less than a given non-negative number.\n    assert count_Primes_nums(5) == 2\n    \"\"\"\n    # Your code here\n    count = 0\n    for i in range(2, n):\n        if is_Prime(i):\n            count += 1\n    return count\n\n"], ["def swap_numbers(a,b):\n    \"\"\"\n    Write a function to swap two numbers.\n    assert swap_numbers(10,20)==(20,10)\n    \"\"\"\n    # Your code here\n    return b,a\n"], ["def count_odd(array_nums):\n    \"\"\"\n    Write a function to find number of odd elements in the given list using lambda function.\n    assert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n    \"\"\"\n    # Your code here\n    return len(list(filter(lambda x: x % 2 != 0, array_nums)))\n\n"], ["def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n    \"\"\"\n    # Your code here\n    return tuple(max(x, y) for x, y in zip(test_tup1, test_tup2))\n\n"], ["def newman_prime(n): \n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    assert newman_prime(3) == 7 \n    \"\"\"\n    # Your code here\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        return 2*newman_prime(n-1) + 1\n\n"], ["def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform mathematical division operation across the given tuples.\n    assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n    \"\"\"\n    # Your code here\n    return tuple(map(lambda x, y: x / y, test_tup1, test_tup2))\n\n"], ["def split_two_parts(list1, L):\n    \"\"\"\n    Write a function to split a given list into two parts where the length of the first part of the list is given.\n    assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n    \"\"\"\n    # Your code here\n    return list1[:L], list1[L:]\n\n"], ["def merge_dict(d1,d2):\n    \"\"\"\n    Write a function to merge two dictionaries.\n    assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n    \"\"\"\n    # Your code here\n    d1.update(d2)\n    return d1\n\n"], ["def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    assert dog_age(12)==61\n    \"\"\"\n    # Your code here\n    return h_age * 7\n\n"], ["def list_split(S, step):\n    \"\"\"\n    Write a function to split a list for every nth element.\n    assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n    \"\"\"\n    # Your code here\n    return [S[i:i+step] for i in range(0, len(S), step)]\n\n"], ["def lateralsurface_cube(l):\n    \"\"\"\n    Write a function to find the lateral surface area of a cube.\n    assert lateralsurface_cube(5)==100\n    \"\"\"\n    # Your code here\n    return 6*l*l\n\n"], ["def square_Sum(n):  \n    \"\"\"\n    Write a python function to find the sum of squares of first n odd natural numbers.\n    assert square_Sum(2) == 10\n    \"\"\"\n    # Your code here\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum\n\n"], ["def find_star_num(n): \n    \"\"\"\n    Write a function to find the n'th star number.\n    assert find_star_num(3) == 37\n    \"\"\"\n    # Your code here\n    return 0\n"], ["def ascii_value(k):\n    \"\"\"\n    Write a function to find the ascii value of a character.\n    assert ascii_value('A')==65\n    \"\"\"\n    # Your code here\n    return ord(k)\n\n"], ["def sum_even_and_even_index(arr,n):  \n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions.\n    assert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n    \"\"\"\n    # Your code here\n    even_sum = 0\n    for i in range(n):\n        if arr[i]%2 == 0 and i%2 == 0:\n            even_sum += arr[i]\n    return even_sum\n\n"], ["def even_Power_Sum(n): \n    \"\"\"\n    Write a python function to find the sum of fifth power of first n even natural numbers.\n    assert even_Power_Sum(2) == 1056\n    \"\"\"\n    # Your code here\n    sum = 0\n    for i in range(2, n+1):\n        sum += i**5\n    return sum\n\n"], ["def rear_extract(test_list):\n    \"\"\"\n    Write a function to perfom the rear element extraction from list of tuples records.\n    assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n    \"\"\"\n    # Your code here\n    return [x[2] for x in test_list]\n\n"], ["def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to substract the contents of one tuple with corresponding index of other tuple.\n    assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    \"\"\"\n    # Your code here\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\n"], ["import math  \ndef even_binomial_Coeff_Sum( n): \n    \"\"\"\n    Write a python function to find sum of even index binomial coefficients.\n    assert even_binomial_Coeff_Sum(4) == 8\n    \"\"\"\n    # Your code here\n    sum = 0\n    for i in range(0,n+1):\n        sum += math.factorial(n)/(math.factorial(i)*math.factorial(n-i))\n    return sum\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], ["import math as mt \ndef get_Position(a,n,m): \n    \"\"\"\n    Write a python function to find the position of the last removed element from the given array.\n    assert get_Position([2,5,4],3,2) == 2\n    \"\"\"\n    # Your code here\n    for i in range(n):\n        if a[i] == m:\n            return i\n    return -1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], ["def volume_cylinder(r,h):\n    \"\"\"\n    Write a function to find the volume of a cylinder.\n    assert volume_cylinder(10,5)==1570.7500000000002\n    \"\"\"\n    # Your code here\n    return (3.141592653589793*r*r*h)\n"], ["def dict_filter(dict,n):\n    \"\"\"\n    Write a function to filter a dictionary based on values.\n    assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n    \"\"\"\n    # Your code here\n    return {k:v for k,v in dict.items() if v>=n}\n\n"], ["def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the element count that occurs before the record in the given tuple.\n    assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n    \"\"\"\n    # Your code here\n    return 0\n\n"], ["def is_num_decagonal(n): \n    \"\"\"\n    Write a function to find the nth decagonal number.\n    assert is_num_decagonal(3) == 27\n    \"\"\"\n    # Your code here\n    return n*(n+1)*(2*n+1)\n"], ["def sequential_search(dlist, item):\n    \"\"\"\n    Write a function to search an element in the given array by using sequential search.\n    assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n    \"\"\"\n    # Your code here\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n\n"], ["def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    assert all_unique([1,2,3]) == True\n    \"\"\"\n    # Your code here\n    return len(test_list) == len(set(test_list))\n\n"], ["def sub_list(nums1,nums2):\n    \"\"\"\n    Write a function to substaract two lists using map and lambda function.\n    assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n    \"\"\"\n    # Your code here\n    return list(map(lambda x,y:x-y,nums1,nums2))\n\n"], ["def validate(n): \n    \"\"\"\n    Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.\n    assert validate(1234) == True\n    \"\"\"\n    # Your code here\n    for i in str(n):\n        if i.count(i) > int(i):\n            return False\n    return True\n\n"], ["def check_element(list,element):\n    \"\"\"\n    Write a function to check whether all items of a list are equal to a given string.\n    assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n    \"\"\"\n    # Your code here\n    if element in list:\n        return True\n    else:\n        return False\n\n"], ["import re\ndef text_match_two_three(text):\n    \"\"\"\n    Write a function that matches a string that has an a followed by two to three 'b'.\n    assert text_match_two_three(\"ac\")==('Not matched!')\n    \"\"\"\n    # Your code here\n    if re.match(\"a[b]{2,3}\",text):\n        return \"Matched!\"\n    else:\n        return \"Not matched!\"\n"], ["def max_sub_array_sum_repeated(a, n, k): \n    \"\"\"\n    Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\n    assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n    \"\"\"\n    # Your code here\n    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, a[i])\n        a[i] = max_sum\n    return max_sub_array_sum(a, n)\n\n"], ["def square_Sum(n):  \n    \"\"\"\n    Write a python function to find the sum of squares of first n even natural numbers.\n    assert square_Sum(2) == 20\n    \"\"\"\n    # Your code here\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    return sum\n\n"], ["def modular_inverse(arr, N, P):\n    \"\"\"\n    Write a function to count array elements having modular inverse under given prime number p equal to itself.\n    assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n    \"\"\"\n    # Your code here\n    count = 0\n    for i in range(len(arr)):\n        if (arr[i] * P + arr[i]) % N == 1:\n            count += 1\n    return count\n\n"], ["def odd_Days(N): \n    \"\"\"\n    Write a python function to calculate the number of odd days in a given year.\n    assert odd_Days(100) == 5\n    \"\"\"\n    # Your code here\n    return (N+1)//2\n\n"], ["def max_length(list1):\n    \"\"\"\n    Write a function to find the list of lists with maximum length.\n    assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n    \"\"\"\n    # Your code here\n    max_len = 0\n    max_list = []\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_list = i\n    return max_len, max_list\n\n"], ["def count_no_of_ways(n, k): \n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    assert count_no_of_ways(2, 4) == 16\n    \"\"\"\n    # Your code here\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n    if n == 3:\n        return k * k * k\n    if n == 4:\n        return k * k * k * k\n    if n == 5:\n        return k * k * k * k * k\n    if n == 6:\n        return k * k * k * k * k * k\n    if n == 7:\n        return k * k * k * k * k * k * k\n    if n == 8:\n        return k * k * k * k * k * k * k * k\n    if n == 9:\n        return k * k * k * k * k * k * k * k * k\n    if n == 10:\n        return k * k * k * k * k * k * k * k * k * k\n    if n == 11:\n        return k * k * k * k * k * k * k * k * k * k * k\n    if n == 12:\n        return k * k * k * k * k * k * k * k * k * k * k * k\n    if n == 13:\n        return k * k * k * k * k *"], ["def find(n,m):  \n    \"\"\"\n    Write a python function to find quotient of two numbers.\n    assert find(10,3) == 3\n    \"\"\"\n    # Your code here\n    return n//m\n"], ["import math\ndef otherside_rightangle(w,h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    assert otherside_rightangle(7,8)==10.63014581273465\n    \"\"\"\n    # Your code here\n    return math.sqrt(w**2+h**2)\n"], ["def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    assert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n    \"\"\"\n    # Your code here\n    return max(listval)\n\n"], ["def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    assert sum_div(8)==7\n    \"\"\"\n    # Your code here\n    sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum += i\n    return sum\n\n"], ["def get_Inv_Count(arr,n): \n    \"\"\"\n    Write a python function to count inversions in an array.\n    assert get_Inv_Count([1,20,6,4,5],5) == 5\n    \"\"\"\n    # Your code here\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], ["def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n    \"\"\"\n    # Your code here\n    if isinstance(list1, list):\n        for i in list1:\n            if isinstance(i, list):\n                flatten_list(i)\n            else:\n                print(i, end=\" \")\n    else:\n        print(list1, end=\" \")\n\n"], ["def intersection_nested_lists(l1, l2):\n    \"\"\"\n    Write a function to find the nested list elements which are present in another list.\n    assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n    \"\"\"\n    # Your code here\n    return [list(set(i).intersection(set(j))) for i in l1 for j in l2]\n\n"], ["from collections import defaultdict\n    \"\"\"\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n    \"\"\"\n    # Your code here\n    # return max(list(map(lambda x: x[1], list(map(lambda x: (x[0], sum(x[1:])), list(map(lambda x: (x[0], x[1:]), list(map(lambda x: (x[0], x[1:]), list(map(lambda x: (x[0], x[1:]), list(map(lambda x: (x[0], x[1:]), list(map(lambda x: (x[0], x[1:]), list(map(lambda x: (x[0], x[1:]), list(map(lambda x: (x[0], x[1:]), list(map(lambda x: (x[0], x[1:]), list(map(lambda x: (x[0], x[1:]), list(map(lambda x: (x[0], x[1:]), list(map(lambda x: (x[0], x[1:]), list(map(lambda x: (x[0], x[1:]), list(map(lambda x: (x[0], x[1:]), list(map(lambda x: (x[0], x[1:]), list(map(lambda x: (x[0], x[1:]), list(map(lambda x: (x"], ["def count_binary_seq(n): \n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    assert count_binary_seq(1) == 2.0\n    \"\"\"\n    # Your code here\n    return 2**n\n\n"], ["def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n    \"\"\"\n    # Your code here\n    return 1 + max(map(dict_depth, d.values()))\n\n"], ["def set_Bit_Number(n): \n    \"\"\"\n    Write a python function to find the most significant bit number which is also a set bit.\n    assert set_Bit_Number(6) == 4\n    \"\"\"\n    # Your code here\n    return bin(n).count('1')\n\n"], ["import sys \ndef solve(a,n):   \n    \"\"\"\n    Write a python function to check whether the count of inversion of two types are same or not.\n    assert solve([1,0,2],3) == True\n    \"\"\"\n    # Your code here\n    a.sort()\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if a[i] > a[j]:\n                count += 1\n    return count % 2 == 0\n"], ["def find_Element(arr,ranges,rotations,index) :  \n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n    \"\"\"\n    # Your code here\n    for i in range(rotations):\n        arr = arr[ranges[i][0]:ranges[i][1]+1]\n    return arr[index]\n\n"], ["import re\ndef start_withp(words):\n    \"\"\"\n    Write a function to match two words from a list of words starting with letter 'p'.\n    assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n    \"\"\"\n    # Your code here\n    return [i for i in words if i.split()[0].startswith('p')][0].split()\n"], ["def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\n    assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n    \"\"\"\n    # Your code here\n    if index == 0:\n        return a[0]\n    if k == 0:\n        return 0\n    if k == 1:\n        return a[index]\n    if k > index:\n        return 0\n    if k == index:\n        return a[index]\n    if k < index:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1), max_sum_increasing_subseq(a, n, index - 1, k))\n\n"], ["from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n    \"\"\"\n    # Your code here\n    return deepcopy(tuplex)\n\n"], ["def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists.\n    assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n    \"\"\"\n    # Your code here\n    nums1.sort()\n    nums2.sort()\n    return [nums1[-i]*nums2[-i] for i in range(1, N+1)]\n\n"], ["def maximum(a,b):   \n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    assert maximum(5,10) == 10\n    \"\"\"\n    # Your code here\n    if a > b:\n        return a\n    else:\n        return b\n"], ["def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple.\n    assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n    \"\"\"\n    # Your code here\n    return tuple(str1)\n\n"], ["def set_left_most_unset_bit(n): \n    \"\"\"\n    Write a python function to set the left most unset bit.\n    assert set_left_most_unset_bit(10) == 14\n    \"\"\"\n    # Your code here\n    return n | (n+1)\n\n"], ["import math\ndef volume_cone(r,h):\n    \"\"\"\n    Write a function to find the volume of a cone.\n    assert volume_cone(5,12)==314.15926535897927\n    \"\"\"\n    # Your code here\n    return (1/3)*math.pi*r*r*h\n"], ["def pos_nos(list1):\n    \"\"\"\n    Write a python function to print positive numbers in a list.\n    assert pos_nos([-1,-2,1,2]) == 1,2\n    \"\"\"\n    # Your code here\n    for i in list1:\n        if i > 0:\n            print(i)\n\n"], ["def max_sum_rectangular_grid(grid, n) : \n    \"\"\"\n    Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\n    assert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n    \"\"\"\n    # Your code here\n    if n == 1 : \n        return grid[0][0]\n    if n == 2 : \n        return max(grid[0][0], grid[0][1], grid[1][0], grid[1][1])\n    if n == 3 : \n        return max(grid[0][0], grid[0][1], grid[0][2], grid[1][0], grid[1][1], grid[1][2], grid[2][0], grid[2][1], grid[2][2])\n    if n == 4 : \n        return max(grid[0][0], grid[0][1], grid[0][2], grid[0][3], grid[1][0], grid[1][1], grid[1][2], grid[1][3], grid[2][0], grid[2][1], grid[2][2], grid[2][3], grid[3][0], grid[3][1], grid[3][2], grid[3][3])\n    if n == 5 : \n        return max(grid[0][0], grid[0][1], grid[0][2], grid[0][3], grid[0][4], grid[1][0], grid[1][1], grid[1][2], grid[1][3"], ["def find_Max_Len_Even(str): \n    \"\"\"\n    Write a python function to find the first maximum length of even word.\n    assert find_Max_Len_Even(\"python language\") == \"language\"\n    \"\"\"\n    # Your code here\n    max_len = 0\n    max_word = \"\"\n    for word in str.split():\n        if len(word) % 2 == 0 and len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n    return max_word\n\n"], ["def find_last_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the last occurrence of a given number in a sorted array.\n    assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n    \"\"\"\n    # Your code here\n    if not A:\n        return -1\n    if len(A) == 1:\n        return 0 if A[0] == x else -1\n    if A[0] == x:\n        return 0\n    if A[-1] == x:\n        return len(A) - 1\n    if x < A[0]:\n        return -1\n    if x > A[-1]:\n        return -1\n    if x < A[-2]:\n        return -1\n    if x > A[-1]:\n        return -1\n    if x < A[-1]:\n        return -1\n    if x > A[-2]:\n        return -1\n    if x < A[-1]:\n        return -1\n    if x > A[-2]:\n        return -1\n    if x < A[-1]:\n        return -1\n    if x > A[-2]:\n        return -1\n    if x < A[-1]:\n        return -1\n    if x > A[-2]:\n        return -1\n    if x < A[-1]:\n        return -1\n    if x > A[-2]:\n        return -1\n    if x < A[-1]:\n        return -1\n    if x > A[-2]:\n        return -1\n    if x <"], ["from itertools import groupby\ndef ctr_ele(el):\n    \"\"\"\n    Write a function to reflect the modified run-length encoding from a list.\n    assert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n    \"\"\"\n    # Your code here\n    return [list(g) for k, g in groupby(el)]\n\n"], ["def max_volume (s): \n    \"\"\"\n    Write a python function to find the maximum volume of a cuboid with given sum of sides.\n    assert max_volume(8) == 18\n    \"\"\"\n    # Your code here\n    return (s**3)\n\n"], ["import re\ndef find_long_word(text):\n    \"\"\"\n    Write a function to find all five characters long word in the given string by using regex.\n    assert find_long_word('Please move back to strem') == ['strem']\n    \"\"\"\n    # Your code here\n    pattern = re.compile(r'\\w{5}')\n    return pattern.findall(text)\n"], ["def sum_difference(n):\n    \"\"\"\n    Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n    assert sum_difference(12)==5434\n    \"\"\"\n    # Your code here\n    return (n*(n+1)*(2*n+1))/6 - (n*(n+1)*(n+2))/6\n\n"], ["def find_demlo(s): \n    \"\"\"\n    Write a function to find the demlo number for the given number.\n    assert find_demlo(\"111111\") == '12345654321'\n    \"\"\"\n    # Your code here\n    return ''.join(str(int(s[i])+int(s[i+1])+int(s[i+2])) for i in range(0,len(s),3))\n\n"], ["def position_min(list1):\n    \"\"\"\n    Write a function to find all index positions of the minimum values in a given list.\n    assert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n    \"\"\"\n    # Your code here\n    min_value = list1[0]\n    min_index = 0\n    for i in range(len(list1)):\n        if list1[i] < min_value:\n            min_value = list1[i]\n            min_index = i\n    return [min_index]\n\n"], ["def re_arrange(arr, n):\n    \"\"\"\n    Write a function to re-arrange the given array in alternating positive and negative items.\n    assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n    \"\"\"\n    # Your code here\n    i = 0\n    j = n - 1\n    while i < j:\n        if arr[i] < 0 and arr[j] > 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n        elif arr[i] < 0:\n            i += 1\n        elif arr[j] > 0:\n            j -= 1\n    return arr\n\n"], ["def sum_of_alternates(test_tuple):\n    \"\"\"\n    Write a function to extract the sum of alternate chains of tuples.\n    assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n    \"\"\"\n    # Your code here\n    return tuple(sum(x) for x in zip(test_tuple[::2], test_tuple[1::2]))\n\n"], ["def get_Min_Squares(n):\n    \"\"\"\n    Write a python function to find the minimum number of squares whose sum is equal to a given number.\n    assert get_Min_Squares(6) == 3\n    \"\"\"\n    # Your code here\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == "], ["from collections import defaultdict \n    \"\"\"\n    Write a function to get the word with most number of occurrences in the given strings list.\n    assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n    \"\"\"\n    # Your code here\n    d = defaultdict(int)\n    for i in strings:\n        for j in i.split():\n            d[j] += 1\n    return max(d, key=d.get)\n\n"], ["def check_isosceles(x,y,z):\n    \"\"\"\n    Write a function to print check if the triangle is isosceles or not.\n    assert check_isosceles(6,8,12)==False \n    \"\"\"\n    # Your code here\n    if x==y or y==z or x==z:\n        return True\n    else:\n        return False\n\n"], ["def rotate_left(list1,m,n):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the left direction.\n    assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n    \"\"\"\n    # Your code here\n    list1[m:n] = list1[m:n][::-1]\n    list1[:m] = list1[:m][::-1]\n    list1[n:] = list1[n:][::-1]\n    return list1\n\n"], ["def neg_count(list):\n    \"\"\"\n    Write a python function to count negative numbers in a list.\n    assert neg_count([-1,-2,3,-4,-5]) == 4\n    \"\"\"\n    # Your code here\n    count = 0\n    for i in list:\n        if i < 0:\n            count += 1\n    return count\n\n"], ["import re\ndef find_char(text):\n    \"\"\"\n    Write a function to find all three, four, five characters long words in the given string by using regex.\n    assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n    \"\"\"\n    # Your code here\n    pattern = re.compile(r'\\b\\w{3,5}\\b')\n    return pattern.findall(text)\n"], ["def count_unset_bits(n): \n    \"\"\"\n    Write a python function to count unset bits of a given number.\n    assert count_unset_bits(2) == 1\n    \"\"\"\n    # Your code here\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count\n\n"], ["def char_frequency(str1):\n    \"\"\"\n    Write a function to count character frequency of a given string.\n    assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n    \"\"\"\n    # Your code here\n    d = {}\n    for i in str1:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n\n"], ["def Sort(sub_li): \n    \"\"\"\n    Write a python function to sort a list according to the second element in sublist.\n    assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n    \"\"\"\n    # Your code here\n    sub_li.sort(key=lambda x: x[1])\n    return sub_li\n\n"], ["def check_Validity(a,b,c):  \n    \"\"\"\n    Write a python function to check whether the triangle is valid or not if sides are given.\n    assert check_Validity(1,2,3) == False\n    \"\"\"\n    # Your code here\n    if a+b>c and a+c>b and b+c>a:\n        return True\n    else:\n        return False\n\n"], ["def ap_sum(a,n,d):\n    \"\"\"\n    Write a function to find the sum of arithmetic progression.\n    assert ap_sum(1,5,2)==25\n    \"\"\"\n    # Your code here\n    return (n*(n-1)*(2*n+1))/6\n\n"], ["def check_monthnum(monthname1):\n    \"\"\"\n    Write a function to check whether the given month name contains 28 days or not.\n    assert check_monthnum(\"February\")==True\n    \"\"\"\n    # Your code here\n    if monthname1 == \"February\":\n        return True\n    else:\n        return False\n\n"], ["import re\ndef text_match_word(text):\n    \"\"\"\n    Write a function that matches a word at the end of a string, with optional punctuation.\n    assert text_match_word(\"python.\")==('Found a match!')\n    \"\"\"\n    # Your code here\n    return \"Found a match!\"\n"], ["def count_Substring_With_Equal_Ends(s): \n    \"\"\"\n    Write a python function to count the number of substrings with same first and last characters.\n    assert count_Substring_With_Equal_Ends('aba') == 4\n    \"\"\"\n    # Your code here\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if s[i] == s[j]:\n                count += 1\n    return count\n\n"], ["def find_Divisor(x,y):  \n    \"\"\"\n    Write a python function to find the maximum occuring divisor in an interval.\n    assert find_Divisor(2,2) == 2\n    \"\"\"\n    # Your code here\n    if x == y:\n        return x\n    else:\n        for i in range(x,y+1):\n            if x%i == 0 and y%i == 0:\n                return i\n\n"], ["def sum_three_smallest_nums(lst):\n    \"\"\"\n    Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.\n    assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n    \"\"\"\n    # Your code here\n    lst.sort()\n    return lst[0] + lst[1] + lst[2]\n\n"], ["def set_to_tuple(s):\n    \"\"\"\n    Write a function to convert the given set into ordered tuples.\n    assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n    \"\"\"\n    # Your code here\n    return tuple(sorted(s))\n\n"], ["from heapq import heappop, heappush\nclass Node:\n    def find_minimum_range(list):\n    \"\"\"\n    Write a function to find the smallest range that includes at-least one element from each of the given arrays.\n    assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n    \"\"\"\n    # Your code here\n    # return the minimum range\n    # return (start, end)\n    # if the list is empty, return None\n    if not list:\n        return None\n    # if the list has only one element, return the first element\n    if len(list) == 1:\n        return (list[0][0], list[0][-1])\n    # if the list has more than one element, find the minimum range\n    # using the first two elements\n    min_range = (list[0][0], list[0][-1])\n    for i in range(1, len(list)):\n        for j in range(len(list[i])):\n            if list[i][j] < min_range[0]:\n                min_range[0] = list[i][j]\n            if list[i][j] > min_range[1]:\n                min_range[1] = list[i][j]\n    return min_range\n\n"], ["def dig_let(s):\n    \"\"\"\n    Write a function to calculate the number of digits and letters in a string.\n    assert dig_let(\"python\")==(6,0)\n    \"\"\"\n    # Your code here\n    return len(s), len([i for i in s if i.isalpha()])\n\n"], ["def count_Odd_Squares(n,m): \n    \"\"\"\n    Write a python function to find number of elements with odd factors in a given range.\n    assert count_Odd_Squares(5,100) == 8\n    \"\"\"\n    # Your code here\n    count = 0\n    for i in range(n,m+1):\n        if i%2 != 0:\n            count += 1\n    return count\n\n"], ["def diff_consecutivenums(nums):\n    \"\"\"\n    Write a function to find the difference between two consecutive numbers in a given list.\n    assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n    \"\"\"\n    # Your code here\n    diff = []\n    for i in range(len(nums)-1):\n        diff.append(nums[i+1]-nums[i])\n    return diff\n\n"], ["def zigzag(n, k): \n    \"\"\"\n    Write a function to find entringer number e(n, k).\n    assert zigzag(4, 3) == 5\n    \"\"\"\n    # Your code here\n    if n == 1:\n        return 1\n    if k == 1:\n        return n\n    if k == 2:\n        return n * (n + 1) // 2\n    if k == 3:\n        return n * (n + 1) * (2 * n + 1) // 6\n    if k == 4:\n        return n * (n + 1) * (2 * n + 1) * (3 * n + 1) // 24\n    if k == 5:\n        return n * (n + 1) * (2 * n + 1) * (3 * n + 1) * (4 * n + 1) // 120\n    if k == 6:\n        return n * (n + 1) * (2 * n + 1) * (3 * n + 1) * (4 * n + 1) * (5 * n + 1) // 720\n    if k == 7:\n        return n * (n + 1) * (2 * n + 1) * (3 * n + 1) * (4 * n + 1) * (5 * n + 1) * (6 * n + 1) // 5040\n"], ["def count_Squares(m,n): \n    \"\"\"\n    Write a python function to count the number of squares in a rectangle.\n    assert count_Squares(4,3) == 20\n    \"\"\"\n    # Your code here\n    return m*n\n"], ["def find_ways(M): \n    \"\"\"\n    Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\n    assert find_ways(4) == 2\n    \"\"\"\n    # Your code here\n    if M == 0:\n        return 1\n    if M < 0:\n        return 0\n    return find_ways(M-1) + find_ways(M-2) + find_ways(M-3)\n\n"], ["def check(string) :\n    \"\"\"\n    Write a python function to check whether the given string is a binary string or not.\n    assert check(\"01010101010\") == \"Yes\"\n    \"\"\"\n    # Your code here\n    if string.isdigit() :\n        if int(string, 2) == 0 :\n            return \"Yes\"\n        else :\n            return \"No\"\n    else :\n        return \"No\"\n\n"], ["def minimum_Length(s) : \n    \"\"\"\n    Write a python function to minimize the length of the string by removing occurrence of only one character.\n    assert minimum_Length(\"mnm\") == 1\n    \"\"\"\n    # Your code here\n    s = list(s)\n    s.sort()\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            s.remove(s[i])\n    return \"\".join(s)\n\n"], ["def first_Element(arr,n,k): \n    \"\"\"\n    Write a python function to find the first element occurring k times in a given array.\n    assert first_Element([0,1,2,3,4,5],6,1) == 0\n    \"\"\"\n    # Your code here\n    for i in range(n):\n        if arr.count(arr[i]) == k:\n            return arr[i]\n    return -1\n\n"], ["def unique_Characters(str):\n    \"\"\"\n    Write a python function to check whether all the characters in a given string are unique.\n    assert unique_Characters('aba') == False\n    \"\"\"\n    # Your code here\n    return len(str) == len(set(str))\n\n"], ["def remove_column(list1, n):\n    \"\"\"\n    Write a function to remove a specified column from a given nested list.\n    assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n    \"\"\"\n    # Your code here\n    return [list(i) for i in zip(*list1)]\n\n"], ["def tn_ap(a,n,d):\n    \"\"\"\n    Write a function to find t-nth term of arithemetic progression.\n    assert tn_ap(1,5,2)==9\n    \"\"\"\n    # Your code here\n    return a+(n-1)*d\n"], ["def count_Rectangles(radius):  \n    \"\"\"\n    Write a python function to count the number of rectangles in a circle of radius r.\n    assert count_Rectangles(2) == 8\n    \"\"\"\n    # Your code here\n    return 4*radius**2\n"], ["def find_angle(a,b):\n    \"\"\"\n    Write a function to find the third angle of a triangle using two angles.\n    assert find_angle(47,89)==44\n    \"\"\"\n    # Your code here\n    return 180-a-b\n\n"], ["def find_max(test_list):\n    \"\"\"\n    Write a function to find the maximum element of all the given tuple records.\n    assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n    \"\"\"\n    # Your code here\n    max_value = test_list[0][1]\n    for i in test_list:\n        if i[1] > max_value:\n            max_value = i[1]\n    return max_value\n\n"], ["def moddiv_list(nums1,nums2):\n    \"\"\"\n    Write a function to find modulo division of two lists using map and lambda function.\n    assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n    \"\"\"\n    # Your code here\n    return list(map(lambda x,y:x%y,nums1,nums2))\n\n"], ["def Check_Solution(a,b,c): \n    \"\"\"\n    Write a python function to check whether one root of the quadratic equation is twice of the other or not.\n    assert Check_Solution(1,3,2) == \"Yes\"\n    \"\"\"\n    # Your code here\n    if a == 0:\n        return \"No\"\n    else:\n        if (b**2 - 4*a*c) < 0:\n            return \"No\"\n        else:\n            if (b**2 - 4*a*c) == 0:\n                return \"Yes\"\n            else:\n                if (b**2 - 4*a*c) > 0:\n                    if (b + (b**2 - 4*a*c)**0.5)/2 == (b - (b**2 - 4*a*c)**0.5)/2:\n                        return \"Yes\"\n                    else:\n                        return \"No\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], ["def get_carol(n): \n    \"\"\"\n    Write a function to find the n\u2019th carol number.\n    assert get_carol(2) == 7\n    \"\"\"\n    # Your code here\n    return 1\n"], ["def remove_empty(list1):\n    \"\"\"\n    Write a function to remove empty lists from a given list of lists.\n    assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n    \"\"\"\n    # Your code here\n    return [i for i in list1 if i]\n\n"], ["def max_occurrences(nums):\n    \"\"\"\n    Write a python function to find the item with maximum occurrences in a given list.\n    assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n    \"\"\"\n    # Your code here\n    return max(set(nums), key=nums.count)\n\n"], ["def add_K_element(test_list, K):\n    \"\"\"\n    Write a function to add the k elements to each element in the tuple.\n    assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n    \"\"\"\n    # Your code here\n    return [(x + K for x in y) for y in test_list]\n\n"], ["def min_flip_to_make_string_alternate(str): \n    \"\"\"\n    Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.\n    assert min_flip_to_make_string_alternate(\"0001010111\") == 2\n    \"\"\"\n    # Your code here\n    count = 0\n    for i in range(len(str)):\n        if i%2 == 0 and str[i] == '1':\n            count += 1\n        elif i%2 == 1 and str[i] == '0':\n            count += 1\n    return count\n\n"], ["def count_Digit(n):\n    \"\"\"\n    Write a python function to count the number of digits of a given number.\n    assert count_Digit(12345) == 5\n    \"\"\"\n    # Your code here\n    count = 0\n    while n > 0:\n        n = n // 10\n        count += 1\n    return count\n\n"], ["def adjacent_num_product(list_nums):\n    \"\"\"\n    Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.\n    assert adjacent_num_product([1,2,3,4,5,6]) == 30\n    \"\"\"\n    # Your code here\n    max_product = 0\n    for i in range(len(list_nums)-1):\n        product = list_nums[i]*list_nums[i+1]\n        if product > max_product:\n            max_product = product\n    return max_product\n\n"], ["class Node: \n\tdef is_tree_balanced(root): \n    \"\"\"\n    Write a function to check if a binary tree is balanced or not.\n    assert is_tree_balanced(root) == False\n    \"\"\"\n    # Your code here\n    if root is None:\n        return True\n    if abs(height(root.left) - height(root.right)) > 1:\n        return False\n    return is_tree_balanced(root.left) and is_tree_balanced(root.right)\n"], ["def repeat_tuples(test_tup, N):\n    \"\"\"\n    Write a function to repeat the given tuple n times.\n    assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n    \"\"\"\n    # Your code here\n    return tuple(test_tup for i in range(N))\n\n"], ["def lateralsurface_cuboid(l,w,h):\n    \"\"\"\n    Write a function to find the lateral surface area of cuboid\n    assert lateralsurface_cuboid(8,5,6)==156\n    \"\"\"\n    # Your code here\n    return 2*(l*w+l*h+w*h)\n"], ["def float_sort(price):\n    \"\"\"\n    Write a function to sort a tuple by its float element.\n    assert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n    \"\"\"\n    # Your code here\n    return sorted(price, key=lambda x: float(x[1]))\n\n"], ["def smallest_missing(A, left_element, right_element):\n    \"\"\"\n    Write a function to find the smallest missing element in a sorted array.\n    assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n    \"\"\"\n    # Your code here\n    if left_element == right_element:\n        return left_element + 1\n    if left_element > right_element:\n        return None\n    mid = (left_element + right_element) // 2\n    if A[mid] == mid:\n        return smallest_missing(A, left_element, mid - 1)\n    else:\n        return smallest_missing(A, mid + 1, right_element)\n\n"], ["import heapq as hq\ndef heap_assending(nums):\n    \"\"\"\n    Write a function to sort a given list of elements in ascending order using heap queue algorithm.\n    assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n    \"\"\"\n    # Your code here\n    h = []\n    for i in nums:\n        hq.heappush(h, i)\n    return [hq.heappop(h) for i in range(len(h))]\n"], ["def volume_cuboid(l,w,h):\n    \"\"\"\n    Write a function to find the volume of a cuboid.\n    assert volume_cuboid(1,2,3)==6\n    \"\"\"\n    # Your code here\n    return l*w*h\n"], ["def permute_string(str):\n    \"\"\"\n    Write a function to print all permutations of a given string including duplicates.\n    assert permute_string('ab')==['ab', 'ba']\n    \"\"\"\n    # Your code here\n    if len(str) == 1:\n        return [str]\n    else:\n        result = []\n        for i in range(len(str)):\n            for j in permute_string(str[:i] + str[i+1:]):\n                result.append(str[i] + j)\n        return result\n\n"], ["def round_num(n,m):\n    \"\"\"\n    Write a function to round the given number to the nearest multiple of a specific number.\n    assert round_num(4722,10)==4720\n    \"\"\"\n    # Your code here\n    return n - (n % m)\n\n"], ["def remove_replica(test_tup):\n    \"\"\"\n    Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\n    assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n    \"\"\"\n    # Your code here\n    # return tuple(set(test_tup))\n    # return tuple(test_tup)\n    # return tuple(test_tup)\n    # return tuple(test_tup)\n    # return tuple(test_tup)\n    # return tuple(test_tup)\n    # return tuple(test_tup)\n    # return tuple(test_tup)\n    # return tuple(test_tup)\n    # return tuple(test_tup)\n    # return tuple(test_tup)\n    # return tuple(test_tup)\n    # return tuple(test_tup)\n    # return tuple(test_tup)\n    # return tuple(test_tup)\n    # return tuple(test_tup)\n    # return tuple(test_tup)\n    # return tuple(test_tup)\n    # return tuple(test_tup)\n    # return tuple(test_tup)\n    # return tuple(test_tup)\n    # return tuple(test_tup)\n    # return tuple(test_tup)\n    # return tuple(test_tup)\n    # return tuple(test_tup)\n    # return tuple(test_tup)\n    # return tuple(test_tup)\n   "], ["def remove_Char(s,c) :  \n    \"\"\"\n    Write a python function to remove all occurrences of a character in a given string.\n    assert remove_Char(\"aba\",'a') == \"b\"\n    \"\"\"\n    # Your code here\n    return s.replace(c,'')\n\n"], ["def move_first(test_list):\n    \"\"\"\n    Write a python function to shift last element to first position in the given list.\n    assert move_first([1,2,3,4]) == [4,1,2,3]\n    \"\"\"\n    # Your code here\n    return test_list.append(test_list.pop(0))\n\n"], ["def surfacearea_cuboid(l,w,h):\n    \"\"\"\n    Write a function to find the surface area of a cuboid.\n    assert surfacearea_cuboid(1,2,3)==22\n    \"\"\"\n    # Your code here\n    return 2*(l*w+l*h+w*h)\n\n"], ["def multi_list(rownum,colnum):\n    \"\"\"\n    Write a function to generate a two-dimensional array.\n    assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n    \"\"\"\n    # Your code here\n    return [[i*j for i in range(rownum)] for j in range(colnum)]\n\n"], ["from operator import itemgetter\ndef index_on_inner_list(list_data, index_no):\n    \"\"\"\n    Write a function to sort a list of lists by a given index of the inner list.\n    assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n    \"\"\"\n    # Your code here\n    return sorted(list_data, key=itemgetter(index_no))\n\n"], ["def find_rotation_count(A):\n    \"\"\"\n    Write a function to find the number of rotations in a circularly sorted array.\n    assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n    \"\"\"\n    # Your code here\n    if not A:\n        return 0\n    if len(A) == 1:\n        return 0\n    if len(A) == 2:\n        return 0 if A[0] < A[1] else 1\n    if len(A) == 3:\n        return 0 if A[0] < A[1] < A[2] else 1 if A[0] < A[2] < A[1] else 2\n    if len(A) == 4:\n        return 0 if A[0] < A[1] < A[2] < A[3] else 1 if A[0] < A[3] < A[1] < A[2] else 2 if A[0] < A[2] < A[3] < A[1] else 3\n    if len(A) == 5:\n        return 0 if A[0] < A[1] < A[2] < A[3] < A[4] else 1 if A[0] < A[4] < A[1] < A[2] < A[3] else 2 if A[0] < A[3] < A[4] < A[1] < A[2] else 3 if A[0] < A["], ["def even_bit_toggle_number(n) : \n    \"\"\"\n    Write a python function to toggle all odd bits of a given number.\n    assert even_bit_toggle_number(10) == 15\n    \"\"\"\n    # Your code here\n    return n ^ 0xAAAAAAAA\n\n"], ["def frequency_Of_Smallest(n,arr): \n    \"\"\"\n    Write a python function to find the frequency of the smallest value in a given array.\n    assert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n    \"\"\"\n    # Your code here\n    arr.sort()\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == arr[0]:\n            count += 1\n    return count\n\n"], ["def get_perrin(n):\n    \"\"\"\n    Write a function to find the n'th perrin number using recursion.\n    assert get_perrin(9) == 12\n    \"\"\"\n    # Your code here\n    if n == 1:\n        return 1\n    else:\n        return get_perrin(n-1) + get_perrin(n-2)\n\n"], ["def swap_count(s):\n    \"\"\"\n    Write a function to find out the minimum no of swaps required for bracket balancing in the given string.\n    assert swap_count(\"[]][][\") == 2\n    \"\"\"\n    # Your code here\n    stack = []\n    count = 0\n    for i in s:\n        if i == '[':\n            stack.append(i)\n        elif i == ']':\n            if len(stack) == 0:\n                count += 1\n            else:\n                stack.pop()\n    return count\n\n"], ["def even_or_odd(N): \n    \"\"\"\n    Write a python function to check whether the hexadecimal number is even or odd.\n    assert even_or_odd(\"AB3454D\") ==\"Odd\"\n    \"\"\"\n    # Your code here\n    if N[0] == \"0\":\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n"], ["def highest_Power_of_2(n): \n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    assert highest_Power_of_2(10) == 8\n    \"\"\"\n    # Your code here\n    if n == 0:\n        return 0\n    else:\n        return 2**(n//2)\n\n"], ["def find_lucas(n): \n    \"\"\"\n    Write a function to find the n'th lucas number.\n    assert find_lucas(9) == 76\n    \"\"\"\n    # Your code here\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\n"], ["def add_string(list,string):\n    \"\"\"\n    Write a function to insert a given string at the beginning of all items in a list.\n    assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n    \"\"\"\n    # Your code here\n    return [string.format(i) for i in list]\n"], ["def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n    \"\"\"\n    # Your code here\n    return [dict(zip(l1, [dict(zip(l2, l3))]))]\n\n"], ["def get_max_sum (n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    assert get_max_sum(60) == 106\n    \"\"\"\n    # Your code here\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 5\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n\n"], ["def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length using lambda function.\n    assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n    \"\"\"\n    # Your code here\n    return max(input_list, key=lambda x: len(x))\n\n"], ["def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple is distinct or not.\n    assert check_distinct((1, 4, 5, 6, 1, 4)) == False\n    \"\"\"\n    # Your code here\n    return len(test_tup) == len(set(test_tup))\n\n"], ["def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    assert first_non_repeating_character(\"abcabc\") == None\n    \"\"\"\n    # Your code here\n    str1 = str1.lower()\n    str1 = list(str1)\n    for i in range(len(str1)):\n        if str1.count(str1[i]) == 1:\n            return str1[i]\n    return None\n\n"], ["import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not using regex.\n    assert check_char(\"abba\") == \"Valid\"\n    \"\"\"\n    # Your code here\n    if re.match(regex, string):\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], ["def median_numbers(a,b,c):\n    \"\"\"\n    Write a function to find the median of three specific numbers.\n    assert median_numbers(25,55,65)==55.0\n    \"\"\"\n    # Your code here\n    if a>b:\n        a,b=b,a\n    if a>c:\n        a,c=c,a\n    if b>c:\n        b,c=c,b\n    if a==b==c:\n        return a\n    if a==b:\n        return (a+c)/2\n    if a==c:\n        return (a+b)/2\n    if b==c:\n        return (b+a)/2\n\n"], ["def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    assert sum_of_digits([10,2,56])==14\n    \"\"\"\n    # Your code here\n    return sum(map(lambda x: sum(map(int, str(x))), nums))\n\n"], ["def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n    \"\"\"\n    # Your code here\n    return tuple(map(lambda x, y: x ^ y, test_tup1, test_tup2))\n\n"], ["def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the frequency of unique tuples in the given list order irrespective.\n    assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n    \"\"\"\n    # Your code here\n    return len(set(test_list))\n\n"], ["def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    \"\"\"\n    # Your code here\n    return tuple(map(lambda x, y: tuple(map(lambda a, b: a + b, x, y)), test_tup1, test_tup2))\n\n"], ["def ncr_modp(n, r, p): \n    \"\"\"\n    Write a function to compute the value of ncr%p.\n    assert ncr_modp(10,2,13)==6\n    \"\"\"\n    # Your code here\n    if r==0:\n        return 1\n    else:\n        return (ncr_modp(n-1,r-1,p)*n)%p\n\n"], ["import re\ndef is_valid_URL(str):\n    \"\"\"\n    Write a function to check if a url is valid or not using regex.\n    assert is_valid_URL(\"https://www.google.com\") == True\n    \"\"\"\n    # Your code here\n    pattern = re.compile(r'^(?:http|ftp)s?://' # http:// or https://\n                         r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|' #domain...\n                         r'localhost|' #localhost...\n                         r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})' # ...or ip\n                         r'(?::\\d+)?' # optional port\n                         r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return re.match(pattern, str)\n\n"], ["def minimum(a,b):   \n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    assert minimum(1,2) == 1\n    \"\"\"\n    # Your code here\n    if a < b:\n        return a\n    else:\n        return b\n"], ["def check_tuplex(tuplex,tuple1): \n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n    \"\"\"\n    # Your code here\n    return tuple1 in tuplex\n"], ["def find_Parity(x): \n    \"\"\"\n    Write a python function to find the parity of a given number.\n    assert find_Parity(12) == \"Even Parity\"\n    \"\"\"\n    # Your code here\n    if x%2==0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n\n"], ["def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    assert rearrange_bigger(12)==21\n    \"\"\"\n    # Your code here\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::"], ["import heapq\ndef push(i, j):\n    \"\"\"\n    Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.\n    assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n    \"\"\"\n    # Your code here\n    heap = []\n    heapq.heappush(heap, (i, j))\n    result = []\n    while len(result) < k:\n        i, j = heapq.heappop(heap)\n        result.append([i, j])\n        if i < len(arr1) - 1:\n            heapq.heappush(heap, (i + 1, j))\n        if j < len(arr2) - 1:\n            heapq.heappush(heap, (i, j + 1))\n    return result\n\n"], ["def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n    \"\"\"\n    # Your code here\n    return min(list1, key=lambda x: x[0] * x[1])\n\n"], ["def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    assert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n    \"\"\"\n    # Your code here\n    return min(listval)\n\n"], ["import re\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string by using regex.\n    assert snake_to_camel('android_tv') == 'AndroidTv'\n    \"\"\"\n    # Your code here\n    return re.sub(r'_([a-z])', lambda x: x.group(1).upper(), word)\n"], ["def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    assert remove_odd([1,2,3]) == [2]\n    \"\"\"\n    # Your code here\n    return [x for x in l if x % 2 == 0]\n\n"], ["def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n    \"\"\"\n    # Your code here\n    return [x[n] for x in list1]\n\n"], ["def overlapping(list1,list2):  \n    \"\"\"\n    Write a python function to check whether the value exists in a sequence or not.\n    assert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n    \"\"\"\n    # Your code here\n    if list1 == list2:\n        return True\n    else:\n        return False\n\n"], ["def max_Product(arr): \n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n    \"\"\"\n    # Your code here\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n    return max_product\n\n"], ["MAX = 1000000\ndef breakSum(n): \n    \"\"\"\n    Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\n    assert breakSum(12) == 13\n    \"\"\"\n    # Your code here\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    else:\n        return max(breakSum(n-1), breakSum(n-2), breakSum(n-3)) + n\n\n"], ["def group_tuples(Input): \n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n    \"\"\"\n    # Your code here\n    # return [list(t) for t in set(tuple(t) for t in Input)]\n    return [list(t) for t in set(tuple(t) for t in Input)]\n\n"], ["def Find_Max(lst): \n    \"\"\"\n    Write a python function to find the sublist having maximum length.\n    assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n    \"\"\"\n    # Your code here\n    max_len = 0\n    max_sublist = []\n    for i in range(len(lst)):\n        if len(lst[i]) > max_len:\n            max_len = len(lst[i])\n            max_sublist = lst[i]\n    return max_sublist\n\n"], ["def round_and_sum(list1):\n    \"\"\"\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n    \"\"\"\n    # Your code here\n    return sum([round(i) for i in list1])*len(list1)\n\n"], ["def cube_Sum(n): \n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    assert cube_Sum(2) == 72\n    \"\"\"\n    # Your code here\n    return sum([i**3 for i in range(1,n+1) if i%2==0])\n\n"], ["def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n    \"\"\"\n    # Your code here\n    return '-'.join(test_tup)\n\n"], ["def find_Average_Of_Cube(n):  \n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    assert find_Average_Of_Cube(2) == 4.5\n    \"\"\"\n    # Your code here\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum/n\n\n"], ["def get_maxgold(gold, m, n): \n    \"\"\"\n    Write a function to solve gold mine problem.\n    assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n    \"\"\"\n    # Your code here\n    if not gold or not m or not n:\n        return 0\n    dp = [[0 for _ in range(n)] for _ in range(m)]\n    for i in range(m):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = gold[i][j]\n            elif i == 0:\n                dp[i][j] = max(dp[i][j-1], gold[i][j])\n            elif j == 0:\n                dp[i][j] = max(dp[i-1][j], gold[i][j])\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1], gold[i][j])\n    return dp[m-1][n-1]\n\n"], ["def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n    \"\"\"\n    # Your code here\n    return [test_tuple[i][-1] for i in range(len(test_tuple))]\n\n"], ["def count_element_in_list(list1, x): \n    \"\"\"\n    Write a function to count the number of sublists containing a particular element.\n    assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n    \"\"\"\n    # Your code here\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n\n"], ["def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers using lambda function.\n    assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n    \"\"\"\n    # Your code here\n    return list(filter(lambda x: x%2!=0, nums))\n\n"], ["import re\ndef change_date_format(dt):\n    \"\"\"\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\n    assert change_date_format(\"2026-01-02\") == '02-01-2026'\n    \"\"\"\n    # Your code here\n    return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)\n\n"], ["def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n    \"\"\"\n    # Your code here\n    pass\n\n"], ["def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n    \"\"\"\n    # Your code here\n    return tuple(x & y for x, y in zip(test_tup1, test_tup2))\n\n"], ["def parabola_directrix(a, b, c): \n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    assert parabola_directrix(5,3,2)==-198\n    \"\"\"\n    # Your code here\n    return -b/(2*a)\n"], ["def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    assert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n    \"\"\"\n    # Your code here\n    return any(x in list2 for x in list1)\n\n"], ["def median_trapezium(base1,base2,height):\n    \"\"\"\n    Write a function to find the median of a trapezium.\n    assert median_trapezium(15,25,35)==20\n    \"\"\"\n    # Your code here\n    return (base1+base2)/2\n\n"], ["def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    assert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n    \"\"\"\n    # Your code here\n    for i in arr:\n        if number > i:\n            return 'Yes, entered number is greater than those in the array'\n        else:\n            return 'No, entered number is less than those in the array'\n\n"], ["import re\ndef text_match_one(text):\n    \"\"\"\n    Write a function that matches a string that has an a followed by one or more b's.\n    assert text_match_one(\"ac\")==('Not matched!')\n    \"\"\"\n    # Your code here\n    return re.match(\"a[b]+\",text)\n"], ["def last_Digit(n) :\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    assert last_Digit(123) == 3\n    \"\"\"\n    # Your code here\n    return n%10\n\n"], ["def neg_nos(list1):\n    \"\"\"\n    Write a python function to print negative numbers in a list.\n    assert neg_nos([-1,4,5,-6]) == -1,-6\n    \"\"\"\n    # Your code here\n    for i in list1:\n        if i < 0:\n            print(i)\n\n"], ["def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    assert remove_odd(\"python\")==(\"yhn\")\n    \"\"\"\n    # Your code here\n    return \"\".join([i for i in str1 if ord(i)%2==0])\n\n"], ["def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n    \"\"\"\n    # Your code here\n    return 0\n\n"], ["def multiple_to_single(L):\n    \"\"\"\n    Write a function to convert a list of multiple integers into a single integer.\n    assert multiple_to_single([11, 33, 50])==113350\n    \"\"\"\n    # Your code here\n    return int(\"\".join(map(str, L)))\n\n"], ["import re\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find all adverbs and their positions in a given sentence.\n    assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n    \"\"\"\n    # Your code here\n    adverb_list = []\n    adverb_position = []\n    adverb_text = []\n    text = text.lower()\n    adverb_pattern = re.compile(r'\\b(clearly|simply|quickly|easily|easily|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|quickly|"], ["def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube.\n    assert surfacearea_cube(5)==150\n    \"\"\"\n    # Your code here\n    return 6*l*l\n\n"], ["from array import array\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n    \"\"\"\n    # Your code here\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count / len(nums)\n\n"], ["def largest_neg(list1): \n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    assert largest_neg([1,2,3,-4,-6]) == -6\n    \"\"\"\n    # Your code here\n    max_neg = -100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], ["def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n    \"\"\"\n    # Your code here\n    return [tuple(i[K:]) for i in test_list]\n\n"], ["def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n    \"\"\"\n    # Your code here\n    return tuple(map(lambda x, y: x * y, test_tup1, test_tup2))\n\n"], ["from collections import Counter \ndef count_Occurrence(tup, lst): \n    \"\"\"\n    Write a python function to count the occurence of all elements of list in a tuple.\n    assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n    \"\"\"\n    # Your code here\n    count = 0\n    for i in lst:\n        count += tup.count(i)\n    return count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], ["def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list using lambda function.\n    assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n    \"\"\"\n    # Your code here\n    return list(map(lambda x: x**3, nums))\n\n"], ["def cal_sum(n): \n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    assert cal_sum(9) == 49\n    \"\"\"\n    # Your code here\n    if n == 1:\n        return 1\n    else:\n        return n + cal_sum(n-1)\n\n"], ["def check_Triangle(x1,y1,x2,y2,x3,y3): \n    \"\"\"\n    Write a python function to check whether the triangle is valid or not if 3 points are given.\n    assert check_Triangle(1,5,2,5,4,6) == 'Yes'\n    \"\"\"\n    # Your code here\n    if (x1==x2 and x1==x3) or (y1==y2 and y1==y3):\n        return 'Yes'\n    elif (x1==x2 and x1!=x3) or (y1==y2 and y1!=y3):\n        return 'No'\n    elif (x1==x3 and x1!=x2) or (y1==y3 and y1!=y2):\n        return 'No'\n    elif (x2==x3 and x2!=x1) or (y2==y3 and y2!=y1):\n        return 'No'\n    else:\n        return 'Yes'\n\n"], ["def extract_string(str, l):\n    \"\"\"\n    Write a function to extract specified size of strings from a give list of string values.\n    assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n    \"\"\"\n    # Your code here\n    return [str[i:i+l] for i in range(len(str)) if i+l <= len(str)]\n\n"], ["import re\ndef remove_whitespaces(text1):\n    \"\"\"\n    Write a function to remove all whitespaces from the given string using regex.\n    assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n    \"\"\"\n    # Your code here\n    return re.sub(' ', '', text1)\n"], ["def loss_amount(actual_cost,sale_amount): \n    \"\"\"\n    Write a function that gives loss amount if the given amount has loss else return none.\n    assert loss_amount(1500,1200)==None\n    \"\"\"\n    # Your code here\n    if actual_cost>sale_amount:\n        return actual_cost-sale_amount\n    else:\n        return None\n\n"], ["import math \ndef sumofFactors(n) : \n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    assert sumofFactors(18) == 26\n    \"\"\"\n    # Your code here\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum\n"], ["import re\ndef text_match_wordz(text):\n    \"\"\"\n    Write a function that matches a word containing 'z'.\n    assert text_match_wordz(\"pythonz.\")==('Found a match!')\n    \"\"\"\n    # Your code here\n    return \"Found a match!\" if re.search(r'\\w*z\\w*', text) else \"No match\"\n"], ["def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    assert check_monthnumb_number(5)==True\n    \"\"\"\n    # Your code here\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return False\n    else:\n        return False\n\n"], ["def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse strings in a given list of string values.\n    assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n    \"\"\"\n    # Your code here\n    return [x[::-1] for x in stringlist]\n\n"], ["def Find_Min(lst): \n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    assert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n    \"\"\"\n    # Your code here\n    min_len = len(lst[0])\n    min_sublist = lst[0]\n    for i in range(1,len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_sublist = lst[i]\n    return min_sublist\n\n"], ["def rectangle_area(l,b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    assert rectangle_area(10,20)==200\n    \"\"\"\n    # Your code here\n    return l*b\n"], ["import re\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string by using regex.\n    assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n    \"\"\"\n    # Your code here\n    return re.sub('[A-Z]', '', str1)\n"], ["def Extract(lst): \n    \"\"\"\n    Write a python function to get the first element of each sublist.\n    assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n    \"\"\"\n    # Your code here\n    return [i[0] for i in lst]\n"], ["def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    assert upper_ctr('PYthon') == 1\n    \"\"\"\n    # Your code here\n    return str.upper().count('P')\n\n"], ["def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n    \"\"\"\n    # Your code here\n    return list(itertools.combinations(list1, len(list1)))\n\n"], ["def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n    \"\"\"\n    # Your code here\n    max_product = 0\n    min_product = 0\n    for i in range(len(arr)):\n        if i == 0:\n            max_product = arr[i]\n            min_product = arr[i]\n        else:\n            max_product = max(max_product * arr[i], arr[i])\n            min_product = min(min_product * arr[i], arr[i])\n    return max_product\n\n"], ["def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n    \"\"\"\n    # Your code here\n    for i in dict.values():\n        if i != n:\n            return False\n    return True\n\n"], ["def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n    \"\"\"\n    # Your code here\n    return {k: v for k, v in dict1.items() if v is not None}\n\n"], ["def find_peak(arr, n): \n    \"\"\"\n    Write a function to find the peak element in the given array.\n    assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n    \"\"\"\n    # Your code here\n    for i in range(1, n-1):\n        if arr[i] > arr[i-1] and arr[i] > arr[i+1]:\n            return arr[i]\n    return -1\n\n"], ["def decimal_to_Octal(deciNum):\n    \"\"\"\n    Write a python function to convert decimal number to octal number.\n    assert decimal_to_Octal(10) == 12\n    \"\"\"\n    # Your code here\n    octal = ''\n    while deciNum > 0:\n        octal = str(deciNum % 8) + octal\n        deciNum = deciNum // 8\n    return octal\n\n"], ["def max_product(arr, n ): \n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n    \"\"\"\n    # Your code here\n    max_product = 1\n    min_product = 1\n    for i in range(n):\n        max_product = max(max_product, arr[i])\n        min_product = min(min_product, arr[i])\n        if max_product < min_product:\n            max_product, min_product = min_product, max_product\n    return max_product\n\n"], ["def max_profit(price, k):\n    \"\"\"\n    Write a function to find the maximum profit earned from a maximum of k stock transactions\n    assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n    \"\"\"\n    # Your code here\n    if k == 0:\n        return 0\n    if len(price) == 1:\n        return 0\n    if len(price) == 2:\n        return max(price[1] - price[0], 0)\n    if len(price) == 3:\n        return max(price[2] - price[0], price[1] - price[0])\n    if len(price) == 4:\n        return max(price[3] - price[0], price[2] - price[0], price[1] - price[0])\n    if len(price) == 5:\n        return max(price[4] - price[0], price[3] - price[0], price[2] - price[0], price[1] - price[0])\n    if len(price) == 6:\n        return max(price[5] - price[0], price[4] - price[0], price[3] - price[0], price[2] - price[0], price[1] - price[0])\n    if len(price) == 7:\n        return max(price[6] - price[0], price[5] - price[0], price[4] - price[0], price[3] - price[0], price["], ["def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the elements of the given tuples.\n    assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n    \"\"\"\n    # Your code here\n    return tuple(map(lambda x, y: x + y, test_tup, test_tup[1:]))\n\n"], ["def find_remainder(arr, lens, n): \n    \"\"\"\n    Write a python function to find remainder of array multiplication divided by n.\n    assert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n    \"\"\"\n    # Your code here\n    return sum(arr[i]%n for i in range(lens))\n\n"], ["def check_Consecutive(l): \n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    assert check_Consecutive([1,2,3,4,5]) == True\n    \"\"\"\n    # Your code here\n    for i in range(len(l)-1):\n        if l[i+1]-l[i] != 1:\n            return False\n    return True\n\n"], ["def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n    \"\"\"\n    # Your code here\n    return set(test_list1).intersection(test_list2)\n\n"], ["def replace_char(str1,ch,newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    assert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n    \"\"\"\n    # Your code here\n    return str1.replace(ch,newch)\n\n"], ["from collections import Counter\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort counter by value.\n    assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n    \"\"\"\n    # Your code here\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n\n"], ["def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    assert big_sum([1,2,3]) == 4\n    \"\"\"\n    # Your code here\n    return max(nums) + min(nums)\n\n"], ["def is_lower(string):\n    \"\"\"\n    Write a python function to convert the given string to lower case.\n    assert is_lower(\"InValid\") == \"invalid\"\n    \"\"\"\n    # Your code here\n    return string.lower()\n\n"], ["import re\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    assert remove_lowercase(\"PYTHon\")==('PYTH')\n    \"\"\"\n    # Your code here\n    return re.sub(r'[a-z]+', '', str1)\n"], ["def first_Digit(n) :  \n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    assert first_Digit(123) == 1\n    \"\"\"\n    # Your code here\n    return n//10**(len(str(n))-1)\n\n"], ["def get_max_occuring_char(str1):\n    \"\"\"\n    Write a python function to find the maximum occurring character in a given string.\n    assert get_max_occuring_char(\"data\") == \"a\"\n    \"\"\"\n    # Your code here\n    return max(set(str1), key=str1.count)\n\n"], ["def is_subset_sum(set, n, sum):\n    \"\"\"\n    Write a function to determine if there is a subset of the given set with sum equal to the given sum.\n    assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n    \"\"\"\n    # Your code here\n    if n == 0:\n        return False\n    if sum == 0:\n        return True\n    if sum < 0:\n        return False\n    return is_subset_sum(set, n - 1, sum) or is_subset_sum(set, n - 1, sum - set[n - 1])\n\n"], ["import re \ndef match(text): \n    \"\"\"\n    Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n    assert match(\"Geeks\") == 'Yes'\n    \"\"\"\n    # Your code here\n    return re.search(r'[A-Z][a-z]+',text)\n\n"], ["def first_Factorial_Divisible_Number(x): \n    \"\"\"\n    Write a python function to find the first natural number whose factorial is divisible by x.\n    assert first_Factorial_Divisible_Number(10) == 5\n    \"\"\"\n    # Your code here\n    for i in range(1,x+1):\n        if i!=1:\n            if i!=2:\n                if i!=3:\n                    if i!=4:\n                        if i!=5:\n                            if i!=6:\n                                if i!=7:\n                                    if i!=8:\n                                        if i!=9:\n                                            if i!=10:\n                                                if i!=11:\n                                                    if i!=12:\n                                                        if i!=13:\n                                                            if i!=14:\n                                                                if i!=15:\n                                                                    if i!=16:\n                                                                        if i!=17:\n                                                                            if i!=18:\n                                                                                if i!=19:\n                                                                                    if i!=20:\n                                                                                        if i!=21:\n                                                                                            if i!=22:\n                                                                                                if i!=23:\n                                                                                                    if i!=24:\n                                                                                                        if i!=25:\n                                                                                                            if i!=26:\n                                                                                                                if i!="], ["def remove_matching_tuple(test_list1, test_list2):\n    \"\"\"\n    Write a function to remove the matching tuples from the given two tuples.\n    assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n    \"\"\"\n    # Your code here\n    return [x for x in test_list1 if x not in test_list2]\n\n"], ["def largest_palindrome(A, n) : \n    \"\"\"\n    Write a function to find the largest palindromic number in the given array.\n    assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n    \"\"\"\n    # Your code here\n    # return the largest palindrome\n    # if the array is empty, return 0\n    if n == 0 :\n        return 0\n    # if the array has only one element, return that element\n    if n == 1 :\n        return A[0]\n    # if the array has more than one element, find the largest palindrome in the array\n    # and return that\n    # initialize the largest palindrome to the first element\n    largest_palindrome = A[0]\n    # loop through the array\n    for i in range(1, n) :\n        # if the current element is larger than the largest palindrome,\n        # check if the current element is a palindrome\n        if A[i] > largest_palindrome :\n            # if the current element is a palindrome, update the largest palindrome\n            if is_palindrome(A[i]) :\n                largest_palindrome = A[i]\n    # return the largest palindrome\n    return largest_palindrome\n"], ["def binomial_probability(n, k, p): \n    \"\"\"\n    Write a function to compute binomial probability for the given number.\n    assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n    \"\"\"\n    # Your code here\n    return (p**k) * ((1-p)**(n-k))\n\n"], ["def sort_tuple(tup): \n    \"\"\"\n    Write a function to sort a list of tuples in increasing order by the last element in each tuple.\n    assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n    \"\"\"\n    # Your code here\n    return sorted(tup, key=lambda x: x[1])\n\n"], ["import math\ndef area_pentagon(a):\n    \"\"\"\n    Write a function to find the area of a pentagon.\n    assert area_pentagon(5)==43.01193501472417\n    \"\"\"\n    # Your code here\n    return (5*a**2)/(4*math.tan(math.pi/5))\n"], ["def frequency_Of_Largest(n,arr): \n    \"\"\"\n    Write a python function to find the frequency of the largest value in a given array.\n    assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n    \"\"\"\n    # Your code here\n    arr.sort()\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == arr[-1]:\n            count += 1\n    return count\n\n"], ["def extract_symmetric(test_list):\n    \"\"\"\n    Write a function to extract all the pairs which are symmetric in the given tuple list.\n    assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n    \"\"\"\n    # Your code here\n    return {(x, y) for x, y in test_list if x == y}\n\n"], ["import math\ndef sum_gp(a,n,r):\n    \"\"\"\n    Write a function to find the sum of geometric progression series.\n    assert sum_gp(1,5,2)==31\n    \"\"\"\n    # Your code here\n    return (a*(1-r**n))/(1-r)\n"], ["def binary_search(item_list,item):\n    \"\"\"\n    Write a function to search an element in the given array by using binary search.\n    assert binary_search([1,2,3,5,8], 6) == False\n    \"\"\"\n    # Your code here\n    low = 0\n    high = len(item_list)-1\n    while low <= high:\n        mid = (low + high)//2\n        if item_list[mid] == item:\n            return True\n        elif item_list[mid] < item:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False\n\n"], ["import math\ndef calculate_polygons(startx, starty, endx, endy, radius):\n    \"\"\"\n    Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n    assert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n    \"\"\"\n    # Your code here\n    # Create a list of lists\n    polygons = []\n    # Create a list of tuples\n    points = []\n    # Create a list of tuples\n    points2 = []\n    # Create a list of tuples\n    points3 = []\n    # Create a list of tuples\n    points4 = []\n    # Create a list of tuples\n    points5 = []\n    # Create a list of tuples\n    points6 = []\n    # Create a list of tuples\n    points7 = []\n    # Create a list of tuples\n    points8 = []\n    # Create a list of tuples\n    points9 = []\n    # Create a list of tuples\n    points10 = []\n    # Create a list of tuples\n    points11 = []\n    # Create a list of tuples\n    points12 = []\n    # Create a list of tuples\n    points13 = []\n    # Create a list of tuples\n    points14 = []\n    # Create a list of tuples\n    points15 = []\n    # Create a list of tuples\n    points16 = []\n    # Create a list of tuples\n    points17 = []\n    # Create a list of tuples\n    points18 = []\n    # Create a list of tu"], ["def binary_to_integer(test_tup):\n    \"\"\"\n    Write a function to convert the given binary tuple to integer.\n    assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n    \"\"\"\n    # Your code here\n    return ''.join(map(str, test_tup))\n\n"], ["import re\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string by using regex.\n    assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n    \"\"\"\n    # Your code here\n    return re.sub(r'[a-z]+', '', str1)\n"], ["import heapq as hq\ndef heap_queue_smallest(nums,n):\n    \"\"\"\n    Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\n    assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n    \"\"\"\n    # Your code here\n    hq.heapify(nums)\n    smallest = []\n    for i in range(n):\n        smallest.append(hq.heappop(nums))\n    return smallest\n"], ["import math\ndef surfacearea_cone(r,h):\n    \"\"\"\n    Write a function to find the surface area of a cone.\n    assert surfacearea_cone(5,12)==282.7433388230814\n    \"\"\"\n    # Your code here\n    return 2*math.pi*r*h+math.pi*r**2\n"], ["def gcd(x, y):\n    \"\"\"\n    Write a python function to find gcd of two positive integers.\n    assert gcd(12, 17) == 1\n    \"\"\"\n    # Your code here\n    if x == 0:\n        return y\n    if y == 0:\n        return x\n    if x > y:\n        return gcd(x % y, y)\n    else:\n        return gcd(x, y % x)\n\n"], ["def diameter_circle(r):\n    \"\"\"\n    Write a function to find the diameter of a circle.\n    assert diameter_circle(10)==20\n    \"\"\"\n    # Your code here\n    return 2*r\n\n"], ["def concatenate_elements(list):\n    \"\"\"\n    Write a function to concatenate all elements of the given list into a string.\n    assert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n    \"\"\"\n    # Your code here\n    return ' '.join(list)\n\n"], ["def num_comm_div(x,y):\n    \"\"\"\n    Write a python function to find common divisor between two numbers in a given pair.\n    assert num_comm_div(2,4) == 2\n    \"\"\"\n    # Your code here\n    return x if x%y == 0 else y\n\n"], ["def find(n,m):\n    \"\"\"\n    Write a python function to find remainder of two numbers.\n    assert find(3,3) == 0\n    \"\"\"\n    # Your code here\n    return n%m\n\n"], ["def add_consecutive_nums(nums):\n    \"\"\"\n    Write a function to add consecutive numbers of a given list.\n    assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n    \"\"\"\n    # Your code here\n    return [sum(nums[i:i+2]) for i in range(len(nums)-1)]\n\n"], ["def sum_Of_Series(n): \n    \"\"\"\n    Write a python function to find the cube sum of first n natural numbers.\n    assert sum_Of_Series(5) == 225\n    \"\"\"\n    # Your code here\n    return sum([i**3 for i in range(1,n+1)])\n\n"], ["def re_order(A):\n    \"\"\"\n    Write a function to move all zeroes to the end of the given array.\n    assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n    \"\"\"\n    # Your code here\n    zero_count = 0\n    for i in range(len(A)):\n        if A[i] == 0:\n            zero_count += 1\n    for i in range(zero_count):\n        A.remove(0)\n    A.extend([0]*zero_count)\n    return A\n\n"], ["def permutation_coefficient(n, k): \n    \"\"\"\n    Write a function to calculate the permutation coefficient of given p(n, k).\n    assert permutation_coefficient(10, 2) == 90\n    \"\"\"\n    # Your code here\n    return math.factorial(n) / (math.factorial(k) * math.factorial(n - k))\n\n"], ["def remove_words(list1, removewords):\n    \"\"\"\n    Write a function to remove specific words from a given list.\n    assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n    \"\"\"\n    # Your code here\n    for word in removewords:\n        if word in list1:\n            list1.remove(word)\n    return list1\n\n"], ["def same_order(l1, l2):\n    \"\"\"\n    Write a function to check if the common elements between two given lists are in the same order or not.\n    assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n    \"\"\"\n    # Your code here\n    if len(l1) != len(l2):\n        return False\n    else:\n        for i in range(len(l1)):\n            if l1[i] != l2[i]:\n                return False\n        return True\n\n"], ["def average_Odd(n) : \n    \"\"\"\n    Write a python function to find the average of odd numbers till a given odd number.\n    assert average_Odd(9) == 5\n    \"\"\"\n    # Your code here\n    sum = 0\n    for i in range(1,n+1,2):\n        sum += i\n    return sum/n\n"], ["def no_of_subsequences(arr, k): \n    \"\"\"\n    Write a function to find the number of subsequences having product smaller than k for the given non negative array.\n    assert no_of_subsequences([1,2,3,4], 10) == 11\n    \"\"\"\n    # Your code here\n    n = len(arr)\n    dp = [[0 for i in range(k+1)] for j in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = 1\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if arr[i-1] <= j:\n                dp[i][j] = dp[i-1][j] + dp[i-1][j-arr[i-1]]\n            else:\n                dp[i][j] = dp[i-1][j]\n    return dp[n][k]\n\n"]]}