{"task_id": "MBCPP/11", "language": "cpp", "completion": "    int n = s.size();\n    int i = 0;\n    while(i < n && s[i] != ch[0])\n        i++;\n    if(i == n)\n        return s;\n    int j = i;\n    while(j < n && s[j] != ch[0])\n        j++;\n    if(j == n)\n        return s;\n    string ans = s.substr(0, i) + s.substr(j, n);\n    return ans;\n}\n"}
{"task_id": "MBCPP/12", "language": "cpp", "completion": "    vector<vector<int>> ans;\n    for(auto i:m){\n        ans.push_back(i);\n    }\n    sort(ans.begin(), ans.end(), [](vector<int> a, vector<int> b){\n        return accumulate(a.begin(), a.end(), 0) < accumulate(b.begin(), b.end(), 0);\n    });\n    return ans;\n}"}
{"task_id": "MBCPP/14", "language": "cpp", "completion": "    return l*b*h;\n}\n"}
{"task_id": "MBCPP/15", "language": "cpp", "completion": "    vector<string> ans;\n    string temp;\n    for(int i=0;i<text.length();i++){\n        if(islower(text[i])){\n            ans.push_back(temp);\n            temp = \"\";\n        }\n        temp += text[i];\n    }\n    ans.push_back(temp);\n    return ans;\n}\n"}
{"task_id": "MBCPP/16", "language": "cpp", "completion": "  int n = text.size();\n  for(int i = 0; i < n; i++){\n    if(text[i] >= 'a' && text[i] <= 'z'){\n      if(text[i] == '_'){\n        if(text[i+1] >= 'a' && text[i+1] <= 'z'){\n          return \"Found a match!\";\n        }\n      }\n    }\n  }\n  return \"Not matched!\";\n}\n"}
{"task_id": "MBCPP/17", "language": "cpp", "completion": "  return a*4;\n}\n\n"}
{"task_id": "MBCPP/18", "language": "cpp", "completion": "    for(int i=0;i<secondString.length();i++){\n        str.erase(remove(str.begin(),str.end(),secondString[i]),str.end());\n    }\n    return str;\n}\n"}
{"task_id": "MBCPP/19", "language": "cpp", "completion": "    unordered_set<int> s;\n    for(int i=0;i<arraynums.size();i++){\n        if(s.find(arraynums[i])!=s.end())\n            return true;\n        s.insert(arraynums[i]);\n    }\n    return false;\n}\n"}
{"task_id": "MBCPP/20", "language": "cpp", "completion": "    return (x%10==7) && (x%100!=17) && (x%100!=37) && (x%100!=77) && (x%100!=97);\n}\n"}
{"task_id": "MBCPP/21", "language": "cpp", "completion": "    vector<int> ans;\n    for(int i=0;i<m;i++){\n        ans.push_back(n*i);\n    }\n    return ans;\n}"}
{"task_id": "MBCPP/22", "language": "cpp", "completion": "    unordered_set<int> s;\n    for(int i: nums){\n        if(s.find(i) != s.end()) return i;\n        s.insert(i);\n    }\n    return -1;\n}"}
{"task_id": "MBCPP/23", "language": "cpp", "completion": "    int max_sum = INT_MIN;\n    for(auto i: list1){\n        int sum = 0;\n        for(auto j: i)\n            sum += j;\n        max_sum = max(max_sum, sum);\n    }\n    return max_sum;\n}"}
{"task_id": "MBCPP/24", "language": "cpp", "completion": "    int decimal = 0;\n    int base = 1;\n    while(binary > 0){\n        int lastDigit = binary % 10;\n        decimal += lastDigit * base;\n        base *= 2;\n        binary /= 10;\n    }\n    return decimal;\n}"}
{"task_id": "MBCPP/25", "language": "cpp", "completion": "    int prod = 1;\n    unordered_map<int, int> mp;\n    for(int i = 0; i < n; i++){\n        mp[arr[i]]++;\n    }\n    for(int i = 0; i < n; i++){\n        if(mp[arr[i]] == 1){\n            prod *= arr[i];\n        }\n    }\n    return prod;\n}"}
{"task_id": "MBCPP/26", "language": "cpp", "completion": "    int count = 0;\n    for(auto i: testList){\n        if(i.size() == k)\n            count++;\n    }\n    return count == testList.size();\n}\n"}
{"task_id": "MBCPP/27", "language": "cpp", "completion": "    for(int i=0;i<list.size();i++){\n        list[i].erase(remove_if(list[i].begin(), list[i].end(), ::isdigit), list[i].end());\n    }\n    return list;\n}"}
{"task_id": "MBCPP/28", "language": "cpp", "completion": "    int res = 1;\n    for(int i = 0; i < k; i++){\n        res *= (n - i);\n        res /= (i + 1);\n    }\n    return res;\n}\n"}
{"task_id": "MBCPP/29", "language": "cpp", "completion": "    unordered_map<int, int> mp;\n    for(int i=0;i<arrSize;i++){\n        mp[arr[i]]++;\n    }\n    for(auto it=mp.begin();it!=mp.end();it++){\n        if(it->second%2!=0){\n            return it->first;\n        }\n    }\n    return -1;\n}\n"}
{"task_id": "MBCPP/30", "language": "cpp", "completion": "    int n = s.length();\n    int ans = 0;\n    for(int i=0;i<n;i++){\n        for(int j=i+1;j<n;j++){\n            if(s[i]==s[j]) ans++;\n        }\n    }\n    return ans;\n}"}
{"task_id": "MBCPP/31", "language": "cpp", "completion": "    priority_queue<pair<int, int>> pq;\n    for(auto &v: nums) {\n        for(auto &i: v) {\n            if(pq.size() < k) {\n                pq.push({i, 1});\n            } else {\n                if(i == pq.top().first) {\n                    pq.top().second++;\n                } else {\n                    pq.pop();\n                    pq.push({i, 1});\n                }\n            }\n        }\n    }\n    vector<int> ans;\n    while(!pq.empty()) {\n        ans.push_back(pq.top().first);\n        pq.pop();\n    }\n    reverse(ans.begin(), ans.end());\n    return ans;\n}"}
{"task_id": "MBCPP/32", "language": "cpp", "completion": "    int ans = 0;\n    for(int i = 2; i <= sqrt(n); i++){\n        if(n%i == 0){\n            ans = i;\n            while(n%i == 0){\n                n /= i;\n            }\n        }\n    }\n    if(n > 1) ans = n;\n    return ans;\n}\n"}
{"task_id": "MBCPP/33", "language": "cpp", "completion": "    string s;\n    while(n){\n        s = to_string(n%2) + s;\n        n /= 2;\n    }\n    return s;\n}\n"}
{"task_id": "MBCPP/34", "language": "cpp", "completion": "    int sum = 0;\n    for(int i = 0; i < n; i++)\n        sum += ar[i];\n    return (n*(n+1))/2 - sum;\n}"}
{"task_id": "MBCPP/35", "language": "cpp", "completion": "    return n*(n+1)*(2*n+1)/6;\n}\n"}
{"task_id": "MBCPP/36", "language": "cpp", "completion": "    int count = 0;\n    int num = 0;\n    while(count < n){\n        num = (p/q);\n        count += (int)log10(num)+1;\n        p = (p%q)*10;\n    }\n    return num%10;\n}"}
{"task_id": "MBCPP/38", "language": "cpp", "completion": "    int even = 0, odd = 0;\n    for(int i = 0; i < list1.size(); i++){\n        if(list1[i] % 2 == 0) even += list1[i];\n        else odd += list1[i];\n    }\n    return even / odd;\n}"}
{"task_id": "MBCPP/39", "language": "cpp", "completion": "    unordered_map<char, int> m;\n    for(char c: s) m[c]++;\n    string ans;\n    for(char c: s) {\n        if(m[c] > 0) {\n            ans += c;\n            m[c]--;\n        }\n    }\n    return ans;\n}"}
{"task_id": "MBCPP/40", "language": "cpp", "completion": "    unordered_map<int, int> ans;\n    for(auto v: nums)\n        for(auto x: v)\n            ans[x]++;\n    return ans;\n}"}
{"task_id": "MBCPP/41", "language": "cpp", "completion": "    return vector<int>(remove_if(nums.begin(), nums.end(), [](int x){return x%2;}), nums.end());\n}\n"}
{"task_id": "MBCPP/42", "language": "cpp", "completion": "    int sum = 0;\n    for(int i = 0; i < n; i++){\n        for(int j = i+1; j < n; j++){\n            if(arr[i] == arr[j]){\n                sum += arr[i];\n            }\n        }\n    }\n    return sum;\n}"}
{"task_id": "MBCPP/43", "language": "cpp", "completion": "    if(regex_match(text, regex(\"[a-z]+(_[a-z]+)*\")))\n        return \"Found a match!\";\n    else\n        return \"Not matched!\";\n}\n"}
{"task_id": "MBCPP/44", "language": "cpp", "completion": "  if(text.substr(0,6) == \"python\"){\n    return \"Found a match!\";\n  }\n  return \"Not matched!\";\n}\n"}
{"task_id": "MBCPP/45", "language": "cpp", "completion": "    int ans = l[0];\n    for(int i=1;i<l.size();i++){\n        ans = gcd(ans,l[i]);\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/46", "language": "cpp", "completion": "    return (data.size() == (int)unique(data.begin(), data.end()).size());\n}\n"}
{"task_id": "MBCPP/47", "language": "cpp", "completion": "    return (a/b)%10;\n}\n"}
{"task_id": "MBCPP/48", "language": "cpp", "completion": "    return n | (n-1);\n}\n"}
{"task_id": "MBCPP/49", "language": "cpp", "completion": "    vector<int> ans;\n    for(auto i: nums)\n        ans.push_back(i[n]);\n    return ans;\n}\n"}
{"task_id": "MBCPP/51", "language": "cpp", "completion": "    return (x==y && y==z);\n}\n"}
{"task_id": "MBCPP/52", "language": "cpp", "completion": "    return b*h;\n}\n\n"}
{"task_id": "MBCPP/53", "language": "cpp", "completion": "    if(str[0] == str[str.length()-1]){\n        return \"Equal\";\n    }\n    return \"Not Equal\";\n}\n"}
{"task_id": "MBCPP/54", "language": "cpp", "completion": "    vector<int> result;\n    int max = *max_element(myList.begin(), myList.end());\n    vector<int> count(max + 1, 0);\n    for (int i = 0; i < myList.size(); i++) {\n        count[myList[i]]++;\n    }\n    for (int i = 1; i < count.size(); i++) {\n        count[i] += count[i - 1];\n    }\n    for (int i = myList.size() - 1; i >= 0; i--) {\n        result.insert(result.begin() + count[myList[i]] - 1, myList[i]);\n        count[myList[i]]--;\n    }\n    return result;\n}"}
{"task_id": "MBCPP/55", "language": "cpp", "completion": "    return a * pow(r, n-1);\n}\n"}
{"task_id": "MBCPP/56", "language": "cpp", "completion": "    int rev = 0;\n    while(n>0){\n        rev = rev*10 + n%10;\n        n /= 10;\n    }\n    return (rev == n+1);\n}\n"}
{"task_id": "MBCPP/57", "language": "cpp", "completion": "    int ans = 0;\n    for(int i = 0; i < n; i++){\n        int num = 0;\n        for(int j = i; j < n; j++){\n            num = num * 10 + arr[j];\n        }\n        ans = max(ans, num);\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/58", "language": "cpp", "completion": "    return (x ^ y) < 0;\n}\n"}
{"task_id": "MBCPP/59", "language": "cpp", "completion": "    int i = 1;\n    while(true){\n        if(i*i*2+i*2 == n) return n;\n        i++;\n    }\n    return -1;\n}\n"}
{"task_id": "MBCPP/60", "language": "cpp", "completion": "    int ans = 0;\n    for(int i = 0; i < n; i++){\n        int j = i;\n        int diff = arr[i];\n        while(j < n && diff <= arr[j]){\n            diff = max(diff, arr[j]);\n            j++;\n        }\n        ans = max(ans, j - i);\n    }\n    return ans;\n}"}
{"task_id": "MBCPP/61", "language": "cpp", "completion": "    int count = 0;\n    for(int i = 0; i < s.length(); i++){\n        int sum = 0;\n        for(int j = i; j < s.length(); j++){\n            sum += s[j] - '0';\n            if(sum == j - i + 1)\n                count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "MBCPP/62", "language": "cpp", "completion": "    return *min_element(xs.begin(), xs.end());\n}\n"}
{"task_id": "MBCPP/63", "language": "cpp", "completion": "    int maxDiff = 0;\n    for(int i=0; i<testList.size(); i++){\n        for(int j=i+1; j<testList.size(); j++){\n            int diff = abs(testList[i][0] - testList[j][0]) + abs(testList[i][1] - testList[j][1]);\n            if(diff > maxDiff)\n                maxDiff = diff;\n        }\n    }\n    return maxDiff;\n}"}
{"task_id": "MBCPP/66", "language": "cpp", "completion": "    int count = 0;\n    for(int i = 0; i < list.size(); i++){\n        if(list[i] > 0){\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "MBCPP/68", "language": "cpp", "completion": "    int n = a.size();\n    for(int i=0; i<n-1; i++){\n        if(a[i] > a[i+1]) return false;\n    }\n    return true;\n}"}
{"task_id": "MBCPP/69", "language": "cpp", "completion": "    return equal(s.begin(), s.end(), l.begin());\n}\n"}
{"task_id": "MBCPP/70", "language": "cpp", "completion": "    for(auto i:input){\n        if(i.size()!=k) return \"All tuples do not have same length\";\n    }\n    return \"All tuples have same length\";\n}\n"}
{"task_id": "MBCPP/71", "language": "cpp", "completion": "    int gap = nums.size();\n    bool swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = (gap * 10) / 13;\n        }\n        swapped = false;\n        for (int i = 0; i < nums.size() - gap; i++) {\n            if (nums[i] > nums[i + gap]) {\n                swap(nums[i], nums[i + gap]);\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}"}
{"task_id": "MBCPP/72", "language": "cpp", "completion": "    int sq = sqrt(n);\n    return (sq * sq == n);\n}\n"}
{"task_id": "MBCPP/73", "language": "cpp", "completion": "    vector<string> ans;\n    string pattern = \"\\\\s+|\\\\*+\";\n    regex rgx(pattern);\n    sregex_token_iterator it(text.begin(), text.end(), rgx, -1);\n    sregex_token_iterator reg;\n    while (it != reg) {\n        ans.push_back(*it);\n        it++;\n    }\n    return ans;\n}"}
{"task_id": "MBCPP/74", "language": "cpp", "completion": "    int n = colors.size();\n    int m = patterns.size();\n    if(n != m) return false;\n    for(int i = 0; i < n; i++){\n        if(colors[i] != patterns[i]) return false;\n    }\n    return true;\n}\n"}
{"task_id": "MBCPP/75", "language": "cpp", "completion": "    vector<vector<int>> ans;\n    for(auto i:testList){\n        bool flag=true;\n        for(auto j:i){\n            if(j%k!=0)\n                flag=false;\n        }\n        if(flag)\n            ans.push_back(i);\n    }\n    if(ans.size()==0)\n        return \"[]\";\n    string s=\"[\";\n    for(int i=0;i<ans.size();i++){\n        s+=to_string(ans[i][0])+\" \";\n        s+=to_string(ans[i][1])+\" \";\n        s+=to_string(ans[i][2])+\", \";\n    }\n    s.pop_back();\n    s.pop_back();\n    s.pop_back();\n    s.pop_back();\n    s+=\"]\";\n    return s;\n}"}
{"task_id": "MBCPP/76", "language": "cpp", "completion": "    return (m * n) * (m + n + 1) / 2;\n}"}
{"task_id": "MBCPP/77", "language": "cpp", "completion": "    int sum = 0;\n    while(n){\n        int last = n%10;\n        n/=10;\n        if(last%2==0) sum+=last;\n        else sum-=last;\n    }\n    return sum==0;\n}\n"}
{"task_id": "MBCPP/78", "language": "cpp", "completion": "    int count = 0;\n    for(int i = 1; i <= n; i++){\n        int count_set_bits = 0;\n        while(i){\n            if(i & 1)\n                count_set_bits++;\n            i >>= 1;\n        }\n        if(count_set_bits & 1)\n            count++;\n    }\n    return count;\n}"}
{"task_id": "MBCPP/79", "language": "cpp", "completion": "    return s.length()%2==1;\n}\n"}
{"task_id": "MBCPP/80", "language": "cpp", "completion": "  return (n * (n + 1) * (2 * n + 1)) / 6;\n}\n"}
{"task_id": "MBCPP/81", "language": "cpp", "completion": "    vector<vector<int>> ans;\n    for(int i=0;i<testTup1.size();i++){\n        vector<int> temp;\n        temp.push_back(testTup1[i]);\n        temp.push_back(testTup2[i]);\n        ans.push_back(temp);\n    }\n    return ans;\n}"}
{"task_id": "MBCPP/82", "language": "cpp", "completion": "  return (4.0/3.0)*3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172555859375*r*r*r;\n}\n"}
{"task_id": "MBCPP/83", "language": "cpp", "completion": "    string ans;\n    for(int i=0;i<strr.length();i++){\n        ans+=strr[i];\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/84", "language": "cpp", "completion": "    if(n==1) return 1;\n    if(n==2) return 1;\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1));\n}\n"}
{"task_id": "MBCPP/85", "language": "cpp", "completion": "  return 4*3.141592653589793*r*r;\n}\n"}
{"task_id": "MBCPP/86", "language": "cpp", "completion": "    return (n * (2 * n - 1)) / 2;\n}\n"}
{"task_id": "MBCPP/87", "language": "cpp", "completion": "    unordered_map<string, string> result;\n    for (auto it = dict1.begin(); it != dict1.end(); it++) {\n        result[it->first] = it->second;\n    }\n    for (auto it = dict2.begin(); it != dict2.end(); it++) {\n        result[it->first] = it->second;\n    }\n    for (auto it = dict3.begin(); it != dict3.end(); it++) {\n        result[it->first] = it->second;\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/88", "language": "cpp", "completion": "    unordered_map<int, int> map;\n    for(int i: list1)\n        map[i]++;\n    return map;\n}\n"}
{"task_id": "MBCPP/89", "language": "cpp", "completion": "    return n-1;\n}"}
{"task_id": "MBCPP/90", "language": "cpp", "completion": "    int max = 0;\n    for(int i = 0; i < list1.size(); i++){\n        if(list1[i].size() > max)\n            max = list1[i].size();\n    }\n    return max;\n}\n"}
{"task_id": "MBCPP/91", "language": "cpp", "completion": "    for(int i=0; i<str1.size(); i++){\n        if(str1[i].find(subStr) != string::npos)\n            return true;\n    }\n    return false;\n}\n"}
{"task_id": "MBCPP/92", "language": "cpp", "completion": "    int i = 0;\n    while(i < n.length()-1){\n        if(n[i] == n[i+1]){\n            return false;\n        }\n        i++;\n    }\n    return true;\n}\n"}
{"task_id": "MBCPP/93", "language": "cpp", "completion": "    return (b == 0) ? 1 : a * power(a, b - 1);\n}\n"}
{"task_id": "MBCPP/95", "language": "cpp", "completion": "    int n = lst.size();\n    int m = lst[0].size();\n    int ans = INT_MAX;\n    for(int i = 0; i < n; i++){\n        unordered_set<int> s;\n        for(int j = 0; j < m; j++){\n            s.insert(lst[i][j]);\n        }\n        if(s.size() == m){\n            ans = min(ans, m);\n        }\n    }\n    return ans;\n}"}
{"task_id": "MBCPP/96", "language": "cpp", "completion": "    int count = 0;\n    for(int i = 1; i <= n; i++){\n        if(n % i == 0)\n            count++;\n    }\n    return count;\n}\n"}
{"task_id": "MBCPP/97", "language": "cpp", "completion": "    unordered_map<int, int> m;\n    for(auto v: list1) {\n        for(auto x: v) {\n            m[x]++;\n        }\n    }\n    return m;\n}"}
{"task_id": "MBCPP/98", "language": "cpp", "completion": "    double sum = 1;\n    for(int i = 0; i < numbers.size(); i++){\n        sum *= numbers[i];\n    }\n    return sum/numbers.size();\n}\n"}
{"task_id": "MBCPP/99", "language": "cpp", "completion": "    string s;\n    while(n){\n        s.push_back(n%2+'0');\n        n/=2;\n    }\n    reverse(s.begin(),s.end());\n    return s;\n}"}
{"task_id": "MBCPP/100", "language": "cpp", "completion": "    string s = to_string(num);\n    int n = s.size();\n    int i = 0;\n    while(i < n/2) {\n        if(s[i] != s[n-i-1]) {\n            s[i] = s[n-i-1];\n            break;\n        }\n        i++;\n    }\n    if(i == n/2) {\n        s.insert(s.begin(), '1');\n    }\n    return stoi(s);\n}"}
{"task_id": "MBCPP/101", "language": "cpp", "completion": "    sort(arr.begin(), arr.end());\n    return arr[k-1];\n}"}
{"task_id": "MBCPP/102", "language": "cpp", "completion": "    string ans = \"\";\n    for(int i = 0; i < word.length(); i++){\n        if(word[i] == '_'){\n            ans += toupper(word[i+1]);\n            i++;\n        }\n        else{\n            ans += word[i];\n        }\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/103", "language": "cpp", "completion": "    int ans = 0;\n    for(int i = 1; i <= n; i++){\n        ans += (i * (i - 1)) / 2;\n    }\n    return ans - m;\n}\n"}
{"task_id": "MBCPP/104", "language": "cpp", "completion": "    for(auto &v: inputList)\n        sort(v.begin(), v.end(), [](string a, string b){return a < b;});\n    return inputList;\n}\n"}
{"task_id": "MBCPP/105", "language": "cpp", "completion": "    int count = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] == true){\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "MBCPP/106", "language": "cpp", "completion": "    vector<int> result;\n    for(int i=0;i<testTup.size();i++){\n        result.push_back(testTup[i]);\n    }\n    for(int i=0;i<testList.size();i++){\n        result.push_back(testList[i]);\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/107", "language": "cpp", "completion": "    int ans = 0;\n    for(int i = l; i <= r; i++){\n        if(to_string(i, 16).length() == to_string(i).length()){\n            ans++;\n        }\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/108", "language": "cpp", "completion": "    priority_queue<int, vector<int>, greater<int>> pq;\n    for (int i : num1) pq.push(i);\n    for (int i : num2) pq.push(i);\n    for (int i : num3) pq.push(i);\n    vector<int> ans;\n    while (!pq.empty()) {\n        ans.push_back(pq.top());\n        pq.pop();\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/109", "language": "cpp", "completion": "    int count = 0;\n    for(int i = 0; i < n; i++){\n        if(s[i] == '1'){\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "MBCPP/110", "language": "cpp", "completion": "    vector<vector<int>> ans;\n    int n = testList.size();\n    for(int i=0;i<n;i++){\n        if(testList[i][0]>strtVal){\n            ans.push_back({strtVal,testList[i][0]});\n        }\n        if(testList[i][1]<stopVal){\n            ans.push_back({testList[i][1],stopVal});\n        }\n    }\n    if(testList[n-1][1]<stopVal){\n        ans.push_back({testList[n-1][1],stopVal});\n    }\n    if(testList[0][0]>strtVal){\n        ans.push_back({strtVal,testList[0][0]});\n    }\n    return ans;\n}"}
{"task_id": "MBCPP/111", "language": "cpp", "completion": "    unordered_set<int> s;\n    for(auto i:nestedlist){\n        for(auto j:i){\n            s.insert(j);\n        }\n    }\n    vector<int> ans;\n    for(auto i:s){\n        int cnt=0;\n        for(auto j:nestedlist){\n            if(find(j.begin(),j.end(),i)!=j.end()){\n                cnt++;\n            }\n        }\n        if(cnt==nestedlist.size()){\n            ans.push_back(i);\n        }\n    }\n    return ans;\n}"}
{"task_id": "MBCPP/112", "language": "cpp", "completion": "    return 2 * (diameter + height);\n}\n"}
{"task_id": "MBCPP/113", "language": "cpp", "completion": "    return text.find_first_not_of(\"0123456789\") == string::npos;\n}\n"}
{"task_id": "MBCPP/114", "language": "cpp", "completion": "    vector<vector<int>> ans;\n    for(auto i:testList){\n        vector<int> temp;\n        for(auto j:i){\n            int count=0;\n            for(auto k:testList){\n                if(find(k.begin(),k.end(),j)!=k.end())\n                    count++;\n            }\n            temp.push_back(count);\n        }\n        ans.push_back(temp);\n    }\n    return to_string(ans);\n}\n"}
{"task_id": "MBCPP/116", "language": "cpp", "completion": "    int ans = 0;\n    for(int i = 0; i < nums.size(); i++){\n        ans += nums[i] * pow(10, i);\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/117", "language": "cpp", "completion": "    vector<vector<float>> ans;\n    for(auto i:testList){\n        vector<float> temp;\n        for(auto j:i){\n            temp.push_back(stof(j));\n        }\n        ans.push_back(temp);\n    }\n    return \"[\"+to_string(ans)+\"]\";\n}\n"}
{"task_id": "MBCPP/118", "language": "cpp", "completion": "    vector<string> ans;\n    stringstream ss(str);\n    string temp;\n    while(getline(ss, temp, ' '))\n        ans.push_back(temp);\n    return ans;\n}\n"}
{"task_id": "MBCPP/119", "language": "cpp", "completion": "    int i = 0;\n    while(i < n-1){\n        if(arr[i] == arr[i+1]){\n            i += 2;\n        }\n        else{\n            return arr[i];\n        }\n    }\n    return arr[n-1];\n}"}
{"task_id": "MBCPP/120", "language": "cpp", "completion": "    int max = INT_MIN;\n    for(int i=0; i<list1.size(); i++){\n        for(int j=i+1; j<list1.size(); j++){\n            max = max < (list1[i][0] * list1[j][1]) ? (list1[i][0] * list1[j][1]) : max;\n            max = max < (list1[i][1] * list1[j][0]) ? (list1[i][1] * list1[j][0]) : max;\n        }\n    }\n    return max;\n}"}
{"task_id": "MBCPP/121", "language": "cpp", "completion": "    int i, j, k;\n    for(i=0; i<a.size(); i++){\n        for(j=i+1; j<a.size(); j++){\n            for(k=j+1; k<a.size(); k++){\n                if(a[i]+a[j]+a[k]==sum){\n                    count++;\n                }\n            }\n        }\n    }\n    if(count>=3){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "MBCPP/122", "language": "cpp", "completion": "    return n*(n+1)/2;\n}\n"}
{"task_id": "MBCPP/123", "language": "cpp", "completion": "  int sum = 0;\n  for (int i = 1; i <= limit; i++) {\n    int sum1 = 0;\n    for (int j = 1; j < i; j++) {\n      if (i % j == 0) {\n        sum1 += j;\n      }\n    }\n    int sum2 = 0;\n    for (int k = 1; k < sum1; k++) {\n      if (sum1 % k == 0) {\n        sum2 += k;\n      }\n    }\n    if (sum1 != i && sum1 == sum2 && sum1 != sum2) {\n      sum += i;\n    }\n  }\n  return sum;\n}\n"}
{"task_id": "MBCPP/125", "language": "cpp", "completion": "    int count[2] = {0, 0};\n    int max = 0;\n    for(int i = 0; i < n; i++){\n        if(str[i] == '0'){\n            count[0]++;\n        }\n        else{\n            count[1]++;\n        }\n        max = max > count[0] - count[1] ? max : count[0] - count[1];\n    }\n    return max;\n}"}
{"task_id": "MBCPP/126", "language": "cpp", "completion": "    int sum = 0;\n    for(int i = 1; i <= min(a, b); i++){\n        if(a%i == 0 && b%i == 0){\n            sum += i;\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "MBCPP/127", "language": "cpp", "completion": "    return x*y;\n}\n\n"}
{"task_id": "MBCPP/128", "language": "cpp", "completion": "    vector<string> ans;\n    stringstream ss(str);\n    string word;\n    while(ss >> word){\n        if(word.length() > n) ans.push_back(word);\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/129", "language": "cpp", "completion": "    int sum = 0;\n    int n = myMatrix.size();\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < n; j++){\n            sum += myMatrix[i][j];\n        }\n    }\n    if(sum != n * (n * n + 1) / 2) return false;\n    for(int i = 0; i < n; i++){\n        int sum = 0;\n        for(int j = 0; j < n; j++){\n            sum += myMatrix[i][j];\n        }\n        if(sum != n * (n + 1) / 2) return false;\n    }\n    for(int i = 0; i < n; i++){\n        int sum = 0;\n        for(int j = 0; j < n; j++){\n            sum += myMatrix[j][i];\n        }\n        if(sum != n * (n + 1) / 2) return false;\n    }\n    return true;\n}\n"}
{"task_id": "MBCPP/130", "language": "cpp", "completion": "    unordered_map<int, int> m;\n    for(int i: nums) m[i]++;\n    int max = 0;\n    vector<int> ans;\n    for(auto it: m) {\n        if(it.second > max) {\n            max = it.second;\n            ans.clear();\n            ans.push_back(it.first);\n        }\n        else if(it.second == max) ans.push_back(it.first);\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/131", "language": "cpp", "completion": "    // your code goes here\n    string vowels = \"aeiouAEIOU\";\n    int n = str1.length();\n    string ans = \"\";\n    for(int i = 0; i < n; i++){\n        if(vowels.find(str1[i]) != string::npos){\n            ans += str1[n-1];\n            n--;\n        }\n        else{\n            ans += str1[i];\n        }\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/132", "language": "cpp", "completion": "    string ans;\n    for(int i=0;i<tup1.size();i++){\n        ans+=tup1[i];\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/133", "language": "cpp", "completion": "    return accumulate(nums.begin(), nums.end(), 0, [](int a, int b){return a + (b < 0 ? b : 0);});\n}\n"}
{"task_id": "MBCPP/134", "language": "cpp", "completion": "    for(int i=0;i<p;i++){\n        arr.push_back(arr[i]);\n    }\n    if(arr[arr.size()-1]%2==0)\n        return \"EVEN\";\n    else\n        return \"ODD\";\n}\n"}
{"task_id": "MBCPP/135", "language": "cpp", "completion": "    return n * (2 * n - 1);\n}\n"}
{"task_id": "MBCPP/136", "language": "cpp", "completion": "    return units * 0.09;\n}\n"}
{"task_id": "MBCPP/137", "language": "cpp", "completion": "    int count = 0;\n    for(int i = 0; i < nums.size(); i++){\n        if(nums[i] == 0)\n            count++;\n    }\n    return (double)count/nums.size();\n}\n"}
{"task_id": "MBCPP/138", "language": "cpp", "completion": "    int sum = 0;\n    while(n){\n        if(n&1) sum++;\n        n >>= 1;\n    }\n    return sum%2 == 0;\n}"}
{"task_id": "MBCPP/139", "language": "cpp", "completion": "  return 2*3.141592653589793*r;\n}\n"}
{"task_id": "MBCPP/140", "language": "cpp", "completion": "    vector<int> ans;\n    for(auto i:testList){\n        for(auto j:i){\n            if(find(ans.begin(), ans.end(), j) == ans.end()){\n                ans.push_back(j);\n            }\n        }\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/141", "language": "cpp", "completion": "    vector<int> ans;\n    for(int i = nums.size()-1; i >= 0; i--){\n        int max_index = 0;\n        for(int j = 1; j <= i; j++){\n            if(nums[j] > nums[max_index]){\n                max_index = j;\n            }\n        }\n        if(max_index != i){\n            ans.push_back(max_index+1);\n            ans.push_back(i+1);\n            reverse(nums.begin(), nums.begin()+max_index+1);\n            reverse(nums.begin(), nums.begin()+i+1);\n        }\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/142", "language": "cpp", "completion": "    int count = 0;\n    for(int i = 0; i < list1.size(); i++){\n        if(list1[i] == list2[i] && list1[i] == list3[i]){\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "MBCPP/144", "language": "cpp", "completion": "    int sum = 0;\n    for(int i = 0; i < n; i++){\n        for(int j = i+1; j < n; j++){\n            sum += abs(arr[i] - arr[j]);\n        }\n    }\n    return sum;\n}"}
{"task_id": "MBCPP/145", "language": "cpp", "completion": "    int ans = 0;\n    for(int i=0;i<n;i++){\n        for(int j=i+1;j<n;j++){\n            ans = max(ans, abs(arr[i]-arr[j]));\n        }\n    }\n    return ans;\n}"}
{"task_id": "MBCPP/146", "language": "cpp", "completion": "    int sum = 0;\n    for(int i = 0; i < str1.length(); i++){\n        sum += str1[i];\n    }\n    return sum;\n}\n"}
{"task_id": "MBCPP/147", "language": "cpp", "completion": "    int dp[m][n];\n    dp[0][0] = tri[0][0];\n    for(int i=1; i<m; i++){\n        dp[i][0] = dp[i-1][0] + tri[i][0];\n    }\n    for(int i=1; i<n; i++){\n        dp[0][i] = dp[0][i-1] + tri[0][i];\n    }\n    for(int i=1; i<m; i++){\n        for(int j=1; j<n; j++){\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + tri[i][j];\n        }\n    }\n    return dp[m-1][n-1];\n}"}
{"task_id": "MBCPP/148", "language": "cpp", "completion": "    int sum = 0;\n    while(n > 0){\n        sum += n%10;\n        n /= 10;\n    }\n    return sum;\n}\n"}
{"task_id": "MBCPP/149", "language": "cpp", "completion": "    int dp[n+1];\n    memset(dp, 0, sizeof(dp));\n    for(int i=0; i<n; i++){\n        for(int j=i; j>=0; j--){\n            if(arr[i]-arr[j]==1){\n                dp[i] = max(dp[i], dp[j]+1);\n            }\n        }\n    }\n    int ans = 0;\n    for(int i=0; i<n; i++){\n        ans = max(ans, dp[i]);\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/150", "language": "cpp", "completion": "    return (a == b || b == c || c == a);\n}\n"}
{"task_id": "MBCPP/151", "language": "cpp", "completion": "    return __gcd(x, y) == 1;\n}\n"}
{"task_id": "MBCPP/152", "language": "cpp", "completion": "    // Write your code here\n    return mergeSortHelper(x, 0, x.size() - 1);\n}\n\nvector<int> mergeSortHelper(vector<int> &x, int l, int r) {\n    if(l >= r) return x;\n    int mid = l + (r - l) / 2;\n    vector<int> left = mergeSortHelper(x, l, mid);\n    vector<int> right = mergeSortHelper(x, mid + 1, r);\n    return merge(left, right);\n}\n\nvector<int> merge(vector<int> &left, vector<int> &right) {\n    vector<int> res;\n    int i = 0, j = 0;\n    while(i < left.size() and j < right.size()) {\n        if(left[i] < right[j]) {\n            res.push_back(left[i++]);\n        } else {\n            res.push_back(right[j++]);\n        }\n    }\n    while(i < left.size()) res.push_back(left[i++]);\n    while(j < right.size()) res.push_back(right[j++]);\n    return res;\n}\n"}
{"task_id": "MBCPP/153", "language": "cpp", "completion": "    vector<double> ans;\n    ans.push_back(-b/(2*a));\n    ans.push_back(c/(a*ans[0]*ans[0]));\n    return ans;\n}\n"}
{"task_id": "MBCPP/154", "language": "cpp", "completion": "    vector<int> ans;\n    for(auto i: nums)\n        ans.push_back(i[n]);\n    return ans;\n}\n"}
{"task_id": "MBCPP/155", "language": "cpp", "completion": "    return n ^ 0xAAAAAAAA;\n}\n"}
{"task_id": "MBCPP/156", "language": "cpp", "completion": "    vector<vector<int>> tupleInt;\n    for(auto i:tupleStr){\n        vector<int> temp;\n        for(auto j:i){\n            temp.push_back(stoi(j));\n        }\n        tupleInt.push_back(temp);\n    }\n    return tupleInt;\n}"}
{"task_id": "MBCPP/158", "language": "cpp", "completion": "    int ans = 0;\n    for(int i = 0; i < n; i++){\n        ans += abs(arr[i] - k);\n    }\n    return ans;\n}"}
{"task_id": "MBCPP/159", "language": "cpp", "completion": "    if(month == \"January\" || month == \"December\"){\n        if(days >= 21 && days <= 31) return \"winter\";\n        else return \"spring\";\n    }\n    else if(month == \"March\" || month == \"April\" || month == \"May\"){\n        if(days >= 21 && days <= 31) return \"spring\";\n        else return \"summer\";\n    }\n    else if(month == \"June\" || month == \"July\" || month == \"August\"){\n        if(days >= 21 && days <= 31) return \"summer\";\n        else return \"autumn\";\n    }\n    else if(month == \"September\" || month == \"October\" || month == \"November\"){\n        if(days >= 21 && days <= 31) return \"autumn\";\n        else return \"winter\";\n    }\n    else return \"spring\";\n}\n"}
{"task_id": "MBCPP/161", "language": "cpp", "completion": "    vector<int> ans;\n    for(int i=0;i<list1.size();i++){\n        if(find(list2.begin(),list2.end(),list1[i])==list2.end())\n            ans.push_back(list1[i]);\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/162", "language": "cpp", "completion": "  int sum = 0;\n  for (int i = n; i >= 1; i -= 2) {\n    sum += i;\n  }\n  return sum;\n}\n"}
{"task_id": "MBCPP/163", "language": "cpp", "completion": "  return (s * l) / 2;\n}\n"}
{"task_id": "MBCPP/164", "language": "cpp", "completion": "    int sum1 = 0, sum2 = 0;\n    for(int i = 1; i <= num1; i++){\n        if(num1 % i == 0) sum1 += i;\n    }\n    for(int i = 1; i <= num2; i++){\n        if(num2 % i == 0) sum2 += i;\n    }\n    return sum1 == sum2;\n}\n"}
{"task_id": "MBCPP/165", "language": "cpp", "completion": "    int count = 0;\n    for(int i = 0; i < str1.length(); i++){\n        if(str1[i] == 'a' || str1[i] == 'e' || str1[i] == 'i' || str1[i] == 'o' || str1[i] == 'u'){\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "MBCPP/166", "language": "cpp", "completion": "    int ans = 0;\n    for(int i = 0; i < a.size(); i++){\n        for(int j = i + 1; j < a.size(); j++){\n            if((a[i] ^ a[j]) % 2 == 0)\n                ans++;\n        }\n    }\n    return ans;\n}"}
{"task_id": "MBCPP/167", "language": "cpp", "completion": "    return pow(2, ceil(log2(n)));\n}\n"}
{"task_id": "MBCPP/168", "language": "cpp", "completion": "    int count = 0;\n    for(int i = 0; i < a.size(); i++){\n        if(a[i] == x)\n            count++;\n    }\n    return count;\n}"}
{"task_id": "MBCPP/169", "language": "cpp", "completion": "    int a = 0, b = 1, c = 1, d = 2;\n    for (int i = 0; i < n; i++) {\n        int temp = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = temp;\n    }\n    return d;\n}\n"}
{"task_id": "MBCPP/170", "language": "cpp", "completion": "    int sum = 0;\n    for(int i = m; i <= n; i++)\n        sum += list1[i];\n    return sum;\n}"}
{"task_id": "MBCPP/171", "language": "cpp", "completion": "  return a * 5;\n}\n"}
{"task_id": "MBCPP/172", "language": "cpp", "completion": "    int count = 0;\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] == 's' && s[i+1] == 't' && s[i+2] == 'd'){\n            count++;\n            i += 2;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "MBCPP/173", "language": "cpp", "completion": "    string ans;\n    for(int i=0;i<text.length();i++){\n        if(isalnum(text[i])){\n            ans+=text[i];\n        }\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/175", "language": "cpp", "completion": "    stack<char> s;\n    for(char c: str1){\n        if(c == '(' || c == '[' || c == '{')\n            s.push(c);\n        else{\n            if(s.empty())\n                return false;\n            char top = s.top();\n            if(c == ')' && top != '(')\n                return false;\n            if(c == ']' && top != '[')\n                return false;\n            if(c == '}' && top != '{')\n                return false;\n            s.pop();\n        }\n    }\n    return s.empty();\n}\n"}
{"task_id": "MBCPP/176", "language": "cpp", "completion": "  return a+b+c;\n}\n"}
{"task_id": "MBCPP/177", "language": "cpp", "completion": "    vector<int> ans;\n    for(int i=l;i<=r;i++){\n        for(int j=i+1;j<=r;j++){\n            if(lcm(i,j)<=r){\n                ans.push_back(i);\n                ans.push_back(j);\n                return ans;\n            }\n        }\n    }\n    return ans;\n}"}
{"task_id": "MBCPP/178", "language": "cpp", "completion": "    for(auto &p: patterns)\n        if(text.find(p) != string::npos)\n            return \"Matched!\";\n    return \"Not Matched!\";\n}\n"}
{"task_id": "MBCPP/179", "language": "cpp", "completion": "    int sum = 0;\n    while(x>0){\n        sum += (x%10);\n        x /= 10;\n    }\n    return sum==10;\n}\n"}
{"task_id": "MBCPP/181", "language": "cpp", "completion": "    string ans = \"\";\n    for(int i = 0; i < arr[0].size(); i++){\n        for(int j = 1; j < n; j++){\n            if(arr[j][i] != arr[0][i]){\n                return ans;\n            }\n        }\n        ans += arr[0][i];\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/183", "language": "cpp", "completion": "    unordered_map<int, int> mp;\n    int ans = 0;\n    for(int i = 0; i < n; i++){\n        if(mp.find(arr[i]) != mp.end()){\n            ans += mp[arr[i]];\n        }\n        mp[arr[i] + k]++;\n    }\n    return ans;\n}"}
{"task_id": "MBCPP/184", "language": "cpp", "completion": "    for(int i=0;i<list.size();i++){\n        if(list[i]>num)\n            return true;\n    }\n    return false;\n}\n"}
{"task_id": "MBCPP/185", "language": "cpp", "completion": "    vector<double> ans;\n    ans.push_back(-b/(2*a));\n    ans.push_back(pow(b,2)/(4*a*c));\n    return ans;\n}\n"}
{"task_id": "MBCPP/186", "language": "cpp", "completion": "    for(string pattern: patterns){\n        if(regex_search(text, regex(pattern))){\n            return \"Matched!\";\n        }\n    }\n    return \"Not Matched!\";\n}\n"}
{"task_id": "MBCPP/187", "language": "cpp", "completion": "    vector<vector<int>> dp(m+1, vector<int>(n+1, 0));\n    \n    for(int i=1; i<=m; i++){\n        for(int j=1; j<=n; j++){\n            if(x[i-1] == y[j-1]){\n                dp[i][j] = 1 + dp[i-1][j-1];\n            }\n            else{\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]);\n            }\n        }\n    }\n    \n    return dp[m][n];\n}"}
{"task_id": "MBCPP/188", "language": "cpp", "completion": "    int sqrt = sqrt(n);\n    return sqrt * sqrt == n;\n}\n"}
{"task_id": "MBCPP/189", "language": "cpp", "completion": "    for(int i=0;i<n;i++){\n        if(arr[i]>0 && arr[i]<=n && arr[arr[i]-1]!=arr[i]){\n            swap(arr[i],arr[arr[i]-1]);\n            i--;\n        }\n    }\n    for(int i=0;i<n;i++){\n        if(arr[i]!=i+1) return i+1;\n    }\n    return n+1;\n}"}
{"task_id": "MBCPP/190", "language": "cpp", "completion": "    int count = 0;\n    for(int i = x1; i <= x2; i++)\n        for(int j = y1; j <= y2; j++)\n            if(i == (int)i && j == (int)j)\n                count++;\n    return count;\n}"}
{"task_id": "MBCPP/191", "language": "cpp", "completion": "    if(monthname3 == \"February\" || monthname3 == \"April\" || monthname3 == \"June\" || monthname3 == \"September\" || monthname3 == \"November\"){\n        return false;\n    }\n    else{\n        return true;\n    }\n}\n"}
{"task_id": "MBCPP/192", "language": "cpp", "completion": "    int count = 0;\n    for(int i = 0; i < str.length(); i++){\n        if(isdigit(str[i])){\n            count++;\n        }\n    }\n    for(int i = 0; i < str.length(); i++){\n        if(isalpha(str[i])){\n            count++;\n        }\n    }\n    if(count == 2){\n        return true;\n    }\n    return false;\n}\n"}
{"task_id": "MBCPP/193", "language": "cpp", "completion": "    vector<int> ans;\n    for(int i=0;i<testTup.size();i++){\n        if(find(ans.begin(),ans.end(),testTup[i])==ans.end()){\n            ans.push_back(testTup[i]);\n        }\n    }\n    return ans;\n}"}
{"task_id": "MBCPP/194", "language": "cpp", "completion": "    int ans = 0;\n    int base = 1;\n    while(n>0){\n        int last = n%10;\n        ans += last*base;\n        base *= 8;\n        n /= 10;\n    }\n    return ans;\n}"}
{"task_id": "MBCPP/195", "language": "cpp", "completion": "    int start = 0;\n    int end = n-1;\n    \n    while(start <= end){\n        int mid = start + (end - start)/2;\n        if(arr[mid] == x){\n            return mid;\n        }\n        else if(arr[mid] < x){\n            start = mid + 1;\n        }\n        else{\n            end = mid - 1;\n        }\n    }\n    return -1;\n}"}
{"task_id": "MBCPP/196", "language": "cpp", "completion": "    vector<vector<int>> ans;\n    for(auto i: testList){\n        if(i.size() != k) ans.push_back(i);\n    }\n    return ans;\n}"}
{"task_id": "MBCPP/197", "language": "cpp", "completion": "    vector<int> ans;\n    for(int i=0;i<testTup1.size();i++){\n        ans.push_back(pow(testTup1[i],testTup2[i]));\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/198", "language": "cpp", "completion": "  return 2 * sqrt(a * a * b * b / (a * a + b * b));\n}\n"}
{"task_id": "MBCPP/199", "language": "cpp", "completion": "    return pow(2, floor(log2(n)));\n}\n"}
{"task_id": "MBCPP/200", "language": "cpp", "completion": "    vector<int> ans;\n    int max = list1[0];\n    for(int i = 0; i < list1.size(); i++){\n        if(list1[i] > max){\n            max = list1[i];\n            ans.clear();\n            ans.push_back(i);\n        }\n        else if(list1[i] == max){\n            ans.push_back(i);\n        }\n    }\n    return ans;\n}"}
{"task_id": "MBCPP/201", "language": "cpp", "completion": "    return all_of(lst.begin(), lst.end(), [&](string s){return s == lst[0];});\n}\n"}
{"task_id": "MBCPP/202", "language": "cpp", "completion": "    string str=\"\";\n    for(int i=0;i<str1.length();i++){\n        if(str1[i]%2!=0)\n            str+=str1[i];\n    }\n    return str;\n}\n"}
{"task_id": "MBCPP/203", "language": "cpp", "completion": "    int count = 0;\n    while(n1 != 0 || n2 != 0){\n        if((n1 & 1) != (n2 & 1))\n            count++;\n        n1 >>= 1;\n        n2 >>= 1;\n    }\n    return count;\n}"}
{"task_id": "MBCPP/204", "language": "cpp", "completion": "    int count = 0;\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] == c[0]){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "MBCPP/205", "language": "cpp", "completion": "    vector<int> ans;\n    for(int i=0;i<testTup.size();i++){\n        ans.push_back(-testTup[i]);\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/206", "language": "cpp", "completion": "    vector<string> ans;\n    for(int i=0;i<testTup.size()-1;i++){\n        ans.push_back(testTup[i]+testTup[i+1]);\n    }\n    return ans;\n}"}
{"task_id": "MBCPP/207", "language": "cpp", "completion": "    int n = str.length();\n    int dp[n+1][n+1];\n    for(int i=0;i<=n;i++){\n        for(int j=0;j<=n;j++){\n            if(i==0 || j==0) dp[i][j] = 0;\n            else if(str[i-1] == str[j-1]) dp[i][j] = 1 + dp[i-1][j-1];\n            else dp[i][j] = max(dp[i-1][j], dp[i][j-1]);\n        }\n    }\n    return dp[n][n];\n}\n"}
{"task_id": "MBCPP/208", "language": "cpp", "completion": "    return regex_match(num, regex(\"^[0-9]+\\\\.[0-9]{2}$\"));\n}\n"}
{"task_id": "MBCPP/209", "language": "cpp", "completion": "    heap.push_back(a);\n    int i = heap.size() - 1;\n    while(i > 0 && heap[i] < heap[(i-1)/2]){\n        swap(heap[i], heap[(i-1)/2]);\n        i = (i-1)/2;\n    }\n    return heap;\n}"}
{"task_id": "MBCPP/210", "language": "cpp", "completion": "    return regex_match(str, regex(\"^[a-zA-Z0-9]+$\"));\n}\n"}
{"task_id": "MBCPP/211", "language": "cpp", "completion": "    int count = 0;\n    for(int i = 1; i <= n; i++){\n        int x = i;\n        int y = i;\n        int z = i;\n        int a = i;\n        int b = i;\n        int c = i;\n        int d = i;\n        int e = i;\n        int f = i;\n        int g = i;\n        int h = i;\n        int j = i;\n        int k = i;\n        int l = i;\n        int m = i;\n        int n = i;\n        int o = i;\n        int p = i;\n        int q = i;\n        int r = i;\n        int s = i;\n        int t = i;\n        int u = i;\n        int v = i;\n        int w = i;\n        int x = i;\n        int y = i;\n        int z = i;\n        int a = i;\n        int b = i;\n        int c = i;\n        int d = i;\n        int e = i;\n        int f = i;\n        int g = i;\n        int h = i;\n        int j = i;\n        int k = i;\n        int l = i;\n        int m"}
{"task_id": "MBCPP/212", "language": "cpp", "completion": "    int sum = 0;\n    for(int i = 1; i <= n; i++){\n        sum += pow(i, 4);\n    }\n    return sum;\n}"}
{"task_id": "MBCPP/213", "language": "cpp", "completion": "    vector<string> result;\n    for(int i=0;i<testTup1.size();i++){\n        result.push_back(testTup1[i]+testTup2[i]);\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/214", "language": "cpp", "completion": "  return radian * 180 / 3.141592653589793;\n}\n"}
{"task_id": "MBCPP/217", "language": "cpp", "completion": "    unordered_map<char, int> mp;\n    for(char c: str){\n        mp[c]++;\n    }\n    for(char c: str){\n        if(mp[c]>1) return c;\n    }\n    return '\\0';\n}\n"}
{"task_id": "MBCPP/218", "language": "cpp", "completion": "    return abs(a-b);\n}"}
{"task_id": "MBCPP/219", "language": "cpp", "completion": "    vector<int> ans;\n    sort(testTup.begin(), testTup.end());\n    for(int i=0; i<k; i++)\n        ans.push_back(testTup[i]);\n    for(int i=testTup.size()-1; i>=testTup.size()-k; i--)\n        ans.push_back(testTup[i]);\n    return ans;\n}\n"}
{"task_id": "MBCPP/220", "language": "cpp", "completion": "    string res = \"\";\n    int count = 0;\n    for(int i = 0; i < text.length(); i++){\n        if(text[i] == ' ' || text[i] == ',' || text[i] == '.'){\n            count++;\n            if(count <= n){\n                res += \":\";\n            }\n        }\n        else{\n            res += text[i];\n        }\n    }\n    return res;\n}\n"}
{"task_id": "MBCPP/221", "language": "cpp", "completion": "    for(int i=0;i<nums.size();i++){\n        if(nums[i]%2==0)\n            return nums[i];\n    }\n    return -1;\n}\n"}
{"task_id": "MBCPP/222", "language": "cpp", "completion": "    return all_of(testTuple.begin(), testTuple.end(), [&](int x) { return typeid(x) == typeid(testTuple[0]); });\n}\n"}
{"task_id": "MBCPP/223", "language": "cpp", "completion": "    int count = 0;\n    for(int i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    return count > n/2;\n}"}
{"task_id": "MBCPP/224", "language": "cpp", "completion": "    int count = 0;\n    while(n){\n        n = n & (n-1);\n        count++;\n    }\n    return count;\n}"}
{"task_id": "MBCPP/225", "language": "cpp", "completion": "    int mid = (low + high) / 2;\n    if (arr[mid] > arr[high])\n        return arr[high];\n    if (arr[low] > arr[mid])\n        return arr[low];\n    return arr[mid];\n}\n"}
{"task_id": "MBCPP/226", "language": "cpp", "completion": "    string ans = \"\";\n    for(int i = 0; i < str.length(); i++){\n        if(i%2 == 0) ans += str[i];\n    }\n    return ans;\n}"}
{"task_id": "MBCPP/227", "language": "cpp", "completion": "    return min(a, min(b, c));\n}"}
{"task_id": "MBCPP/228", "language": "cpp", "completion": "    return (n & ((1 << r) - 1)) == ((1 << l) - 1);\n}\n"}
{"task_id": "MBCPP/229", "language": "cpp", "completion": "    vector<int> ans;\n    for(int i=0;i<n;i++){\n        if(arr[i]<0) ans.push_back(arr[i]);\n    }\n    for(int i=0;i<n;i++){\n        if(arr[i]>=0) ans.push_back(arr[i]);\n    }\n    return ans;\n}"}
{"task_id": "MBCPP/230", "language": "cpp", "completion": "    int n = str1.length();\n    int count = 0;\n    for(int i = 0; i < n; i++){\n        if(str1[i] == ' '){\n            count++;\n        }\n    }\n    int new_len = n + count * chr.length();\n    string str2 = str1;\n    for(int i = n - 1; i >= 0; i--){\n        if(str1[i] == ' '){\n            str2.insert(i, chr);\n        }\n    }\n    return str2;\n}"}
{"task_id": "MBCPP/231", "language": "cpp", "completion": "    int dp[n+1][n+1];\n    for(int i=0;i<=n;i++){\n        for(int j=0;j<=i;j++){\n            if(j==0){\n                dp[i][j]=tri[i][j];\n            }\n            else if(j==i){\n                dp[i][j]=tri[i][j]+dp[i-1][j-1];\n            }\n            else{\n                dp[i][j]=tri[i][j]+max(dp[i-1][j],dp[i-1][j-1]);\n            }\n        }\n    }\n    return dp[n][n];\n}"}
{"task_id": "MBCPP/232", "language": "cpp", "completion": "    vector<int> ans;\n    sort(list1.begin(), list1.end(), greater<int>());\n    for(int i=0; i<n; i++)\n        ans.push_back(list1[i]);\n    return ans;\n}\n"}
{"task_id": "MBCPP/233", "language": "cpp", "completion": "  return 2 * 3.14 * r * r + 2 * 3.14 * r * h;\n}\n"}
{"task_id": "MBCPP/234", "language": "cpp", "completion": "  return l*l*l;\n}\n"}
{"task_id": "MBCPP/235", "language": "cpp", "completion": "    return n | (n >> 1);\n}\n"}
{"task_id": "MBCPP/236", "language": "cpp", "completion": "    if(n<k) return -1;\n    return (n*(n-1)*(n-2))/6;\n}"}
{"task_id": "MBCPP/238", "language": "cpp", "completion": "    int n = str.length();\n    int ans = 0;\n    for(int i = 0; i < n; i++){\n        for(int j = i; j < n; j++){\n            if(str[i] != str[j]){\n                ans++;\n            }\n        }\n    }\n    return ans;\n}"}
{"task_id": "MBCPP/239", "language": "cpp", "completion": "    return (m-1)*(m-2)*(m-3)*(m-4)*(m-5)*(m-6)*(m-7)*(m-8)*(m-9)*(m-10)*(m-11)*(m-12)*(m-13)*(m-14)*(m-15)*(m-16);\n}\n"}
{"task_id": "MBCPP/241", "language": "cpp", "completion": "    vector<vector<vector<string>>> arr(m, vector<vector<string>>(n, vector<string>(o, \"*\""}
{"task_id": "MBCPP/242", "language": "cpp", "completion": "    return str1.length();\n}\n"}
{"task_id": "MBCPP/244", "language": "cpp", "completion": "    return sqrt(n) == floor(sqrt(n)) ? (int)pow(sqrt(n) + 1, 2) : (int)pow(sqrt(n) + 1, 2);\n}"}
{"task_id": "MBCPP/245", "language": "cpp", "completion": "    int dp[n+1];\n    dp[0] = 0;\n    int max = INT_MIN;\n    for(int i=1; i<=n; i++){\n        dp[i] = max(arr[i-1], dp[i-1]+arr[i-1]);\n        max = max(max, dp[i]);\n    }\n    return max;\n}\n"}
{"task_id": "MBCPP/246", "language": "cpp", "completion": "  double x = number / 2.0;\n  while (abs(x * x - number) > 0.000000000000001) {\n    x = (x + number / x) / 2.0;\n  }\n  return x;\n}\n"}
{"task_id": "MBCPP/247", "language": "cpp", "completion": "    int n = str.length();\n    vector<vector<int>> dp(n, vector<int>(n, 0));\n    for (int i = 0; i < n; i++) {\n        dp[i][i] = 1;\n    }\n    for (int i = n - 1; i >= 0; i--) {\n        for (int j = i + 1; j < n; j++) {\n            if (str[i] == str[j]) {\n                dp[i][j] = dp[i + 1][j - 1] + 2;\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]);\n            }\n        }\n    }\n    return dp[0][n - 1];\n}\n"}
{"task_id": "MBCPP/248", "language": "cpp", "completion": "  return 1.0/n + 1.0/(n-1) + 1.0/(n-2) + 1.0/(n-3) + 1.0/(n-4) + 1.0/(n-5) + 1.0/(n-6);\n}\n"}
{"task_id": "MBCPP/249", "language": "cpp", "completion": "    vector<int> result;\n    for(int i=0; i<arrayNums1.size(); i++){\n        for(int j=0; j<arrayNums2.size(); j++){\n            if(arrayNums1[i] == arrayNums2[j]){\n                result.push_back(arrayNums1[i]);\n            }\n        }\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/250", "language": "cpp", "completion": "    return count(tup.begin(), tup.end(), x);\n}\n"}
{"task_id": "MBCPP/251", "language": "cpp", "completion": "    vector<string> ans;\n    for(int i=0;i<list.size();i++){\n        ans.push_back(element);\n        ans.push_back(list[i]);\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/252", "language": "cpp", "completion": "    vector<double> ans;\n    ans.push_back(numbers);\n    ans.push_back(0);\n    return ans;\n}\n"}
{"task_id": "MBCPP/253", "language": "cpp", "completion": "    int count = 0;\n    for(int i = 0; i < list1.size(); i++){\n        if(list1[i] == (int)list1[i]){\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "MBCPP/254", "language": "cpp", "completion": "    vector<string> ans;\n    for(int i=0; i<text.length(); i++){\n        if(text[i]=='a' || text[i]=='e'){\n            int j=i;\n            while(j<text.length() && text[j]!=' '){\n                ans.push_back(text.substr(i, j-i+1));\n                j++;\n            }\n        }\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/255", "language": "cpp", "completion": "    vector<vector<string>> ans;\n    vector<string> temp;\n    for(int i=0;i<n;i++)\n        temp.push_back(l[0]);\n    ans.push_back(temp);\n    for(int i=1;i<l.size();i++){\n        int size = ans.size();\n        for(int j=0;j<size;j++){\n            temp = ans[j];\n            temp.push_back(l[i]);\n            ans.push_back(temp);\n        }\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/256", "language": "cpp", "completion": "    int count = 0;\n    for(int i = 2; i < n; i++){\n        if(n%i == 0){\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "MBCPP/257", "language": "cpp", "completion": "    vector<int> v;\n    v.push_back(b);\n    v.push_back(a);\n    return v;\n}\n"}
{"task_id": "MBCPP/258", "language": "cpp", "completion": "    return count_if(arrayNums.begin(), arrayNums.end(), [](int x){return x%2;});\n}\n"}
{"task_id": "MBCPP/259", "language": "cpp", "completion": "    vector<vector<int>> ans;\n    for(int i=0;i<testTup1.size();i++){\n        vector<int> temp;\n        temp.push_back(max(testTup1[i][0],testTup2[i][0]));\n        temp.push_back(max(testTup1[i][1],testTup2[i][1]));\n        ans.push_back(temp);\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/260", "language": "cpp", "completion": "    int ans = 0;\n    for(int i = 1; i <= n; i++){\n        ans += 2 * (i - 1);\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/261", "language": "cpp", "completion": "    vector<int> ans;\n    for(int i=0;i<testTup1.size();i++){\n        ans.push_back(testTup1[i]/testTup2[i]);\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/263", "language": "cpp", "completion": "    unordered_map<string, int> result;\n    for (auto it = d1.begin(); it != d1.end(); it++) {\n        result[it->first] = it->second;\n    }\n    for (auto it = d2.begin(); it != d2.end(); it++) {\n        result[it->first] = it->second;\n    }\n    return result;\n}"}
{"task_id": "MBCPP/264", "language": "cpp", "completion": "  return hAge*7;\n}\n"}
{"task_id": "MBCPP/266", "language": "cpp", "completion": "  return 6*l*l;\n}\n"}
{"task_id": "MBCPP/267", "language": "cpp", "completion": "    int sum = 0;\n    for(int i = 1; i <= n; i++){\n        sum += (i*i);\n    }\n    return sum;\n}\n"}
{"task_id": "MBCPP/268", "language": "cpp", "completion": "  return n * (n + 1) / 2;\n}\n"}
{"task_id": "MBCPP/269", "language": "cpp", "completion": "    return k[0];\n}\n\n"}
{"task_id": "MBCPP/270", "language": "cpp", "completion": "    int sum = 0;\n    for(int i = 0; i < n; i += 2){\n        if(arr[i] % 2 == 0){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "MBCPP/271", "language": "cpp", "completion": "    int sum = 0;\n    for(int i = 2; i <= n; i++){\n        sum += pow(i, 5);\n    }\n    return sum;\n}"}
{"task_id": "MBCPP/273", "language": "cpp", "completion": "    vector<int> ans;\n    for(int i=0;i<testTup1.size();i++){\n        ans.push_back(testTup1[i]-testTup2[i]);\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/274", "language": "cpp", "completion": "    int sum = 0;\n    for(int i = 0; i < n; i += 2)\n        sum += binomialCoeff(n, i);\n    return sum;\n}\n"}
{"task_id": "MBCPP/275", "language": "cpp", "completion": "    int i = 0;\n    for(int j = 0; j < n; j++){\n        if(a[j] == m){\n            i = j;\n        }\n    }\n    return i;\n}"}
{"task_id": "MBCPP/276", "language": "cpp", "completion": "  return (3.141592653589793 * r * r * h);\n}\n"}
{"task_id": "MBCPP/277", "language": "cpp", "completion": "    unordered_map<string, int> res;\n    for (auto it = dict.begin(); it != dict.end(); it++) {\n        if (it->second >= n) {\n            res.insert({it->first, it->second});\n        }\n    }\n    return res;\n}\n"}
{"task_id": "MBCPP/279", "language": "cpp", "completion": "  return (n * (3 * n - 1)) / 2;\n}\n"}
{"task_id": "MBCPP/281", "language": "cpp", "completion": "    return (testList.size() == testList."}
{"task_id": "MBCPP/282", "language": "cpp", "completion": "    return map(nums1.begin(), nums1.end(), nums2.begin(), nums2.end(), [](int a, int b) { return a - b; });\n}\n"}
{"task_id": "MBCPP/283", "language": "cpp", "completion": "    int arr[10] = {0};\n    while(n){\n        arr[n%10]++;\n        n/=10;\n    }\n    for(int i=0;i<10;i++){\n        if(arr[i]>i) return false;\n    }\n    return true;\n}\n"}
{"task_id": "MBCPP/285", "language": "cpp", "completion": "  return text.find(\"abbb\") != string::npos ? \"Found a match!\" : \"Not matched!\";\n}\n"}
{"task_id": "MBCPP/286", "language": "cpp", "completion": "    int sum = 0;\n    for(int i = 0; i < n; i++){\n        sum += a[i];\n    }\n    int maxSum = sum;\n    for(int i = 0; i < n; i++){\n        int temp = 0;\n        for(int j = i; j < n; j++){\n            temp += a[j];\n            if(temp > maxSum){\n                maxSum = temp;\n            }\n        }\n    }\n    return maxSum * k;\n}\n"}
{"task_id": "MBCPP/287", "language": "cpp", "completion": "    int sum = 0;\n    for(int i = 0; i < n; i++){\n        sum += (i * i);\n    }\n    return sum;\n}\n"}
{"task_id": "MBCPP/288", "language": "cpp", "completion": "    int ans = 0;\n    for(int i = 0; i < n; i++){\n        if(arr[i] % p == 1) ans++;\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/289", "language": "cpp", "completion": "    return (n/2) + (n%2);\n}\n"}
{"task_id": "MBCPP/291", "language": "cpp", "completion": "    int dp[n+1][k+1];\n    for(int i=0;i<=n;i++){\n        for(int j=0;j<=k;j++){\n            if(i==0 || j==0){\n                dp[i][j]=0;\n            }\n            else if(i==1){\n                dp[i][j]=j;\n            }\n            else{\n                dp[i][j]=dp[i-1][j]+dp[i-1][j-1];\n            }\n        }\n    }\n    return dp[n][k];\n}"}
{"task_id": "MBCPP/292", "language": "cpp", "completion": "    return n/m;\n}"}
{"task_id": "MBCPP/295", "language": "cpp", "completion": "  int sum = 0;\n  for (int i = 1; i <= number; i++) {\n    if (number % i == 0) {\n      sum += i;\n    }\n  }\n  return sum;\n}\n"}
{"task_id": "MBCPP/296", "language": "cpp", "completion": "    int inv = 0;\n    for(int i = 0; i < n; i++){\n        for(int j = i+1; j < n; j++){\n            if(arr[i] > arr[j]){\n                inv++;\n            }\n        }\n    }\n    return inv;\n}"}
{"task_id": "MBCPP/297", "language": "cpp", "completion": "    vector<int> ans;\n    for(auto i:list1){\n        ans.insert(ans.end(), i.begin(), i.end());\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/300", "language": "cpp", "completion": "    return pow(2, n) * (pow(2, n) - 1) / 2;\n}\n"}
{"task_id": "MBCPP/302", "language": "cpp", "completion": "    int count = 0;\n    while(n){\n        n = n & (n-1);\n        count++;\n    }\n    return count;\n}\n"}
{"task_id": "MBCPP/303", "language": "cpp", "completion": "    int count1 = 0, count2 = 0;\n    for(int i = 0; i < n; i++){\n        for(int j = i+1; j < n; j++){\n            if(a[i] > a[j]){\n                count1++;\n            }\n        }\n    }\n    for(int i = 0; i < n; i++){\n        for(int j = i+1; j < n; j++){\n            if(a[i] < a[j]){\n                count2++;\n            }\n        }\n    }\n    if(count1 == count2){\n        return true;\n    }\n    return false;\n}"}
{"task_id": "MBCPP/304", "language": "cpp", "completion": "    for(int i=0;i<rotations;i++){\n        int n=arr.size();\n        int start=ranges[i][0];\n        int end=ranges[i][1];\n        vector<int> temp;\n        for(int j=start;j<=end;j++){\n            temp.push_back(arr[j]);\n        }\n        for(int j=start;j<=end;j++){\n            arr[j]=temp[j-start];\n        }\n    }\n    return arr[index];\n}\n"}
{"task_id": "MBCPP/305", "language": "cpp", "completion": "    vector<string> ans;\n    for(string word: words){\n        if(word[0] == 'p') ans.push_back(word);\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/306", "language": "cpp", "completion": "    int dp[n+1];\n    dp[0] = 0;\n    int max = INT_MIN;\n    for(int i=1; i<=n; i++){\n        dp[i] = max(a[i-1], dp[i-1]);\n        if(i >= index){\n            max = max(max, dp[i] + a[k]);\n        }\n    }\n    return max;\n}\n"}
{"task_id": "MBCPP/308", "language": "cpp", "completion": "    vector<int> ans;\n    for(int i=0;i<n;i++){\n        ans.push_back(nums1[i]*nums2[i]);\n    }\n    sort(ans.begin(),ans.end(),greater<int>());\n    return ans;\n}\n"}
{"task_id": "MBCPP/309", "language": "cpp", "completion": "    return max(a, b);\n}\n"}
{"task_id": "MBCPP/310", "language": "cpp", "completion": "    vector<string> ans;\n    for(char c: str1)\n        ans.push_back(string(1, c));\n    return ans;\n}\n"}
{"task_id": "MBCPP/311", "language": "cpp", "completion": "    return n | (n + 1);\n}\n"}
{"task_id": "MBCPP/312", "language": "cpp", "completion": "  return (1.0/3.0)*M_PI*pow(r, 2)*h;\n}\n"}
{"task_id": "MBCPP/314", "language": "cpp", "completion": "    int m = grid.size();\n    int dp[m][n];\n    for(int i=0;i<m;i++){\n        for(int j=0;j<n;j++){\n            if(i==0 || j==0){\n                dp[i][j] = grid[i][j];\n            }\n            else{\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j];\n            }\n        }\n    }\n    int ans = INT_MIN;\n    for(int i=0;i<n;i++){\n        ans = max(ans, dp[m-1][i]);\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/315", "language": "cpp", "completion": "    int n = str.length();\n    int max = 0;\n    string ans = \"-1\";\n    for(int i=0;i<n;i++){\n        if(str[i]==' '){\n            if(max<i-max){\n                max = i-max;\n                ans = str.substr(max,i-max);\n            }\n        }\n    }\n    if(max==0){\n        return ans = \"-1\";\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/316", "language": "cpp", "completion": "    int n = a.size();\n    int i = n-1;\n    while(i>=0 && a[i]!=x) i--;\n    return i;\n}"}
{"task_id": "MBCPP/318", "language": "cpp", "completion": "    return (s*(s-1)*(s-2))/6;\n}\n"}
{"task_id": "MBCPP/319", "language": "cpp", "completion": "    vector<string> ans;\n    regex reg(\"\\\\w{5}\");\n    sregex_iterator it(text.begin(), text.end(), reg);\n    sregex_iterator end;\n    while(it!=end){\n        ans.push_back(it->str());\n        it++;\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/320", "language": "cpp", "completion": "    int sum = 0;\n    for(int i = 1; i <= n; i++)\n        sum += i;\n    return (pow(sum, 2) - (sum * (sum + 1) / 2));\n}"}
{"task_id": "MBCPP/321", "language": "cpp", "completion": "    string ans = \"\";\n    for(int i = 0; i < s.length(); i++){\n        ans += s[i];\n        if(i%2 == 0){\n            ans += s[i];\n        }\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/322", "language": "cpp", "completion": "    vector<int> ans;\n    int min = list1[0];\n    for(int i = 0; i < list1.size(); i++){\n        if(list1[i] < min){\n            min = list1[i];\n            ans.clear();\n            ans.push_back(i);\n        }\n        else if(list1[i] == min){\n            ans.push_back(i);\n        }\n    }\n    return ans;\n}"}
{"task_id": "MBCPP/323", "language": "cpp", "completion": "    vector<int> ans;\n    for(int i=0;i<n;i++){\n        if(arr[i]<0){\n            ans.push_back(arr[i]);\n        }\n        else{\n            ans.insert(ans.begin(),arr[i]);\n        }\n    }\n    return ans;\n}"}
{"task_id": "MBCPP/324", "language": "cpp", "completion": "    vector<int> result;\n    int sum = 0;\n    for(int i = 0; i < testTuple.size(); i += 2){\n        sum += testTuple[i];\n    }\n    result.push_back(sum);\n    sum = 0;\n    for(int i = 1; i < testTuple.size(); i += 2){\n        sum += testTuple[i];\n    }\n    result.push_back(sum);\n    return result;\n}\n"}
{"task_id": "MBCPP/325", "language": "cpp", "completion": "    int ans = 0;\n    for(int i = 1; i*i <= n; i++){\n        ans += n/i;\n    }\n    return ans;\n}"}
{"task_id": "MBCPP/326", "language": "cpp", "completion": "    unordered_map<string, int> map;\n    for(string s: testList){\n        istringstream iss(s);\n        string word;\n        while(iss >> word){\n            map[word]++;\n        }\n    }\n    int max = 0;\n    string ans;\n    for(auto it = map.begin(); it != map.end(); it++){\n        if(it->second > max){\n            max = it->second;\n            ans = it->first;\n        }\n    }\n    return ans;\n}"}
{"task_id": "MBCPP/327", "language": "cpp", "completion": "    return (x == y || x == z || y == z);\n}\n"}
{"task_id": "MBCPP/328", "language": "cpp", "completion": "    vector<int> list2;\n    for(int i=m; i<list1.size(); i++){\n        list2.push_back(list1[i]);\n    }\n    for(int i=0; i<n; i++){\n        list2.push_back(list1[i]);\n    }\n    return list2;\n}"}
{"task_id": "MBCPP/329", "language": "cpp", "completion": "    int count = 0;\n    for(int i = 0; i < list.size(); i++){\n        if(list[i] < 0){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "MBCPP/330", "language": "cpp", "completion": "    vector<string> ans;\n    regex reg(\"\\\\b\\\\w{3,5}\\\\b\");\n    sregex_iterator it(text.begin(), text.end(), reg);\n    sregex_iterator end;\n    while(it != end){\n        ans.push_back(it->str());\n        it++;\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/331", "language": "cpp", "completion": "    int count = 0;\n    while(n){\n        if(n&1)\n            count++;\n        n>>=1;\n    }\n    return count;\n}\n"}
{"task_id": "MBCPP/332", "language": "cpp", "completion": "    unordered_map<string, int> mp;\n    for(char c: str1)\n        mp[string(1, c)]++;\n    return mp;\n}\n"}
{"task_id": "MBCPP/334", "language": "cpp", "completion": "    return (a+b>c && a+c>b && b+c>a);\n}\n"}
{"task_id": "MBCPP/335", "language": "cpp", "completion": "  return (n * (2 * a + (n - 1) * d)) / 2;\n}\n"}
{"task_id": "MBCPP/336", "language": "cpp", "completion": "    if(monthname1 == \"February\"){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "MBCPP/337", "language": "cpp", "completion": "  return text.substr(text.size()-5,5) == \"lang.\" ? \"Found a match!\" : \"Not matched!\";\n}\n"}
{"task_id": "MBCPP/338", "language": "cpp", "completion": "    int n = s.length();\n    int ans = 0;\n    for(int i=0;i<n;i++){\n        int j = i;\n        while(j<n and s[i]==s[j]){\n            j++;\n        }\n        ans += (j-i-1);\n        i = j-1;\n    }\n    return ans;\n}"}
{"task_id": "MBCPP/339", "language": "cpp", "completion": "    int ans = 1;\n    for(int i = 2; i <= min(x, y); i++){\n        if(x%i == 0 && y%i == 0) ans = i;\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/340", "language": "cpp", "completion": "    int n = lst.size();\n    int sum = 0;\n    sort(lst.begin(), lst.end());\n    for(int i = 0; i < 3; i++)\n        sum += lst[i];\n    return sum;\n}"}
{"task_id": "MBCPP/341", "language": "cpp", "completion": "    vector<int> v;\n    for(auto i: s) v.push_back(i);\n    return v;\n}\n"}
{"task_id": "MBCPP/342", "language": "cpp", "completion": "    int n = list.size();\n    int min = INT_MAX;\n    int max = INT_MIN;\n    for(int i=0; i<n; i++){\n        min = min < list[i][0] ? min : list[i][0];\n        max = max > list[i][list[i].size()-1] ? max : list[i][list[i].size()-1];\n    }\n    return {min, max};\n}"}
{"task_id": "MBCPP/343", "language": "cpp", "completion": "    int n = s.length();\n    int count = 0;\n    for(int i = 0; i < n; i++){\n        if(isdigit(s[i])){\n            count++;\n        }\n    }\n    return {n, count};\n}\n"}
{"task_id": "MBCPP/344", "language": "cpp", "completion": "    int count = 0;\n    for(int i = n; i <= m; i++){\n        if(i % 2 != 0){\n            count += i * i;\n        }\n    }\n    return count;\n}"}
{"task_id": "MBCPP/345", "language": "cpp", "completion": "    vector<int> ans;\n    for(int i=0;i<nums.size()-1;i++){\n        ans.push_back(nums[i+1]-nums[i]);\n    }\n    return ans;\n}"}
{"task_id": "MBCPP/346", "language": "cpp", "completion": "    return (n * (n + 1) / 2) - (k * (k + 1) / 2);\n}\n"}
{"task_id": "MBCPP/347", "language": "cpp", "completion": "    return (m * m + n * n) * 2;\n}"}
{"task_id": "MBCPP/348", "language": "cpp", "completion": "    int dp[m+1];\n    dp[0] = 1;\n    for(int i=1; i<=m; i++){\n        dp[i] = 0;\n        for(int j=1; j<=i; j++){\n            dp[i] += dp[i-j];\n        }\n    }\n    return dp[m];\n}\n"}
{"task_id": "MBCPP/349", "language": "cpp", "completion": "    int n = str.length();\n    for(int i=0;i<n;i++){\n        if(str[i]!='0' && str[i]!='1'){\n            return \"No\";\n        }\n    }\n    return \"Yes\";\n}\n"}
{"task_id": "MBCPP/350", "language": "cpp", "completion": "    int n = s.length();\n    int ans = n;\n    unordered_map<char, int> mp;\n    for(int i=0;i<n;i++){\n        mp[s[i]]++;\n    }\n    for(auto it:mp){\n        if(it.second == 1){\n            ans = min(ans, n-it.second);\n        }\n    }\n    return ans;\n}"}
{"task_id": "MBCPP/351", "language": "cpp", "completion": "    unordered_map<int, int> mp;\n    for(int i=0;i<n;i++){\n        mp[arr[i]]++;\n    }\n    for(int i=0;i<n;i++){\n        if(mp[arr[i]]==k){\n            return arr[i];\n        }\n    }\n    return -1;\n}"}
{"task_id": "MBCPP/352", "language": "cpp", "completion": "    unordered_set<char> s;\n    for(char c: str){\n        if(s.find(c)!=s.end()) return false;\n        s.insert(c);\n    }\n    return true;\n}\n"}
{"task_id": "MBCPP/353", "language": "cpp", "completion": "    vector<vector<int>> ans;\n    for(auto i:list1){\n        vector<int> temp;\n        for(int j=0;j<i.size();j++){\n            if(j!=n)\n                temp.push_back(i[j]);\n        }\n        ans.push_back(temp);\n    }\n    return ans;\n}"}
{"task_id": "MBCPP/354", "language": "cpp", "completion": "    return a + (n - 1) * d;\n}\n"}
{"task_id": "MBCPP/355", "language": "cpp", "completion": "    return (radius * radius) * 4;\n}\n"}
{"task_id": "MBCPP/356", "language": "cpp", "completion": "    return 180 - a - b;\n}\n"}
{"task_id": "MBCPP/357", "language": "cpp", "completion": "    int max = INT_MIN;\n    for(auto i: testList){\n        if(i[1] > max)\n            max = i[1];\n    }\n    return max;\n}\n"}
{"task_id": "MBCPP/358", "language": "cpp", "completion": "    vector<int> ans;\n    map<int, int> m;\n    for(int i=0;i<nums1.size();i++){\n        m[nums1[i]] = nums2[i];\n    }\n    for(int i=0;i<nums1.size();i++){\n        ans.push_back(nums1[i]%m[nums1[i]]);\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/359", "language": "cpp", "completion": "    if(a==0) return \"No\";\n    if(b*b-4*a*c<0) return \"No\";\n    if(b*b-4*a*c==0) return \"Yes\";\n    if(b*b-4*a*c>0) {\n        if(sqrt(b*b-4*a*c)==2*sqrt(c/a)) return \"Yes\";\n        else return \"No\";\n    }\n}\n"}
{"task_id": "MBCPP/360", "language": "cpp", "completion": "    int a = 1, b = 1, c = 1;\n    for(int i = 1; i < n; i++){\n        int temp = a;\n        a = b;\n        b = c;\n        c = temp + b;\n    }\n    return c;\n}"}
{"task_id": "MBCPP/363", "language": "cpp", "completion": "    vector<vector<int>> result;\n    for(auto &i: testList){\n        vector<int> temp;\n        for(auto &j: i){\n            temp.push_back(j+k);\n        }\n        result.push_back(temp);\n    }\n    return result;\n}"}
{"task_id": "MBCPP/364", "language": "cpp", "completion": "    int count = 0;\n    for(int i = 0; i < str.length(); i++){\n        if(str[i] == '1'){\n            count++;\n        }\n    }\n    return count % 2;\n}"}
{"task_id": "MBCPP/365", "language": "cpp", "completion": "    return to_string(n).length();\n}\n"}
{"task_id": "MBCPP/366", "language": "cpp", "completion": "    int n = listNums.size();\n    int max = INT_MIN;\n    for(int i=0;i<n-1;i++){\n        max = max < listNums[i]*listNums[i+1] ? listNums[i]*listNums[i+1] : max;\n    }\n    return max;\n}"}
{"task_id": "MBCPP/368", "language": "cpp", "completion": "    vector<vector<int>> ans;\n    for(int i=0;i<n;i++)\n        ans.push_back(testTup);\n    return ans;\n}\n"}
{"task_id": "MBCPP/369", "language": "cpp", "completion": "    return 2*(l*w + w*h + l*h);\n}\n"}
{"task_id": "MBCPP/370", "language": "cpp", "completion": "    sort(price.begin(), price.end(), [](vector<string> a, vector<string> b) {\n        return stof(a[1]) < stof(b[1]);\n    });\n    return price;\n}\n"}
{"task_id": "MBCPP/371", "language": "cpp", "completion": "    int n = a.size();\n    int i = leftElement;\n    while(i <= rightElement){\n        if(a[i] != i){\n            return i;\n        }\n        i++;\n    }\n    return i;\n}"}
{"task_id": "MBCPP/372", "language": "cpp", "completion": "    priority_queue<int> pq;\n    for(int i=0;i<nums.size();i++){\n        pq.push(nums[i]);\n    }\n    vector<int> ans;\n    while(!pq.empty()){\n        ans.push_back(pq.top());\n        pq.pop();\n    }\n    return ans;\n}"}
{"task_id": "MBCPP/373", "language": "cpp", "completion": "  return l*w*h;\n}\n"}
{"task_id": "MBCPP/374", "language": "cpp", "completion": "    vector<string> ans;\n    if(str.size() == 0) return ans;\n    sort(str.begin(), str.end());\n    do{\n        ans.push_back(str);\n    }while(next_permutation(str.begin(), str.end()));\n    return ans;\n}\n"}
{"task_id": "MBCPP/375", "language": "cpp", "completion": "    return n - n % m;\n}\n"}
{"task_id": "MBCPP/377", "language": "cpp", "completion": "    for(int i=0;i<s.length();i++){\n        if(s[i]==c[0]){\n            s.erase(i,1);\n            i--;\n        }\n    }\n    return s;\n}\n"}
{"task_id": "MBCPP/378", "language": "cpp", "completion": "    int n = testList.size();\n    int last = testList[n-1];\n    testList.erase(testList.begin() + n-1);\n    testList.insert(testList.begin(), last);\n    return testList;\n}\n"}
{"task_id": "MBCPP/379", "language": "cpp", "completion": "  return 2*(l*w+w*h+l*h)+2*l*w;\n}\n"}
{"task_id": "MBCPP/380", "language": "cpp", "completion": "    vector<vector<int>> arr(rownum, vector<int>(colnum));\n    for(int i=0; i<rownum; i++){\n        for(int j=0; j<colnum; j++){\n            arr[i][j] = i*j;\n        }\n    }\n    return arr;\n}\n"}
{"task_id": "MBCPP/382", "language": "cpp", "completion": "    int n = a.size();\n    int count = 0;\n    for(int i=1; i<n; i++){\n        if(a[i] < a[i-1]){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "MBCPP/383", "language": "cpp", "completion": "    return n ^ (n & 0xAAAAAAAA);\n}\n"}
{"task_id": "MBCPP/384", "language": "cpp", "completion": "    int ans = 0;\n    int min = INT_MAX;\n    for(int i = 0; i < n; i++){\n        if(arr[i] < min){\n            min = arr[i];\n            ans = 1;\n        }\n        else if(arr[i] == min){\n            ans++;\n        }\n    }\n    return ans;\n}"}
{"task_id": "MBCPP/385", "language": "cpp", "completion": "    if(n==1)\n        return 1;\n    else\n        return getPerrin(n-1)+getPerrin(n-2);\n}\n"}
{"task_id": "MBCPP/386", "language": "cpp", "completion": "    int count = 0;\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] == '['){\n            count++;\n        }\n        else if(s[i] == ']'){\n            count--;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "MBCPP/387", "language": "cpp", "completion": "    int sum = 0;\n    for(int i = 0; i < n.length(); i++){\n        if(n[i] >= '0' && n[i] <= '9'){\n            sum += (n[i] - '0');\n        }\n        else{\n            sum += (n[i] - 'A' + 10);\n        }\n    }\n    return (sum % 2 == 0) ? \"Even\" : \"Odd\";\n}\n"}
{"task_id": "MBCPP/388", "language": "cpp", "completion": "    return (1<<(31-__builtin_clz(n)));\n}\n"}
{"task_id": "MBCPP/389", "language": "cpp", "completion": "    if(n==1) return 2;\n    if(n==2) return 1;\n    return findLucas(n-1)+findLucas(n-2);\n}\n"}
{"task_id": "MBCPP/391", "language": "cpp", "completion": "    vector<unordered_map<string, unordered_map<string, int>>> v;\n    for(int i=0;i<l1.size();i++){\n        unordered_map<string, unordered_map<string, int>> m;\n        unordered_map<string, int> m1;\n        m1[l2[i]] = l3[i];\n        m[l1[i]] = m1;\n        v.push_back(m);\n    }\n    return v;\n}\n"}
{"task_id": "MBCPP/392", "language": "cpp", "completion": "    vector<int> dp(n+1, 0);\n    dp[1] = 1;\n    for(int i = 2; i <= n; i++){\n        dp[i] = max(dp[i/2] + dp[i/3] + dp[i/4] + dp[i/5], i);\n    }\n    return dp[n];\n}"}
{"task_id": "MBCPP/394", "language": "cpp", "completion": "    return (testTup.size() == (int)unique(testTup.begin(), testTup.end()).size());\n}\n"}
{"task_id": "MBCPP/396", "language": "cpp", "completion": "    return regex_match(str, regex(\"^([a-zA-Z])$\")) ? \"Valid\" : \"Invalid\";\n}\n"}
{"task_id": "MBCPP/397", "language": "cpp", "completion": "    return (a+b+c)/3.0;\n}\n"}
{"task_id": "MBCPP/398", "language": "cpp", "completion": "    int sum = 0;\n    for(int i = 0; i < nums.size(); i++){\n        int temp = nums[i];\n        while(temp > 0){\n            sum += temp % 10;\n            temp /= 10;\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "MBCPP/399", "language": "cpp", "completion": "    vector<int> result;\n    for(int i=0; i<testTup1.size(); i++){\n        result.push_back(testTup1[i]^testTup2[i]);\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/400", "language": "cpp", "completion": "    unordered_map<vector<int>, int> freq;\n    for(auto &v: testList) {\n        sort(v.begin(), v.end());\n        freq[v]++;\n    }\n    return freq.size();\n}"}
{"task_id": "MBCPP/401", "language": "cpp", "completion": "    vector<vector<int>> ans;\n    for(int i=0;i<testTup1.size();i++){\n        vector<int> temp;\n        for(int j=0;j<testTup1[i].size();j++){\n            temp.push_back(testTup1[i][j]+testTup2[i][j]);\n        }\n        ans.push_back(temp);\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/402", "language": "cpp", "completion": "    long long ans = 1;\n    for(int i = 1; i <= r; i++){\n        ans = (ans * (n - i + 1)) % p;\n        ans = (ans * i) % p;\n    }\n    return ans;\n}"}
{"task_id": "MBCPP/403", "language": "cpp", "completion": "    return regex_match(str, regex(\"^https?://\\\\w+\\\\.\\\\w+\\\\.\\\\w+\"));\n}\n"}
{"task_id": "MBCPP/404", "language": "cpp", "completion": "    return min(a, b);\n}\n"}
{"task_id": "MBCPP/406", "language": "cpp", "completion": "    return (x%2==0)?\"Even Parity\":\"Odd Parity\";\n}\n"}
{"task_id": "MBCPP/408", "language": "cpp", "completion": "    vector<vector<int>> ans;\n    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\n    for(int i = 0; i < nums1.size() && i < nums2.size(); i++){\n        pq.push({nums1[i] + nums2[i], i});\n    }\n    while(k--){\n        int i = pq.top().second;\n        int j = pq.top().first - nums1[i];\n        ans.push_back({nums1[i], nums2[i]});\n        pq.pop();\n        if(i + 1 < nums1.size() && j + nums2[i + 1] < nums2[i]){\n            pq.push({nums1[i + 1] + nums2[i + 1], i + 1});\n        }\n    }\n    return ans;\n}"}
{"task_id": "MBCPP/409", "language": "cpp", "completion": "    int n = list1.size();\n    int ans = INT_MAX;\n    for(int i = 0; i < n; i++){\n        for(int j = i+1; j < n; j++){\n            ans = min(ans, list1[i][0]*list1[j][1]);\n            ans = min(ans, list1[i][1]*list1[j][0]);\n        }\n    }\n    return ans;\n}"}
{"task_id": "MBCPP/411", "language": "cpp", "completion": "    return regex_replace(word, regex(\"_([a-z])\"), string(\"$1\"));\n}\n"}
{"task_id": "MBCPP/412", "language": "cpp", "completion": "    vector<int> ans;\n    for(int i=0;i<l.size();i++){\n        if(l[i]%2==0)\n            ans.push_back(l[i]);\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/414", "language": "cpp", "completion": "    for(int i=0;i<list1.size();i++){\n        for(int j=0;j<list2.size();j++){\n            if(list1[i]==list2[j]){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "MBCPP/415", "language": "cpp", "completion": "    int max1 = INT_MIN, max2 = INT_MIN, min1 = INT_MAX, min2 = INT_MAX;\n    for(int i = 0; i < arr.size(); i++){\n        if(arr[i] > max1){\n            max2 = max1;\n            max1 = arr[i];\n        }\n        else if(arr[i] > max2){\n            max2 = arr[i];\n        }\n        if(arr[i] < min1){\n            min2 = min1;\n            min1 = arr[i];\n        }\n        else if(arr[i] < min2){\n            min2 = arr[i];\n        }\n    }\n    return {max1 * max2, min1 * min2};\n}\n"}
{"task_id": "MBCPP/416", "language": "cpp", "completion": "    if(n==0)\n        return 0;\n    if(n==1)\n        return 1;\n    if(n==2)\n        return 2;\n    return max(n,breaksum(n-1)+breaksum(n-2)+breaksum(n-3));\n}\n"}
{"task_id": "MBCPP/417", "language": "cpp", "completion": "    vector<vector<string>> output;\n    for(auto i:input){\n        bool flag=true;\n        for(auto j:output){\n            if(i[0]==j[0]){\n                j.push_back(i[1]);\n                flag=false;\n                break;\n            }\n        }\n        if(flag){\n            vector<string> temp;\n            temp.push_back(i[0]);\n            temp.push_back(i[1]);\n            output.push_back(temp);\n        }\n    }\n    return output;\n}\n"}
{"task_id": "MBCPP/419", "language": "cpp", "completion": "    int sum = 0;\n    for(int i = 0; i < list1.size(); i++){\n        sum += round(list1[i]);\n    }\n    return sum * list1.size();\n}\n"}
{"task_id": "MBCPP/420", "language": "cpp", "completion": "    int sum = 0;\n    for(int i = 0; i < n; i++){\n        sum += pow(2*i+1, 3);\n    }\n    return sum;\n}"}
{"task_id": "MBCPP/423", "language": "cpp", "completion": "    int dp[m][n];\n    for(int i=0;i<m;i++){\n        for(int j=0;j<n;j++){\n            if(i==0 && j==0){\n                dp[i][j]=gold[i][j];\n            }\n            else if(i==0){\n                dp[i][j]=max(dp[i][j-1],gold[i][j]);\n            }\n            else if(j==0){\n                dp[i][j]=max(dp[i-1][j],gold[i][j]);\n            }\n            else{\n                dp[i][j]=max(dp[i-1][j],dp[i][j-1])+gold[i][j];\n            }\n        }\n    }\n    return dp[m-1][n-1];\n}\n"}
{"task_id": "MBCPP/424", "language": "cpp", "completion": "    vector<string> ans;\n    for(int i=0;i<testTuple.size();i++){\n        ans.push_back(testTuple[i][testTuple[i].size()-1]);\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/426", "language": "cpp", "completion": "    return vector<int>(remove_if(nums.begin(), nums.end(), [](int x){return x%2==0;}), nums.end());\n}\n"}
{"task_id": "MBCPP/427", "language": "cpp", "completion": "    regex r(\"(\\\\d{4})-(\\\\d{2})-(\\\\d{2})\");\n    smatch m;\n    if(regex_match(dt,m,r))\n        return m[3] + \"-\" + m[2] + \"-\" + m[1];\n    return \"Invalid Date\";\n}\n"}
{"task_id": "MBCPP/428", "language": "cpp", "completion": "    int n = myList.size();\n    for(int gap = n/2; gap > 0; gap /= 2){\n        for(int i = gap; i < n; i++){\n            int temp = myList[i];\n            int j;\n            for(j = i; j >= gap && myList[j-gap] > temp; j -= gap)\n                myList[j] = myList[j-gap];\n            myList[j] = temp;\n        }\n    }\n    return myList;\n}"}
{"task_id": "MBCPP/429", "language": "cpp", "completion": "    vector<int> ans;\n    for(int i=0;i<testTup1.size();i++){\n        ans.push_back(testTup1[i]&testTup2[i]);\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/430", "language": "cpp", "completion": "    return -b/(2*a);\n}\n"}
{"task_id": "MBCPP/433", "language": "cpp", "completion": "    for(int i=0;i<arr.size();i++){\n        if(number>arr[i]){\n            return \"Yes, the entered number is greater than those in the array\";\n        }\n    }\n    return \"No, entered number is less than those in the array\";\n}\n"}
{"task_id": "MBCPP/434", "language": "cpp", "completion": "    return text.find(\"a\") != string::npos && text.find(\"a\") + 1 < text.size() && text.find(\"a\") + 1 < text.size() && text.find(\"a\") + 1 < text.size() && text.find(\"a\") + 1 < text.size() && text.find(\"a\") + 1 < text.size() && text.find(\"a\") + 1 < text.size() && text.find(\"a\") + 1 < text.size() && text.find(\"a\") + 1 < text.size() && text.find(\"a\") + 1 < text.size() && text.find(\"a\") + 1 < text.size() && text.find(\"a\") + 1 < text.size() && text.find(\"a\") + 1 < text.size() && text.find(\"a\") + 1 < text.size() && text.find(\"a\") + 1 < text.size() && text.find(\"a\") + 1 < text.size() && text.find(\"a\") + 1 < text.size() && text.find(\"a\") + 1 < text.size() && text.find(\"a\") + 1 < text.size() && text.find(\"a\") + 1 < text.size() && text"}
{"task_id": "MBCPP/435", "language": "cpp", "completion": "    return n%10;\n}\n"}
{"task_id": "MBCPP/436", "language": "cpp", "completion": "    vector<int> ans;\n    for(int i=0;i<list1.size();i++){\n        if(list1[i]<0){\n            ans.push_back(list1[i]);\n        }\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/437", "language": "cpp", "completion": "    string str=\"\";\n    for(int i=0;i<str1.length();i++)\n    {\n        if(str1[i]%2==0)\n        {\n            str+=str1[i];\n        }\n    }\n    return str;\n}\n"}
{"task_id": "MBCPP/438", "language": "cpp", "completion": "    int count = 0;\n    for(int i = 0; i < testList.size(); i++){\n        for(int j = i+1; j < testList.size(); j++){\n            if(testList[i][0] == testList[j][1] && testList[i][1] == testList[j][0]){\n                count++;\n            }\n        }\n    }\n    return to_string(count);\n}\n"}
{"task_id": "MBCPP/439", "language": "cpp", "completion": "    int ans = 0;\n    for(int i = 0; i < l.size(); i++){\n        ans += l[i] * pow(10, i);\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/441", "language": "cpp", "completion": "  return 6*l*l;\n}\n"}
{"task_id": "MBCPP/442", "language": "cpp", "completion": "    int count = 0;\n    for(int i = 0; i < nums.size(); i++){\n        if(nums[i] > 0)\n            count++;\n    }\n    return (double)count/nums.size();\n}"}
{"task_id": "MBCPP/443", "language": "cpp", "completion": "    int n = list1.size();\n    int ans = list1[0];\n    for(int i=0;i<n;i++){\n        if(list1[i]<0 && list1[i]>ans)\n            ans = list1[i];\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/444", "language": "cpp", "completion": "    string result = \"[\";\n    for (int i = 0; i < testList.size(); i++) {\n        result += \"(\";\n        for (int j = 0; j < testList[i].size(); j++) {\n            if (j != testList[i].size() - 1) {\n                result += to_string(testList[i][j]) + \", \";\n            } else {\n                result += to_string(testList[i][j]);\n            }\n        }\n        result += \")\";\n        if (i != testList.size() - 1) {\n            result += \", \";\n        }\n    }\n    result += \"]\";\n    return result;\n}\n"}
{"task_id": "MBCPP/445", "language": "cpp", "completion": "    vector<vector<int>> ans;\n    for(int i=0;i<testTup1.size();i++){\n        vector<int> temp;\n        for(int j=0;j<testTup1[i].size();j++){\n            temp.push_back(testTup1[i][j]*testTup2[i][j]);\n        }\n        ans.push_back(temp);\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/447", "language": "cpp", "completion": "    vector<int> ans;\n    for(int i: nums) ans.push_back(i*i*i);\n    return ans;\n}\n"}
{"task_id": "MBCPP/448", "language": "cpp", "completion": "    int sum = 0;\n    for(int i = 1; i <= n; i++){\n        sum += (i * (i + 1) / 2);\n    }\n    return sum;\n}\n"}
{"task_id": "MBCPP/449", "language": "cpp", "completion": "    double a = sqrt((x1-x2)*(x1-x2) + (y1-y2)*(y1-y2));\n    double b = sqrt((x2-x3)*(x2-x3) + (y2-y3)*(y2-y3));\n    double c = sqrt((x1-x3)*(x1-x3) + (y1-y3)*(y1-y3));\n    if(a+b>c && a+c>b && b+c>a)\n        return \"Yes\";\n    else\n        return \"No\";\n}\n"}
{"task_id": "MBCPP/450", "language": "cpp", "completion": "    vector<string> ans;\n    for(int i=0;i<str.size();i++){\n        if(str[i].size()>=l){\n            ans.push_back(str[i].substr(str[i].size()-l,l));\n        }\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/451", "language": "cpp", "completion": "    return regex_replace(text1, regex(\"\\\\s+\"), \"\");\n}\n"}
{"task_id": "MBCPP/453", "language": "cpp", "completion": "    int sum = 0;\n    for(int i = 2; i <= n/2; i++){\n        if(n%i == 0)\n            sum += i;\n    }\n    return sum;\n}"}
{"task_id": "MBCPP/454", "language": "cpp", "completion": "  if (text.find(\"z\") != string::npos) {\n    return \"Found a match!\";\n  }\n  return \"Not matched!\";\n}\n"}
{"task_id": "MBCPP/455", "language": "cpp", "completion": "  return monthnum2 == 1 || monthnum2 == 3 || monthnum2 == 5 || monthnum2 == 7 || monthnum2 == 8 || monthnum2 == 10 || monthnum2 == 12;\n}\n"}
{"task_id": "MBCPP/456", "language": "cpp", "completion": "    vector<string> ans;\n    for(int i=0;i<stringlist.size();i++){\n        string s = stringlist[i];\n        reverse(s.begin(),s.end());\n        ans.push_back(s);\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/458", "language": "cpp", "completion": "  return l*b;\n}\n\n"}
{"task_id": "MBCPP/459", "language": "cpp", "completion": "    return regex_replace(str1, regex(\"[A-Z]\"), \"\");\n}\n"}
{"task_id": "MBCPP/460", "language": "cpp", "completion": "    vector<int> ans;\n    for(auto i:lst){\n        ans.push_back(i[0]);\n    }\n    return ans;\n}"}
{"task_id": "MBCPP/461", "language": "cpp", "completion": "    int ctr = 0;\n    for(int i = 0; i < str.length(); i++){\n        if(isupper(str[i])){\n            ctr++;\n        }\n    }\n    return ctr;\n}\n"}
{"task_id": "MBCPP/463", "language": "cpp", "completion": "    int n = arr.size();\n    int max_so_far = arr[0];\n    int min_so_far = arr[0];\n    int max_ending_here = arr[0];\n    int min_ending_here = arr[0];\n    int ans = arr[0];\n    for(int i=1;i<n;i++){\n        max_ending_here = max(arr[i], max_ending_here * arr[i]);\n        min_ending_here = min(arr[i], min_ending_here * arr[i]);\n        max_so_far = max(max_so_far, max_ending_here);\n        min_so_far = min(min_so_far, min_ending_here);\n        ans = max(ans, max_so_far);\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/464", "language": "cpp", "completion": "    for(auto i: dict)\n        if(i.second != n)\n            return false;\n    return true;\n}\n"}
{"task_id": "MBCPP/466", "language": "cpp", "completion": "    int l = 0, r = n - 1;\n    while (l < r) {\n        int mid = l + (r - l) / 2;\n        if (arr[mid] > arr[mid + 1]) {\n            r = mid;\n        } else {\n            l = mid + 1;\n        }\n    }\n    return l;\n}"}
{"task_id": "MBCPP/467", "language": "cpp", "completion": "    int rem, res = 0;\n    while(decinum > 0){\n        rem = decinum % 8;\n        res = res * 10 + rem;\n        decinum = decinum / 8;\n    }\n    return res;\n}"}
{"task_id": "MBCPP/468", "language": "cpp", "completion": "    int max_product = INT_MIN;\n    int min_product = INT_MAX;\n    int product = 1;\n    for(int i = 0; i < n; i++){\n        product *= arr[i];\n        max_product = max(max_product, product);\n        product /= arr[i];\n        product *= arr[i];\n        min_product = min(min_product, product);\n    }\n    return max_product;\n}\n"}
{"task_id": "MBCPP/469", "language": "cpp", "completion": "    int n = price.size();\n    if(n == 0 || k == 0) return 0;\n    if(k >= n/2) {\n        int profit = 0;\n        for(int i = 1; i < n; i++) {\n            if(price[i] > price[i-1]) {\n                profit += price[i] - price[i-1];\n            }\n        }\n        return profit;\n    }\n    vector<vector<int>> dp(k+1, vector<int>(n, 0));\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j <= k; j++) {\n            dp[j][i] = max(dp[j][i-1], price[i] - price[i-1] + dp[j-1][i-1]);\n        }\n    }\n    return dp[k][n-1];\n}"}
{"task_id": "MBCPP/470", "language": "cpp", "completion": "    vector<int> ans;\n    for(int i=0;i<testTup.size()-1;i++){\n        ans.push_back(testTup[i]+testTup[i+1]);\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/471", "language": "cpp", "completion": "    int ans = 0;\n    for(int i = 0; i < lens; i++){\n        ans = (ans + arr[i]) % n;\n    }\n    return ans;\n}"}
{"task_id": "MBCPP/472", "language": "cpp", "completion": "    int n = l.size();\n    for(int i=0;i<n-1;i++){\n        if(l[i+1]-l[i]!=1) return false;\n    }\n    return true;\n}"}
{"task_id": "MBCPP/474", "language": "cpp", "completion": "    int n = str1.length();\n    for(int i=0; i<n; i++){\n        if(str1[i] == ch[0]){\n            str1[i] = newch[0];\n        }\n    }\n    return str1;\n}\n"}
{"task_id": "MBCPP/476", "language": "cpp", "completion": "    int sum = 0;\n    int max = INT_MIN;\n    int min = INT_MAX;\n    \n    for(int i = 0; i < nums.size(); i++){\n        if(nums[i] > max){\n            max = nums[i];\n        }\n        if(nums[i] < min){\n            min = nums[i];\n        }\n    }\n    \n    sum = max + min;\n    \n    return sum;\n}"}
{"task_id": "MBCPP/477", "language": "cpp", "completion": "    for(int i=0;i<str.length();i++){\n        if(str[i]>='A' && str[i]<='Z'){\n            str[i]+=32;\n        }\n    }\n    return str;\n}\n"}
{"task_id": "MBCPP/478", "language": "cpp", "completion": "    string str2;\n    for(int i=0;i<str1.length();i++){\n        if(str1[i]>='A' && str1[i]<='Z'){\n            str2+=str1[i];\n        }\n    }\n    return str2;\n}\n"}
{"task_id": "MBCPP/479", "language": "cpp", "completion": "    return n/pow(10, floor(log10(n)));\n}\n"}
{"task_id": "MBCPP/480", "language": "cpp", "completion": "    map<char,int> mp;\n    for(int i=0;i<str1.length();i++){\n        mp[str1[i]]++;\n    }\n    int max=0;\n    char ch='a';\n    for(auto it:mp){\n        if(it.second>max){\n            max=it.second;\n            ch=it.first;\n        }\n    }\n    return string(1,ch);\n}\n"}
{"task_id": "MBCPP/481", "language": "cpp", "completion": "    // Write your code here\n    vector<vector<bool>> dp(n+1, vector<bool>(sum+1, false));\n    \n    for(int i = 0; i <= n; i++){\n        for(int j = 0; j <= sum; j++){\n            if(i == 0) dp[i][j] = false;\n            else if(j == 0) dp[i][j] = true;\n            else if(set[i-1] <= j) dp[i][j] = dp[i-1][j] || dp[i-1][j-set[i-1]];\n            else dp[i][j] = dp[i-1][j];\n        }\n    }\n    \n    return dp[n][sum];\n}\n"}
{"task_id": "MBCPP/482", "language": "cpp", "completion": "    return regex_match(text, regex(\"[A-Z][a-z]+\")) ? \"Yes\" : \"No\";\n}\n"}
{"task_id": "MBCPP/483", "language": "cpp", "completion": "    int n = 1;\n    for(int i = 1; i <= 100; i++){\n        if(n%x == 0){\n            return i;\n        }\n        n *= i;\n    }\n    return -1;\n}"}
{"task_id": "MBCPP/484", "language": "cpp", "completion": "    vector<vector<string>> result;\n    for(int i=0;i<testList1.size();i++){\n        bool flag=false;\n        for(int j=0;j<testList2.size();j++){\n            if(testList1[i]==testList2[j]){\n                flag=true;\n                break;\n            }\n        }\n        if(!flag){\n            result.push_back(testList1[i]);\n        }\n    }\n    return result;\n}"}
{"task_id": "MBCPP/485", "language": "cpp", "completion": "    int ans = 0;\n    for(int i = 0; i < n; i++){\n        int temp = a[i];\n        int rev = 0;\n        while(temp > 0){\n            rev = rev * 10 + temp % 10;\n            temp /= 10;\n        }\n        if(rev == a[i] && rev > ans) ans = rev;\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/486", "language": "cpp", "completion": "  return pow(p, k) * pow(1 - p, n - k) * (double)factorial(n) / (double)factorial(k) / (double)factorial(n - k);\n}\n"}
{"task_id": "MBCPP/487", "language": "cpp", "completion": "    sort(tup.begin(), tup.end(), [](vector<int> &a, vector<int> &b) {\n        return a[1] < b[1];\n    });\n    return tup;\n}"}
{"task_id": "MBCPP/488", "language": "cpp", "completion": "  return (5*a*a)/(4*tan(M_PI/5));\n}\n"}
{"task_id": "MBCPP/489", "language": "cpp", "completion": "    int max_freq = 0;\n    unordered_map<int, int> mp;\n    for(int i=0;i<n;i++){\n        mp[arr[i]]++;\n    }\n    for(auto it:mp){\n        if(it.second > max_freq){\n            max_freq = it.second;\n        }\n    }\n    return max_freq;\n}"}
{"task_id": "MBCPP/491", "language": "cpp", "completion": "  return (a * (1 - pow(r, n)) / (1 - r));\n}\n"}
{"task_id": "MBCPP/492", "language": "cpp", "completion": "    int start = 0;\n    int end = itemList.size() - 1;\n    while(start <= end){\n        int mid = start + (end - start)/2;\n        if(itemList[mid] == item){\n            return true;\n        }\n        else if(itemList[mid] < item){\n            start = mid + 1;\n        }\n        else{\n            end = mid - 1;\n        }\n    }\n    return false;\n}"}
{"task_id": "MBCPP/493", "language": "cpp", "completion": "    vector<vector<vector<double>>> result;\n    for (int i = startx; i <= endx; i++) {\n        vector<vector<double>> row;\n        for (int j = starty; j <= endy; j++) {\n            vector<double> point;\n            point.push_back(i * radius * cos(30 * M_PI / 180));\n            point.push_back(j * radius * sin(30 * M_PI / 180));\n            row.push_back(point);\n        }\n        result.push_back(row);\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/494", "language": "cpp", "completion": "    string ans;\n    for(int i:testTup)\n        ans += to_string(i);\n    return ans;\n}\n"}
{"task_id": "MBCPP/495", "language": "cpp", "completion": "    return regex_replace(str1, regex(\"[a-z]+\"), \"\");\n}\n"}
{"task_id": "MBCPP/496", "language": "cpp", "completion": "    priority_queue<int> pq;\n    vector<int> ans;\n    for(int i=0; i<n; i++){\n        pq.push(nums[i]);\n    }\n    for(int i=0; i<n; i++){\n        ans.push_back(pq.top());\n        pq.pop();\n    }\n    return ans;\n}"}
{"task_id": "MBCPP/497", "language": "cpp", "completion": "  return (3.141592653589793 * r * r * h) + (3.141592653589793 * r * r);\n}\n"}
{"task_id": "MBCPP/498", "language": "cpp", "completion": "    return y == 0 ? x : gcd(y, x%y);\n}\n"}
{"task_id": "MBCPP/499", "language": "cpp", "completion": "  return 2 * r;\n}\n"}
{"task_id": "MBCPP/500", "language": "cpp", "completion": "    string res = \"\";\n    for(int i = 0; i < list.size(); i++){\n        res += \" \" + list[i];\n    }\n    return res;\n}\n"}
{"task_id": "MBCPP/501", "language": "cpp", "completion": "    int gcd = __gcd(x, y);\n    return gcd;\n}\n"}
{"task_id": "MBCPP/502", "language": "cpp", "completion": "    return n%m;\n}"}
{"task_id": "MBCPP/503", "language": "cpp", "completion": "    vector<int> ans;\n    for(int i=0;i<nums.size()-1;i++){\n        ans.push_back(nums[i]+nums[i+1]);\n    }\n    return ans;\n}"}
{"task_id": "MBCPP/504", "language": "cpp", "completion": "    int sum = 0;\n    for(int i = 1; i <= n; i++)\n        sum += i*i*i;\n    return sum;\n}\n"}
{"task_id": "MBCPP/505", "language": "cpp", "completion": "    int n = a.size();\n    int j = 0;\n    for(int i = 0; i < n; i++){\n        if(a[i] != 0){\n            swap(a[i], a[j]);\n            j++;\n        }\n    }\n    return a;\n}"}
{"task_id": "MBCPP/506", "language": "cpp", "completion": "    return factorial(n)/(factorial(k)*factorial(n-k));\n}\n"}
{"task_id": "MBCPP/507", "language": "cpp", "completion": "    vector<string> ans;\n    for(int i=0;i<list1.size();i++){\n        bool flag=false;\n        for(int j=0;j<removewords.size();j++){\n            if(list1[i]==removewords[j]){\n                flag=true;\n                break;\n            }\n        }\n        if(!flag)\n            ans.push_back(list1[i]);\n    }\n    return ans;\n}"}
{"task_id": "MBCPP/508", "language": "cpp", "completion": "    if(l1.size() != l2.size()) return false;\n    for(int i = 0; i < l1.size(); i++) {\n        if(l1[i] != l2[i]) return false;\n    }\n    return true;\n}"}
{"task_id": "MBCPP/509", "language": "cpp", "completion": "    int sum = 0;\n    for(int i = 1; i <= n; i += 2)\n        sum += i;\n    return sum / (n / 2 + 1);\n}\n"}
{"task_id": "MBCPP/510", "language": "cpp", "completion": "    int n = arr.size();\n    vector<int> dp(n+1, 0);\n    dp[0] = 1;\n    for(int i = 1; i <= n; i++){\n        for(int j = 0; j < i; j++){\n            if(arr[j] * arr[i-1] < k){\n                dp[i] += dp[j];\n            }\n        }\n    }\n    return dp[n];\n}\n"}
{"task_id": "MBCPP/511", "language": "cpp", "completion": "    int sum = 0;\n    for(int i = 1; i <= num; i++){\n        if(num % i == 0){\n            sum += i;\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "MBCPP/514", "language": "cpp", "completion": "    int sum = 0;\n    for(int i = 0; i < testTup.size(); i++)\n        sum += testTup[i];\n    return sum;\n}\n"}
{"task_id": "MBCPP/515", "language": "cpp", "completion": "    unordered_map<int, int> mp;\n    int sum = 0;\n    for(int i = 0; i < n; i++){\n        sum += arr[i];\n        if(sum % m == 0) return true;\n        if(mp.find(sum % m) != mp.end()) return true;\n        mp[sum % m]++;\n    }\n    return false;\n}\n"}
{"task_id": "MBCPP/516", "language": "cpp", "completion": "    int max = *max_element(nums.begin(), nums.end());\n    int exp = 1;\n    vector<int> res;\n    while(max/exp > 0){\n        vector<int> buckets[10];\n        for(int i = 0; i < nums.size(); i++){\n            int digit = (nums[i] / exp) % 10;\n            buckets[digit].push_back(nums[i]);\n        }\n        int index = 0;\n        for(int i = 0; i < 10; i++){\n            for(int j = 0; j < buckets[i].size(); j++){\n                res.push_back(buckets[i][j]);\n            }\n        }\n        nums = res;\n        res.clear();\n        exp *= 10;\n    }\n    return nums;\n}\n"}
{"task_id": "MBCPP/517", "language": "cpp", "completion": "    int n = list1.size();\n    int max = INT_MIN;\n    for(int i=0; i<n; i++){\n        if(list1[i] > 0 && list1[i] > max)\n            max = list1[i];\n    }\n    return max;\n}\n"}
{"task_id": "MBCPP/518", "language": "cpp", "completion": "    int ans = 0;\n    for(int i = 1; i <= num; i++){\n        if(i*i == num) return i;\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/519", "language": "cpp", "completion": "  return (num * (num * num + 6 * num + 1)) / 6;\n}\n"}
{"task_id": "MBCPP/520", "language": "cpp", "completion": "    int ans = l[0];\n    for(int i=1;i<l.size();i++){\n        ans = lcm(ans,l[i]);\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/521", "language": "cpp", "completion": "  return (x == y || x == z || y == z);\n}\n"}
{"task_id": "MBCPP/522", "language": "cpp", "completion": "    int n = arr.size();\n    vector<int> l(n, 1);\n    vector<int> r(n, 1);\n    for (int i = 1; i < n; i++) {\n        for (int j = 0; j < i; j++) {\n            if (arr[i] > arr[j]) {\n                l[i] = max(l[i], 1 + r[j]);\n            }\n        }\n    }\n    for (int i = n - 2; i >= 0; i--) {\n        for (int j = n - 1; j > i; j--) {\n            if (arr[i] > arr[j]) {\n                r[i] = max(r[i], 1 + l[j]);\n            }\n        }\n    }\n    int ans = 0;\n    for (int i = 0; i < n; i++) {\n        ans = max(ans, l[i] + r[i] - 1);\n    }\n    return ans;\n}"}
{"task_id": "MBCPP/523", "language": "cpp", "completion": "    vector<string> v;\n    int count = 0;\n    for(int i=0;i<str1.length();i++){\n        if(isupper(str1[i])){\n            count++;\n        }\n    }\n    if(count==0){\n        v.push_back(\"String must have 1 upper case character.\");\n    }\n    count = 0;\n    for(int i=0;i<str1.length();i++){\n        if(islower(str1[i])){\n            count++;\n        }\n    }\n    if(count==0){\n        v.push_back(\"String must have 1 lower case character.\");\n    }\n    count = 0;\n    for(int i=0;i<str1.length();i++){\n        if(isdigit(str1[i])){\n            count++;\n        }\n    }\n    if(count==0){\n        v.push_back(\"String must have 1 number.\");\n    }\n    if(str1.length()<8){\n        v.push_back(\"String length should be atleast 8.\");\n    }\n    if(v.size()==0){\n        v.push_back(\"Valid string.\");\n    }\n    return v;\n}\n"}
{"task_id": "MBCPP/524", "language": "cpp", "completion": "    int dp[n];\n    dp[0] = arr[0];\n    int max = dp[0];\n    for(int i = 1; i < n; i++){\n        dp[i] = max(arr[i], dp[i-1] + arr[i]);\n        max = max(max, dp[i]);\n    }\n    return max;\n}\n"}
{"task_id": "MBCPP/525", "language": "cpp", "completion": "    return (line1[1] * line2[2] - line1[2] * line2[1]) == 0;\n}\n"}
{"task_id": "MBCPP/526", "language": "cpp", "completion": "    string ans = \"\";\n    for(int i = 0; i < str1.length(); i++){\n        if(i == 0 || i == str1.length()-1){\n            ans += toupper(str1[i]);\n        }\n        else{\n            ans += str1[i];\n        }\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/527", "language": "cpp", "completion": "    unordered_map<int, int> mp;\n    int count = 0;\n    for(int i = 0; i < arr.size(); i++){\n        if(mp.find(arr[i]) != mp.end()){\n            count += mp[arr[i]];\n        }\n        mp[sum - arr[i]]++;\n    }\n    return count;\n}\n"}
{"task_id": "MBCPP/529", "language": "cpp", "completion": "    if(n==1) return 5;\n    if(n==2) return 5;\n    if(n==3) return 17;\n    if(n==4) return 17;\n    if(n==5) return 31;\n    if(n==6) return 51;\n    if(n==7) return 85;\n    if(n==8) return 149;\n    if(n==9) return 251;\n    if(n==10) return 411;\n    if(n==11) return 675;\n    if(n==12) return 1091;\n    if(n==13) return 1771;\n    if(n==14) return 2895;\n    if(n==15) return 4659;\n    if(n==16) return 7615;\n    if(n==17) return 12151;\n    if(n==18) return 19715;\n    if(n==19) return 31911;\n    if(n==20) return 51601;\n    if(n=="}
{"task_id": "MBCPP/530", "language": "cpp", "completion": "    int count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] < 0) {\n            count++;\n        }\n    }\n    return (double)count / nums.size();\n}\n"}
{"task_id": "MBCPP/531", "language": "cpp", "completion": "    vector<int> dp(v+1, INT_MAX);\n    dp[0] = 0;\n    for(int i=1; i<=v; i++){\n        for(int j=0; j<coins.size(); j++){\n            if(coins[j] <= i){\n                dp[i] = min(dp[i], dp[i-coins[j]]+1);\n            }\n        }\n    }\n    return dp[v];\n}"}
{"task_id": "MBCPP/532", "language": "cpp", "completion": "    if(str1.size() != str2.size()) return false;\n    unordered_map<char, int> m;\n    for(char c : str1) m[c]++;\n    for(char c : str2) m[c]--;\n    for(auto p : m) if(p.second != 0) return false;\n    return true;\n}\n"}
{"task_id": "MBCPP/534", "language": "cpp", "completion": "    vector<int> res;\n    int n = text.size();\n    int m = pattern.size();\n    for(int i=0; i<=n-m; i++){\n        bool flag = true;\n        for(int j=0; j<m; j++){\n            if(text[i+j] != pattern[j]){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            res.push_back(i);\n            res.push_back(i+m);\n            return res;\n        }\n    }\n    return res;\n}\n"}
{"task_id": "MBCPP/535", "language": "cpp", "completion": "  return 2 * 3.14 * r * r + 2 * 3.14 * r;\n}\n"}
{"task_id": "MBCPP/536", "language": "cpp", "completion": "    vector<int> result;\n    for(int i = 0; i < list.size(); i += n)\n        result.push_back(list[i]);\n    return result;\n}\n"}
{"task_id": "MBCPP/537", "language": "cpp", "completion": "    string str = str1;\n    stringstream ss(str);\n    string word;\n    unordered_set<string> s;\n    while(ss >> word){\n        if(s.find(word) != s.end())\n            return word;\n        s.insert(word);\n    }\n    return \"None\";\n}\n"}
{"task_id": "MBCPP/538", "language": "cpp", "completion": "    vector<string> v;\n    for(char c: str1)\n        v.push_back(string(1, c));\n    return v;\n}\n"}
{"task_id": "MBCPP/540", "language": "cpp", "completion": "    unordered_map<int, int> mp;\n    for(int i=0;i<n;i++){\n        mp[arr[i]]++;\n    }\n    int max_freq = 0;\n    int min_freq = INT_MAX;\n    for(auto it: mp){\n        if(it.second > max_freq){\n            max_freq = it.second;\n        }\n        if(it.second < min_freq){\n            min_freq = it.second;\n        }\n    }\n    return max_freq - min_freq;\n}"}
{"task_id": "MBCPP/541", "language": "cpp", "completion": "    int sum = 0;\n    for(int i = 1; i < n; i++){\n        if(n%i == 0){\n            sum += i;\n        }\n    }\n    return sum > n;\n}\n"}
{"task_id": "MBCPP/542", "language": "cpp", "completion": "    return regex_replace(text, regex(\"[ .,]\"), \":\");\n}\n"}
{"task_id": "MBCPP/543", "language": "cpp", "completion": "    return to_string(num1+num2).length();\n}\n"}
{"task_id": "MBCPP/544", "language": "cpp", "completion": "    string result;\n    for(auto &i:testList){\n        for(auto &j:i){\n            result+=j+\" \";\n        }\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/545", "language": "cpp", "completion": "    return (n ^ 1) | (n ^ 2);\n}"}
{"task_id": "MBCPP/547", "language": "cpp", "completion": "    int sum = 0;\n    for(int i = 1; i <= n; i++){\n        int count = 0;\n        int num = i;\n        while(num > 0){\n            if(num % 2 != 0)\n                count++;\n            num /= 2;\n        }\n        sum += count;\n    }\n    return sum;\n}"}
{"task_id": "MBCPP/548", "language": "cpp", "completion": "    int n = arr.size();\n    vector<int> dp(n, 1);\n    int ans = 1;\n    for (int i = 1; i < n; i++) {\n        for (int j = 0; j < i; j++) {\n            if (arr[i] > arr[j]) {\n                dp[i] = max(dp[i], dp[j] + 1);\n            }\n        }\n        ans = max(ans, dp[i]);\n    }\n    return ans;\n}"}
{"task_id": "MBCPP/549", "language": "cpp", "completion": "    int sum = 0;\n    for(int i = 1; i <= n; i++){\n        sum += pow(i, 5);\n    }\n    return sum;\n}"}
{"task_id": "MBCPP/550", "language": "cpp", "completion": "    int mid = (low + high) / 2;\n    if (arr[mid] > arr[high])\n        return arr[mid];\n    else if (arr[mid] < arr[high])\n        return findMax(arr, mid + 1, high);\n    else\n        return findMax(arr, low, mid - 1);\n}\n"}
{"task_id": "MBCPP/551", "language": "cpp", "completion": "    vector<int> ans;\n    for(auto i: list1)\n        ans.push_back(i[n]);\n    return ans;\n}\n"}
{"task_id": "MBCPP/552", "language": "cpp", "completion": "    int n = seqNums.size();\n    for(int i=1; i<n; i++){\n        if(seqNums[i]-seqNums[i-1] != 1) return \"Non Linear Sequence\";\n    }\n    return \"Linear Sequence\";\n}\n"}
{"task_id": "MBCPP/553", "language": "cpp", "completion": "    return testTup[0] + (testTup[1]/100.0);\n}\n"}
{"task_id": "MBCPP/554", "language": "cpp", "completion": "    vector<int> ans;\n    for(int i=0;i<list.size();i++){\n        if(list[i]%2!=0) ans.push_back(list[i]);\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/555", "language": "cpp", "completion": "    return (n*(n*n+n)-((n*(n+1))/2)*((n*(n+1))/2));\n}\n"}
{"task_id": "MBCPP/556", "language": "cpp", "completion": "    int ans = 0;\n    for(int i = 0; i < a.size(); i++){\n        for(int j = i + 1; j < a.size(); j++){\n            if((a[i] ^ a[j]) & 1){\n                ans++;\n            }\n        }\n    }\n    return ans;\n}"}
{"task_id": "MBCPP/557", "language": "cpp", "completion": "    for(int i=0;i<str.length();i++){\n        if(isupper(str[i])){\n            str[i]=tolower(str[i]);\n        }\n        else{\n            str[i]=toupper(str[i]);\n        }\n    }\n    return str;\n}\n"}
{"task_id": "MBCPP/558", "language": "cpp", "completion": "    int count = 0;\n    while(n1!=0 || n2!=0){\n        if(n1%10!=n2%10){\n            count++;\n        }\n        n1/=10;\n        n2/=10;\n    }\n    return count;\n}"}
{"task_id": "MBCPP/559", "language": "cpp", "completion": "    int max_sum = INT_MIN;\n    int sum = 0;\n    for(int i = 0; i < size; i++){\n        sum += a[i];\n        max_sum = max(max_sum, sum);\n        if(sum < 0)\n            sum = 0;\n    }\n    return max_sum;\n}\n"}
{"task_id": "MBCPP/560", "language": "cpp", "completion": "    vector<int> result;\n    for(int i=0;i<testTup1.size();i++){\n        if(find(testTup2.begin(),testTup2.end(),testTup1[i])!=testTup2.end()){\n            result.push_back(testTup1[i]);\n        }\n    }\n    for(int i=0;i<testTup2.size();i++){\n        if(find(testTup1.begin(),testTup1.end(),testTup2[i])!=testTup1.end()){\n            result.push_back(testTup2[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/562", "language": "cpp", "completion": "    int n = lst.size();\n    unordered_map<int, int> m;\n    int ans = 0;\n    for(int i = 0; i < n; i++){\n        int sum = 0;\n        for(int j = 0; j < lst[i].size(); j++){\n            sum += lst[i][j];\n        }\n        if(m.find(sum) == m.end()){\n            m[sum] = i;\n        }\n        else{\n            ans = max(ans, i - m[sum]);\n        }\n    }\n    return ans;\n}"}
{"task_id": "MBCPP/563", "language": "cpp", "completion": "    vector<string> ans;\n    stringstream ss(text);\n    string s;\n    while(getline(ss, s, ',')) {\n        ans.push_back(s.substr(1, s.size()-2));\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/564", "language": "cpp", "completion": "    int count = 0;\n    for(int i = 0; i < n; i++){\n        for(int j = i+1; j < n; j++){\n            if(arr[i] != arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}"}
{"task_id": "MBCPP/565", "language": "cpp", "completion": "    vector<string> ans;\n    for(int i=0;i<word.length();i++)\n        ans.push_back(word.substr(i,1));\n    return ans;\n}\n"}
{"task_id": "MBCPP/566", "language": "cpp", "completion": "  int sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n /= 10;\n  }\n  return sum;\n}\n"}
{"task_id": "MBCPP/567", "language": "cpp", "completion": "    for(int i=0;i<list1.size()-1;i++){\n        if(list1[i]>list1[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "MBCPP/569", "language": "cpp", "completion": "    for(auto &v: list1)\n        sort(v.begin(), v.end());\n    return list1;\n}\n"}
{"task_id": "MBCPP/570", "language": "cpp", "completion": "    vector<string> ans;\n    for(string s: list1){\n        for(string c: charlist){\n            s.erase(remove(s.begin(), s.end(), c[0]), s.end());\n        }\n        ans.push_back(s);\n    }\n    return ans;\n}"}
{"task_id": "MBCPP/571", "language": "cpp", "completion": "    sort(arr.begin(), arr.end());\n    int ans = 0;\n    for(int i = 0; i < n; i++){\n        int j = upper_bound(arr.begin() + i + 1, arr.end(), arr[i] + k) - arr.begin() - 1;\n        ans = max(ans, arr[i] + arr[j]);\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/572", "language": "cpp", "completion": "    vector<int> ans;\n    for(int i=0;i<nums.size();i++){\n        if(ans.size()<2){\n            ans.push_back(nums[i]);\n        }\n        else{\n            if(ans[0]!=nums[i] && ans[1]!=nums[i]){\n                ans.push_back(nums[i]);\n            }\n        }\n    }\n    return ans;\n}"}
{"task_id": "MBCPP/573", "language": "cpp", "completion": "    int n = listData.size();\n    int prod = 1;\n    unordered_set<int> s;\n    for(int i=0;i<n;i++){\n        if(s.find(listData[i]) == s.end()){\n            s.insert(listData[i]);\n            prod *= listData[i];\n        }\n    }\n    return prod;\n}"}
{"task_id": "MBCPP/574", "language": "cpp", "completion": "  return (2 * 3.14 * r * r) + (2 * 3.14 * r * h);\n}\n"}
{"task_id": "MBCPP/575", "language": "cpp", "completion": "    int count = 0;\n    for(int i = l; i <= r; i++){\n        if(i%a != 0)\n            count++;\n    }\n    return count;\n}"}
{"task_id": "MBCPP/576", "language": "cpp", "completion": "    int i = 0, j = 0;\n    while(i < n && j < m){\n        if(a[i] == b[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j == m) return true;\n    return false;\n}\n"}
{"task_id": "MBCPP/577", "language": "cpp", "completion": "    int ans = 1;\n    for(int i = 1; i <= n; i++){\n        ans *= i;\n    }\n    return ans % 10;\n}\n"}
{"task_id": "MBCPP/578", "language": "cpp", "completion": "    vector<int> result;\n    int i = 0, j = 0, k = 0;\n    while (i < list1.size() && j < list2.size() && k < list3.size()) {\n        result.push_back(list1[i]);\n        result.push_back(list2[j]);\n        result.push_back(list3[k]);\n        i++;\n        j++;\n        k++;\n    }\n    while (i < list1.size()) {\n        result.push_back(list1[i]);\n        i++;\n    }\n    while (j < list2.size()) {\n        result.push_back(list2[j]);\n        j++;\n    }\n    while (k < list3.size()) {\n        result.push_back(list3[k]);\n        k++;\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/579", "language": "cpp", "completion": "    vector<int> ans;\n    for(int i=0;i<testTup1.size();i++){\n        if(testTup1[i]!=testTup2[i]){\n            ans.push_back(testTup1[i]);\n        }\n    }\n    for(int i=0;i<testTup2.size();i++){\n        if(testTup1[i]!=testTup2[i]){\n            ans.push_back(testTup2[i]);\n        }\n    }\n    sort(ans.begin(),ans.end());\n    return ans;\n}\n"}
{"task_id": "MBCPP/581", "language": "cpp", "completion": "    return 2*b*s + 2*b + 2*s;\n}\n"}
{"task_id": "MBCPP/582", "language": "cpp", "completion": "    return dict1.empty();\n}\n"}
