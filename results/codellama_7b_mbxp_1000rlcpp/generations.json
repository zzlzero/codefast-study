[["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to remove first and last occurrence of a given character from the string.\n * > removeOcc(string(\"hello\"), string(\"l\"))\n * string(\"heo\")\n * > removeOcc(string(\"abcda\"), string(\"a\"))\n * string(\"bcd\")\n * > removeOcc(string(\"PHP\"), string(\"P\"))\n * string(\"H\")\n */\nstring removeOcc(string s, string ch) {\n    int n = s.size();\n    int i = 0;\n    while(i < n && s[i] != ch[0])\n        i++;\n    if(i == n)\n        return s;\n    int j = i;\n    while(j < n && s[j] != ch[0])\n        j++;\n    if(j == n)\n        return s;\n    string ans = s.substr(0, i) + s.substr(j, n);\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort a given matrix in ascending order according to the sum of its rows.\n * > sortMatrix(vector<vector<int>>{{1, 2, 3}, {2, 4, 5}, {1, 1, 1}})\n * {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}}\n * > sortMatrix(vector<vector<int>>{{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}})\n * {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}}\n * > sortMatrix(vector<vector<int>>{{5, 8, 9}, {6, 4, 3}, {2, 1, 4}})\n * {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}}\n */\nvector<vector<int>> sortMatrix(vector<vector<int>> m) {\n    vector<vector<int>> ans;\n    for(auto i:m){\n        ans.push_back(i);\n    }\n    sort(ans.begin(), ans.end(), [](vector<int> a, vector<int> b){\n        return accumulate(a.begin(), a.end(), 0) < accumulate(b.begin(), b.end(), 0);\n    });\n    return ans;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the volume of a triangular prism.\n * > findVolume(10, 8, 6)\n * 240\n * > findVolume(3, 2, 2)\n * 6\n * > findVolume(1, 2, 1)\n * 1\n */\nint findVolume(int l, int b, int h) {\n    return l*b*h;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to split a string at lowercase letters.\n * > splitLowerstring(string(\"AbCd\"))\n * {string(\"bC\"), string(\"d\")}\n * > splitLowerstring(string(\"Python\"))\n * {string(\"y\"), string(\"t\"), string(\"h\"), string(\"o\"), string(\"n\")}\n * > splitLowerstring(string(\"Programming\"))\n * {string(\"r\"), string(\"o\"), string(\"g\"), string(\"r\"), string(\"a\"), string(\"m\"), string(\"m\"), string(\"i\"), string(\"n\"), string(\"g\")}\n */\nvector<string> splitLowerstring(string text) {\n    vector<string> ans;\n    string temp;\n    for(int i=0;i<text.length();i++){\n        if(islower(text[i])){\n            ans.push_back(temp);\n            temp = \"\";\n        }\n        temp += text[i];\n    }\n    ans.push_back(temp);\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find sequences of lowercase letters joined with an underscore.\n * > textLowercaseUnderscore(string(\"aab_cbbbc\"))\n * string(\"Found a match!\")\n * > textLowercaseUnderscore(string(\"aab_Abbbc\"))\n * string(\"Not matched!\")\n * > textLowercaseUnderscore(string(\"Aaab_abbbc\"))\n * string(\"Not matched!\")\n */\nstring textLowercaseUnderscore(string text) {\n  int n = text.size();\n  for(int i = 0; i < n; i++){\n    if(text[i] >= 'a' && text[i] <= 'z'){\n      if(text[i] == '_'){\n        if(text[i+1] >= 'a' && text[i+1] <= 'z'){\n          return \"Found a match!\";\n        }\n      }\n    }\n  }\n  return \"Not matched!\";\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the perimeter of a square.\n * > squarePerimeter(10)\n * 40\n * > squarePerimeter(5)\n * 20\n * > squarePerimeter(4)\n * 16\n */\nint squarePerimeter(int a) {\n  return a*4;\n}\n\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove characters from the first string which are present in the second string.\n * > removeDirtyChars(string(\"probasscurve\"), string(\"pros\"))\n * string(\"bacuve\")\n * > removeDirtyChars(string(\"digitalindia\"), string(\"talent\"))\n * string(\"digiidi\")\n * > removeDirtyChars(string(\"exoticmiles\"), string(\"toxic\"))\n * string(\"emles\")\n */\nstring removeDirtyChars(string str, string secondString) {\n    for(int i=0;i<secondString.length();i++){\n        str.erase(remove(str.begin(),str.end(),secondString[i]),str.end());\n    }\n    return str;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find whether a given array of integers contains any duplicate element.\n * > testDuplicate(vector<int>{1, 2, 3, 4, 5})\n * false\n * > testDuplicate(vector<int>{1, 2, 3, 4, 4})\n * true\n * > testDuplicate(vector<int>{1, 1, 2, 2, 3, 3, 4, 4, 5})\n * true\n */\nbool testDuplicate(vector<int> arraynums) {\n    unordered_set<int> s;\n    for(int i=0;i<arraynums.size();i++){\n        if(s.find(arraynums[i])!=s.end())\n            return true;\n        s.insert(arraynums[i]);\n    }\n    return false;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if the given number is woodball or not.\n * > isWoodall(383)\n * true\n * > isWoodall(254)\n * false\n * > isWoodall(200)\n * false\n */\nbool isWoodall(int x) {\n    return (x%10==7) && (x%100!=17) && (x%100!=37) && (x%100!=77) && (x%100!=97);\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find m number of multiples of n.\n * > multiplesOfNum(4, 3)\n * {3, 6, 9, 12}\n * > multiplesOfNum(2, 5)\n * {5, 10}\n * > multiplesOfNum(9, 2)\n * {2, 4, 6, 8, 10, 12, 14, 16, 18}\n */\nvector<int> multiplesOfNum(int m, int n) {\n    vector<int> ans;\n    for(int i=0;i<m;i++){\n        ans.push_back(n*i);\n    }\n    return ans;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the first duplicate element in a given array of integers.\n * > findFirstDuplicate(vector<int>{1, 2, 3, 4, 4, 5})\n * 4\n * > findFirstDuplicate(vector<int>{1, 2, 3, 4})\n * -1\n * > findFirstDuplicate(vector<int>{1, 1, 2, 3, 3, 2, 2})\n * 1\n */\nint findFirstDuplicate(vector<int> nums) {\n    unordered_set<int> s;\n    for(int i: nums){\n        if(s.find(i) != s.end()) return i;\n        s.insert(i);\n    }\n    return -1;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the maximum sum of elements of list in a list of lists.\n * > maximumSum(vector<vector<int>>{{1, 2, 3}, {4, 5, 6}, {10, 11, 12}, {7, 8, 9}})\n * 33\n * > maximumSum(vector<vector<int>>{{0, 1, 1}, {1, 1, 2}, {3, 2, 1}})\n * 6\n * > maximumSum(vector<vector<int>>{{0, 1, 3}, {1, 2, 1}, {9, 8, 2}, {0, 1, 0}, {6, 4, 8}})\n * 19\n */\nint maximumSum(vector<vector<int>> list1) {\n    int max_sum = INT_MIN;\n    for(auto i: list1){\n        int sum = 0;\n        for(auto j: i)\n            sum += j;\n        max_sum = max(max_sum, sum);\n    }\n    return max_sum;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert the given binary number to its decimal equivalent.\n * > binaryToDecimal(100)\n * 4\n * > binaryToDecimal(1011)\n * 11\n * > binaryToDecimal(1101101)\n * 109\n */\nint binaryToDecimal(int binary) {\n    int decimal = 0;\n    int base = 1;\n    while(binary > 0){\n        int lastDigit = binary % 10;\n        decimal += lastDigit * base;\n        base *= 2;\n        binary /= 10;\n    }\n    return decimal;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the product of non-repeated elements in a given array.\n * > findProduct(vector<int>{1, 1, 2, 3}, 4)\n * 6\n * > findProduct(vector<int>{1, 2, 3, 1, 1}, 5)\n * 6\n * > findProduct(vector<int>{1, 1, 4, 5, 6}, 5)\n * 120\n */\nint findProduct(vector<int> arr, int n) {\n    int prod = 1;\n    unordered_map<int, int> mp;\n    for(int i = 0; i < n; i++){\n        mp[arr[i]]++;\n    }\n    for(int i = 0; i < n; i++){\n        if(mp[arr[i]] == 1){\n            prod *= arr[i];\n        }\n    }\n    return prod;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if the given tuple list has all k elements.\n * > checkKElements(vector<vector<int>>{{4, 4}, {4, 4, 4}, {4, 4}, {4, 4, 4, 4}, {4}}, 4)\n * true\n * > checkKElements(vector<vector<int>>{{7, 7, 7}, {7, 7}}, 7)\n * true\n * > checkKElements(vector<vector<int>>{{9, 9}, {9, 9, 9, 9}}, 7)\n * false\n */\nbool checkKElements(vector<vector<int>> testList, int k) {\n    int count = 0;\n    for(auto i: testList){\n        if(i.size() == k)\n            count++;\n    }\n    return count == testList.size();\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to remove all digits from a list of strings.\n * > remove(vector<string>{string(\"4words\"), string(\"3letters\"), string(\"4digits\")})\n * {string(\"words\"), string(\"letters\"), string(\"digits\")}\n * > remove(vector<string>{string(\"28Jan\"), string(\"12Jan\"), string(\"11Jan\")})\n * {string(\"Jan\"), string(\"Jan\"), string(\"Jan\")}\n * > remove(vector<string>{string(\"wonder1\"), string(\"wonder2\"), string(\"wonder3\")})\n * {string(\"wonder\"), string(\"wonder\"), string(\"wonder\")}\n */\nvector<string> remove(vector<string> list) {\n    for(int i=0;i<list.size();i++){\n        list[i].erase(remove_if(list[i].begin(), list[i].end(), ::isdigit), list[i].end());\n    }\n    return list;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find binomial co-efficient.\n * > binomialCoeff(5, 2)\n * 10\n * > binomialCoeff(4, 3)\n * 4\n * > binomialCoeff(3, 2)\n * 3\n */\nint binomialCoeff(int n, int k) {\n    int res = 1;\n    for(int i = 0; i < k; i++){\n        res *= (n - i);\n        res /= (i + 1);\n    }\n    return res;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the element occurring odd number of times.\n * > getOddOccurrence(vector<int>{1, 2, 3, 1, 2, 3, 1}, 7)\n * 1\n * > getOddOccurrence(vector<int>{1, 2, 3, 2, 3, 1, 3}, 7)\n * 3\n * > getOddOccurrence(vector<int>{2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2}, 13)\n * 5\n */\nint getOddOccurrence(vector<int> arr, int arrSize) {\n    unordered_map<int, int> mp;\n    for(int i=0;i<arrSize;i++){\n        mp[arr[i]]++;\n    }\n    for(auto it=mp.begin();it!=mp.end();it++){\n        if(it->second%2!=0){\n            return it->first;\n        }\n    }\n    return -1;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count all the substrings starting and ending with same characters.\n * > countSubstringWithEqualEnds(string(\"abc\"))\n * 3\n * > countSubstringWithEqualEnds(string(\"abcda\"))\n * 6\n * > countSubstringWithEqualEnds(string(\"ab\"))\n * 2\n */\nint countSubstringWithEqualEnds(string s) {\n    int n = s.length();\n    int ans = 0;\n    for(int i=0;i<n;i++){\n        for(int j=i+1;j<n;j++){\n            if(s[i]==s[j]) ans++;\n        }\n    }\n    return ans;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\n * > func(vector<vector<int>>{{1, 2, 6}, {1, 3, 4, 5, 7, 8}, {1, 3, 5, 6, 8, 9}, {2, 5, 7, 11}, {1, 4, 7, 8, 12}}, 3)\n * {5, 7, 1}\n * > func(vector<vector<int>>{{1, 2, 6}, {1, 3, 4, 5, 7, 8}, {1, 3, 5, 6, 8, 9}, {2, 5, 7, 11}, {1, 4, 7, 8, 12}}, 1)\n * {1}\n * > func(vector<vector<int>>{{1, 2, 6}, {1, 3, 4, 5, 7, 8}, {1, 3, 5, 6, 8, 9}, {2, 5, 7, 11}, {1, 4, 7, 8, 12}}, 5)\n * {6, 5, 7, 8, 1}\n */\nvector<int> func(vector<vector<int>> nums, int k) {\n    priority_queue<pair<int, int>> pq;\n    for(auto &v: nums) {\n        for(auto &i: v) {\n            if(pq.size() < k) {\n                pq.push({i, 1});\n            } else {\n                if(i == pq.top().first) {\n                    pq.top().second++;\n                } else {\n                    pq.pop();\n                    pq.push({i, 1});\n                }\n            }\n        }\n    }\n    vector<int> ans;\n    while(!pq.empty()) {\n        ans.push_back(pq.top().first);\n        pq.pop();\n    }\n    reverse(ans.begin(), ans.end());\n    return ans;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the largest prime factor of a given number.\n * > maxPrimeFactors(15)\n * 5\n * > maxPrimeFactors(6)\n * 3\n * > maxPrimeFactors(2)\n * 2\n */\nint maxPrimeFactors(int n) {\n    int ans = 0;\n    for(int i = 2; i <= sqrt(n); i++){\n        if(n%i == 0){\n            ans = i;\n            while(n%i == 0){\n                n /= i;\n            }\n        }\n    }\n    if(n > 1) ans = n;\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to convert a decimal number to binary number.\n * > decimalToBinary(10)\n * 1010\n * > decimalToBinary(1)\n * 1\n * > decimalToBinary(20)\n * 10100\n */\nint decimalToBinary(int n) {\n    string s;\n    while(n){\n        s = to_string(n%2) + s;\n        n /= 2;\n    }\n    return s;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the missing number in a sorted array.\n * > findMissing(vector<int>{1, 2, 3, 5}, 4)\n * 4\n * > findMissing(vector<int>{1, 3, 4, 5}, 4)\n * 2\n * > findMissing(vector<int>{1, 2, 3, 5, 6, 7}, 5)\n * 4\n */\nint findMissing(vector<int> ar, int n) {\n    int sum = 0;\n    for(int i = 0; i < n; i++)\n        sum += ar[i];\n    return (n*(n+1))/2 - sum;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the n-th rectangular number.\n * > findRectNum(4)\n * 20\n * > findRectNum(5)\n * 30\n * > findRectNum(6)\n * 42\n */\nint findRectNum(int n) {\n    return n*(n+1)*(2*n+1)/6;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the nth digit in the proper fraction of two given numbers.\n * > findNthDigit(1, 2, 1)\n * 5\n * > findNthDigit(3, 5, 1)\n * 6\n * > findNthDigit(5, 6, 5)\n * 3\n */\nint findNthDigit(int p, int q, int n) {\n    int count = 0;\n    int num = 0;\n    while(count < n){\n        num = (p/q);\n        count += (int)log10(num)+1;\n        p = (p%q)*10;\n    }\n    return num%10;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the division of first even and odd number of a given list.\n * > divEvenOdd(vector<int>{1, 3, 5, 7, 4, 1, 6, 8})\n * 4\n * > divEvenOdd(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n * 2\n * > divEvenOdd(vector<int>{1, 5, 7, 9, 10})\n * 10\n */\nint divEvenOdd(vector<int> list1) {\n    int even = 0, odd = 0;\n    for(int i = 0; i < list1.size(); i++){\n        if(list1[i] % 2 == 0) even += list1[i];\n        else odd += list1[i];\n    }\n    return even / odd;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n * > rearangeString(string(\"aab\"))\n * string(\"aba\")\n * > rearangeString(string(\"aabb\"))\n * string(\"abab\")\n * > rearangeString(string(\"abccdd\"))\n * string(\"cdabcd\")\n */\nstring rearangeString(string s) {\n    unordered_map<char, int> m;\n    for(char c: s) m[c]++;\n    string ans;\n    for(char c: s) {\n        if(m[c] > 0) {\n            ans += c;\n            m[c]--;\n        }\n    }\n    return ans;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find frequency of the elements in a given list of lists using collections module.\n * > freqElement(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}})\n * {{2, 3}, {1, 2}, {5, 2}, {3, 1}, {4, 1}, {6, 1}, {7, 1}, {9, 1}}\n * > freqElement(vector<vector<int>>{{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}})\n * {{1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}, {6, 1}, {7, 1}, {8, 1}, {9, 1}, {10, 1}, {11, 1}, {12, 1}}\n * > freqElement(vector<vector<int>>{{15, 20, 30, 40}, {80, 90, 100, 110}, {30, 30, 80, 90}})\n * {{30, 3}, {80, 2}, {90, 2}, {15, 1}, {20, 1}, {40, 1}, {100, 1}, {110, 1}}\n */\nunordered_map<int, int> freqElement(vector<vector<int>> nums) {\n    unordered_map<int, int> ans;\n    for(auto v: nums)\n        for(auto x: v)\n            ans[x]++;\n    return ans;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to filter even numbers using lambda function.\n * > filterEvennumbers(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n * {2, 4, 6, 8, 10}\n * > filterEvennumbers(vector<int>{10, 20, 45, 67, 84, 93})\n * {10, 20, 84}\n * > filterEvennumbers(vector<int>{5, 7, 9, 8, 6, 4, 3})\n * {8, 6, 4}\n */\nvector<int> filterEvennumbers(vector<int> nums) {\n    return vector<int>(remove_if(nums.begin(), nums.end(), [](int x){return x%2;}), nums.end());\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of repeated elements in a given array.\n * > findSum(vector<int>{1, 2, 3, 1, 1, 4, 5, 6}, 8)\n * 3\n * > findSum(vector<int>{1, 2, 3, 1, 1}, 5)\n * 3\n * > findSum(vector<int>{1, 1, 2}, 3)\n * 2\n */\nint findSum(vector<int> arr, int n) {\n    int sum = 0;\n    for(int i = 0; i < n; i++){\n        for(int j = i+1; j < n; j++){\n            if(arr[i] == arr[j]){\n                sum += arr[i];\n            }\n        }\n    }\n    return sum;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find sequences of lowercase letters joined with an underscore using regex.\n * > textMatch(string(\"aab_cbbbc\"))\n * string(\"Found a match!\")\n * > textMatch(string(\"aab_Abbbc\"))\n * string(\"Not matched!\")\n * > textMatch(string(\"Aaab_abbbc\"))\n * string(\"Not matched!\")\n */\nstring textMatch(string text) {\n    if(regex_match(text, regex(\"[a-z]+(_[a-z]+)*\")))\n        return \"Found a match!\";\n    else\n        return \"Not matched!\";\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function that matches a word at the beginning of a string.\n * > textMatchString(string(\" python\"))\n * string(\"Not matched!\")\n * > textMatchString(string(\"python\"))\n * string(\"Found a match!\")\n * > textMatchString(string(\"  lang\"))\n * string(\"Not matched!\")\n */\nstring textMatchString(string text) {\n  if(text.substr(0,6) == \"python\"){\n    return \"Found a match!\";\n  }\n  return \"Not matched!\";\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the gcd of the given array elements.\n * > getGcd(vector<int>{2, 4, 6, 8, 16})\n * 2\n * > getGcd(vector<int>{1, 2, 3})\n * 1\n * > getGcd(vector<int>{2, 4, 6, 8})\n * 2\n */\nint getGcd(vector<int> l) {\n    int ans = l[0];\n    for(int i=1;i<l.size();i++){\n        ans = gcd(ans,l[i]);\n    }\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to determine whether all the numbers are different from each other are not.\n * > testDistinct(vector<int>{1, 5, 7, 9})\n * true\n * > testDistinct(vector<int>{2, 4, 5, 5, 7, 9})\n * false\n * > testDistinct(vector<int>{1, 2, 3})\n * true\n */\nbool testDistinct(vector<int> data) {\n    return (data.size() == (int)unique(data.begin(), data.end()).size());\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the last digit when factorial of a divides factorial of b.\n * > computeLastDigit(2, 4)\n * 2\n * > computeLastDigit(6, 8)\n * 6\n * > computeLastDigit(1, 2)\n * 2\n */\nint computeLastDigit(int a, int b) {\n    return (a/b)%10;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to set all odd bits of a given number.\n * > oddBitSetNumber(10)\n * 15\n * > oddBitSetNumber(20)\n * 21\n * > oddBitSetNumber(30)\n * 31\n */\nint oddBitSetNumber(int n) {\n    return n | (n-1);\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract every first or specified element from a given two-dimensional list.\n * > specifiedElement(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}}, 0)\n * {1, 4, 7}\n * > specifiedElement(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}}, 2)\n * {3, 6, 9}\n * > specifiedElement(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}}, 1)\n * {2, 5, 1}\n */\nvector<int> specifiedElement(vector<vector<int>> nums, int n) {\n    vector<int> ans;\n    for(auto i: nums)\n        ans.push_back(i[n]);\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to print check if the triangle is equilateral or not.\n * > checkEquilateral(6, 8, 12)\n * false\n * > checkEquilateral(6, 6, 12)\n * false\n * > checkEquilateral(6, 6, 6)\n * true\n */\nbool checkEquilateral(int x, int y, int z) {\n    return (x==y && y==z);\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to caluclate area of a parallelogram.\n * > parallelogramArea(10, 20)\n * 200\n * > parallelogramArea(15, 20)\n * 300\n * > parallelogramArea(8, 9)\n * 72\n */\nint parallelogramArea(int b, int h) {\n    return b*h;\n}\n\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the first and last characters of a given string are equal or not.\n * > checkEquality(string(\"abcda\"))\n * string(\"Equal\")\n * > checkEquality(string(\"ab\"))\n * string(\"Not Equal\")\n * > checkEquality(string(\"mad\"))\n * string(\"Not Equal\")\n */\nstring checkEquality(string str) {\n    if(str[0] == str[str.length()-1]){\n        return \"Equal\";\n    }\n    return \"Not Equal\";\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort the given array by using counting sort.\n * > countingSort(vector<int>{1, 23, 4, 5, 6, 7, 8})\n * {1, 4, 5, 6, 7, 8, 23}\n * > countingSort(vector<int>{12, 9, 28, 33, 69, 45})\n * {9, 12, 28, 33, 45, 69}\n * > countingSort(vector<int>{8, 4, 14, 3, 2, 1})\n * {1, 2, 3, 4, 8, 14}\n */\nvector<int> countingSort(vector<int> myList) {\n    vector<int> result;\n    int max = *max_element(myList.begin(), myList.end());\n    vector<int> count(max + 1, 0);\n    for (int i = 0; i < myList.size(); i++) {\n        count[myList[i]]++;\n    }\n    for (int i = 1; i < count.size(); i++) {\n        count[i] += count[i - 1];\n    }\n    for (int i = myList.size() - 1; i >= 0; i--) {\n        result.insert(result.begin() + count[myList[i]] - 1, myList[i]);\n        count[myList[i]]--;\n    }\n    return result;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find t-nth term of geometric series.\n * > tnGp(1, 5, 2)\n * 16\n * > tnGp(1, 5, 4)\n * 256\n * > tnGp(2, 6, 3)\n * 486\n */\nint tnGp(int a, int n, int r) {\n    return a * pow(r, n-1);\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check if a given number is one less than twice its reverse.\n * > check(70)\n * false\n * > check(23)\n * false\n * > check(73)\n * true\n */\nbool check(int n) {\n    int rev = 0;\n    while(n>0){\n        rev = rev*10 + n%10;\n        n /= 10;\n    }\n    return (rev == n+1);\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the largest number that can be formed with the given digits.\n * > findMaxNum(vector<int>{1, 2, 3}, 3)\n * 321\n * > findMaxNum(vector<int>{4, 5, 6, 1}, 4)\n * 6541\n * > findMaxNum(vector<int>{1, 2, 3, 9}, 4)\n * 9321\n */\nint findMaxNum(vector<int> arr, int n) {\n    int ans = 0;\n    for(int i = 0; i < n; i++){\n        int num = 0;\n        for(int j = i; j < n; j++){\n            num = num * 10 + arr[j];\n        }\n        ans = max(ans, num);\n    }\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given two integers have opposite sign or not.\n * > oppositeSigns(1, -2)\n * true\n * > oppositeSigns(3, 2)\n * false\n * > oppositeSigns(-10, -10)\n * false\n */\nbool oppositeSigns(int x, int y) {\n    return (x ^ y) < 0;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the nth octagonal number.\n * > isOctagonal(5)\n * 65\n * > isOctagonal(10)\n * 280\n * > isOctagonal(15)\n * 645\n */\nint isOctagonal(int n) {\n    int i = 1;\n    while(true){\n        if(i*i*2+i*2 == n) return n;\n        i++;\n    }\n    return -1;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\n * > maxLenSub(vector<int>{2, 5, 6, 3, 7, 6, 5, 8}, 8)\n * 5\n * > maxLenSub(vector<int>{-2, -1, 5, -1, 4, 0, 3}, 7)\n * 4\n * > maxLenSub(vector<int>{9, 11, 13, 15, 18}, 5)\n * 1\n */\nint maxLenSub(vector<int> arr, int n) {\n    int ans = 0;\n    for(int i = 0; i < n; i++){\n        int j = i;\n        int diff = arr[i];\n        while(j < n && diff <= arr[j]){\n            diff = max(diff, arr[j]);\n            j++;\n        }\n        ans = max(ans, j - i);\n    }\n    return ans;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count number of substrings with the sum of digits equal to their length.\n * > countSubstrings(string(\"112112\"), 6)\n * 6\n * > countSubstrings(string(\"111\"), 3)\n * 6\n * > countSubstrings(string(\"1101112\"), 7)\n * 12\n */\nint countSubstrings(string s, int n) {\n    int count = 0;\n    for(int i = 0; i < s.length(); i++){\n        int sum = 0;\n        for(int j = i; j < s.length(); j++){\n            sum += s[j] - '0';\n            if(sum == j - i + 1)\n                count++;\n        }\n    }\n    return count;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find smallest number in a list.\n * > smallestNum(vector<int>{10, 20, 1, 45, 99})\n * 1\n * > smallestNum(vector<int>{1, 2, 3})\n * 1\n * > smallestNum(vector<int>{45, 46, 50, 60})\n * 45\n */\nint smallestNum(vector<int> xs) {\n    return *min_element(xs.begin(), xs.end());\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum difference between available pairs in the given tuple list.\n * > maxDifference(vector<vector<int>>{{3, 5}, {1, 7}, {10, 3}, {1, 2}})\n * 7\n * > maxDifference(vector<vector<int>>{{4, 6}, {2, 17}, {9, 13}, {11, 12}})\n * 15\n * > maxDifference(vector<vector<int>>{{12, 35}, {21, 27}, {13, 23}, {41, 22}})\n * 23\n */\nint maxDifference(vector<vector<int>> testList) {\n    int maxDiff = 0;\n    for(int i=0; i<testList.size(); i++){\n        for(int j=i+1; j<testList.size(); j++){\n            int diff = abs(testList[i][0] - testList[j][0]) + abs(testList[i][1] - testList[j][1]);\n            if(diff > maxDiff)\n                maxDiff = diff;\n        }\n    }\n    return maxDiff;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count positive numbers in a list.\n * > posCount(vector<int>{1, -2, 3, -4})\n * 2\n * > posCount(vector<int>{3, 4, 5, -1})\n * 3\n * > posCount(vector<int>{1, 2, 3, 4})\n * 4\n */\nint posCount(vector<int> list) {\n    int count = 0;\n    for(int i = 0; i < list.size(); i++){\n        if(list[i] > 0){\n            count++;\n        }\n    }\n    return count;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given array is monotonic or not.\n * > isMonotonic(vector<int>{6, 5, 4, 4})\n * true\n * > isMonotonic(vector<int>{1, 2, 2, 3})\n * true\n * > isMonotonic(vector<int>{1, 3, 2})\n * false\n */\nbool isMonotonic(vector<int> a) {\n    int n = a.size();\n    for(int i=0; i<n-1; i++){\n        if(a[i] > a[i+1]) return false;\n    }\n    return true;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether a list contains the given sublist or not.\n * > isSublist(vector<int>{2, 4, 3, 5, 7}, vector<int>{3, 7})\n * false\n * > isSublist(vector<int>{2, 4, 3, 5, 7}, vector<int>{4, 3})\n * true\n * > isSublist(vector<int>{2, 4, 3, 5, 7}, vector<int>{1, 6})\n * false\n */\nbool isSublist(vector<int> l, vector<int> s) {\n    return equal(s.begin(), s.end(), l.begin());\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find whether all the given tuples have equal length or not.\n * > getEqual(vector<vector<int>>{{11, 22, 33}, {44, 55, 66}}, 3)\n * string(\"All tuples have same length\")\n * > getEqual(vector<vector<int>>{{1, 2, 3}, {4, 5, 6, 7}}, 3)\n * string(\"All tuples do not have same length\")\n * > getEqual(vector<vector<int>>{{1, 2}, {3, 4}}, 2)\n * string(\"All tuples have same length\")\n */\nstring getEqual(vector<vector<int>> input, int k) {\n    for(auto i:input){\n        if(i.size()!=k) return \"All tuples do not have same length\";\n    }\n    return \"All tuples have same length\";\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort a list of elements using comb sort.\n * > combSort(vector<int>{5, 15, 37, 25, 79})\n * {5, 15, 25, 37, 79}\n * > combSort(vector<int>{41, 32, 15, 19, 22})\n * {15, 19, 22, 32, 41}\n * > combSort(vector<int>{99, 15, 13, 47})\n * {13, 15, 47, 99}\n */\nvector<int> combSort(vector<int> nums) {\n    int gap = nums.size();\n    bool swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = (gap * 10) / 13;\n        }\n        swapped = false;\n        for (int i = 0; i < nums.size() - gap; i++) {\n            if (nums[i] > nums[i + gap]) {\n                swap(nums[i], nums[i + gap]);\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given number can be represented as difference of two squares or not.\n * > difSquare(5)\n * true\n * > difSquare(10)\n * false\n * > difSquare(15)\n * true\n */\nbool difSquare(int n) {\n    int sq = sqrt(n);\n    return (sq * sq == n);\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to split the given string with multiple delimiters by using regex.\n * > multipleSplit(string(\"Forces of the \\ndarkness*are coming into the play.\"))\n * {string(\"Forces of the \"), string(\"darkness\"), string(\"are coming into the play.\")}\n * > multipleSplit(string(\"Mi Box runs on the \\n Latest android*which has google assistance and chromecast.\"))\n * {string(\"Mi Box runs on the \"), string(\" Latest android\"), string(\"which has google assistance and chromecast.\")}\n * > multipleSplit(string(\"Certain services\\nare subjected to change*over the seperate subscriptions.\"))\n * {string(\"Certain services\"), string(\"are subjected to change\"), string(\"over the seperate subscriptions.\")}\n */\nvector<string> multipleSplit(string text) {\n    vector<string> ans;\n    string pattern = \"\\\\s+|\\\\*+\";\n    regex rgx(pattern);\n    sregex_token_iterator it(text.begin(), text.end(), rgx, -1);\n    sregex_token_iterator reg;\n    while (it != reg) {\n        ans.push_back(*it);\n        it++;\n    }\n    return ans;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether it follows the sequence given in the patterns array.\n * > isSamepatterns(vector<string>{string(\"red\"), string(\"green\"), string(\"green\")}, vector<string>{string(\"a\"), string(\"b\"), string(\"b\")})\n * true\n * > isSamepatterns(vector<string>{string(\"red\"), string(\"green\"), string(\"greenn\")}, vector<string>{string(\"a\"), string(\"b\"), string(\"b\")})\n * false\n * > isSamepatterns(vector<string>{string(\"red\"), string(\"green\"), string(\"greenn\")}, vector<string>{string(\"a\"), string(\"b\")})\n * false\n */\nbool isSamepatterns(vector<string> colors, vector<string> patterns) {\n    int n = colors.size();\n    int m = patterns.size();\n    if(n != m) return false;\n    for(int i = 0; i < n; i++){\n        if(colors[i] != patterns[i]) return false;\n    }\n    return true;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n * > findTuples(vector<vector<int>>{{6, 24, 12}, {7, 9, 6}, {12, 18, 21}}, 6)\n * string(\"[(6, 24, 12)]\")\n * > findTuples(vector<vector<int>>{{5, 25, 30}, {4, 2, 3}, {7, 8, 9}}, 5)\n * string(\"[(5, 25, 30)]\")\n * > findTuples(vector<vector<int>>{{7, 9, 16}, {8, 16, 4}, {19, 17, 18}}, 4)\n * string(\"[(8, 16, 4)]\")\n */\nstring findTuples(vector<vector<int>> testList, int k) {\n    vector<vector<int>> ans;\n    for(auto i:testList){\n        bool flag=true;\n        for(auto j:i){\n            if(j%k!=0)\n                flag=false;\n        }\n        if(flag)\n            ans.push_back(i);\n    }\n    if(ans.size()==0)\n        return \"[]\";\n    string s=\"[\";\n    for(int i=0;i<ans.size();i++){\n        s+=to_string(ans[i][0])+\" \";\n        s+=to_string(ans[i][1])+\" \";\n        s+=to_string(ans[i][2])+\", \";\n    }\n    s.pop_back();\n    s.pop_back();\n    s.pop_back();\n    s.pop_back();\n    s+=\"]\";\n    return s;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the number of squares in a rectangle.\n * > countSquares(4, 3)\n * 20\n * > countSquares(2, 2)\n * 5\n * > countSquares(1, 1)\n * 1\n */\nint countSquares(int m, int n) {\n    return (m * n) * (m + n + 1) / 2;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the difference between sum of even and odd digits.\n * > isDiff(1212112)\n * true\n * > isDiff(1212)\n * false\n */\nbool isDiff(int n) {\n    int sum = 0;\n    while(n){\n        int last = n%10;\n        n/=10;\n        if(last%2==0) sum+=last;\n        else sum-=last;\n    }\n    return sum==0;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find number of integers with odd number of set bits.\n * > countWithOddSetbits(5)\n * 3\n * > countWithOddSetbits(10)\n * 5\n * > countWithOddSetbits(15)\n * 8\n */\nint countWithOddSetbits(int n) {\n    int count = 0;\n    for(int i = 1; i <= n; i++){\n        int count_set_bits = 0;\n        while(i){\n            if(i & 1)\n                count_set_bits++;\n            i >>= 1;\n        }\n        if(count_set_bits & 1)\n            count++;\n    }\n    return count;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the length of the word is odd or not.\n * > wordLen(string(\"Hadoop\"))\n * false\n * > wordLen(string(\"great\"))\n * true\n * > wordLen(string(\"structure\"))\n * true\n */\nbool wordLen(string s) {\n    return s.length()%2==1;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the nth tetrahedral number.\n * > tetrahedralNumber(5)\n * 35.0\n * > tetrahedralNumber(6)\n * 56.0\n * > tetrahedralNumber(7)\n * 84.0\n */\ndouble tetrahedralNumber(int n) {\n  return (n * (n + 1) * (2 * n + 1)) / 6;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to zip the two given tuples.\n * > zipTuples(vector<int>{7, 8, 4, 5, 9, 10}, vector<int>{1, 5, 6})\n * {{7, 1}, {8, 5}, {4, 6}, {5, 1}, {9, 5}, {10, 6}}\n * > zipTuples(vector<int>{8, 9, 5, 6, 10, 11}, vector<int>{2, 6, 7})\n * {{8, 2}, {9, 6}, {5, 7}, {6, 2}, {10, 6}, {11, 7}}\n * > zipTuples(vector<int>{9, 10, 6, 7, 11, 12}, vector<int>{3, 7, 8})\n * {{9, 3}, {10, 7}, {6, 8}, {7, 3}, {11, 7}, {12, 8}}\n */\nvector<vector<int>> zipTuples(vector<int> testTup1, vector<int> testTup2) {\n    vector<vector<int>> ans;\n    for(int i=0;i<testTup1.size();i++){\n        vector<int> temp;\n        temp.push_back(testTup1[i]);\n        temp.push_back(testTup2[i]);\n        ans.push_back(temp);\n    }\n    return ans;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the volume of a sphere.\n * > volumeSphere(10)\n * 4188.790204786391\n * > volumeSphere(25)\n * 65449.84694978735\n * > volumeSphere(20)\n * 33510.32163829113\n */\ndouble volumeSphere(int r) {\n  return (4.0/3.0)*3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172555859375*r*r*r;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the character made by adding all the characters of the given string.\n * > getChar(string(\"abc\"))\n * string(\"f\")\n * > getChar(string(\"gfg\"))\n * string(\"t\")\n * > getChar(string(\"ab\"))\n * string(\"c\")\n */\nstring getChar(string strr) {\n    string ans;\n    for(int i=0;i<strr.length();i++){\n        ans+=strr[i];\n    }\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the n-th number in newman conway sequence.\n * > sequence(10)\n * 6\n * > sequence(2)\n * 1\n * > sequence(3)\n * 2\n */\nint sequence(int n) {\n    if(n==1) return 1;\n    if(n==2) return 1;\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1));\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the surface area of a sphere.\n * > surfaceareaSphere(10)\n * 1256.6370614359173\n * > surfaceareaSphere(15)\n * 2827.4333882308138\n * > surfaceareaSphere(20)\n * 5026.548245743669\n */\ndouble surfaceareaSphere(int r) {\n  return 4*3.141592653589793*r*r;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find nth centered hexagonal number.\n * > centeredHexagonalNumber(10)\n * 271\n * > centeredHexagonalNumber(2)\n * 7\n * > centeredHexagonalNumber(9)\n * 217\n */\nint centeredHexagonalNumber(int n) {\n    return (n * (2 * n - 1)) / 2;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to merge three dictionaries into a single expression.\n * > mergeDictionariesThree(unordered_map<string, string>{{string(\"R\"), string(\"Red\")}, {string(\"B\"), string(\"Black\")}, {string(\"P\"), string(\"Pink\")}}, unordered_map<string, string>{{string(\"G\"), string(\"Green\")}, {string(\"W\"), string(\"White\")}}, unordered_map<string, string>{{string(\"O\"), string(\"Orange\")}, {string(\"W\"), string(\"White\")}, {string(\"B\"), string(\"Black\")}})\n * {{string(\"B\"), string(\"Black\")}, {string(\"R\"), string(\"Red\")}, {string(\"P\"), string(\"Pink\")}, {string(\"G\"), string(\"Green\")}, {string(\"W\"), string(\"White\")}, {string(\"O\"), string(\"Orange\")}}\n * > mergeDictionariesThree(unordered_map<string, string>{{string(\"R\"), string(\"Red\")}, {string(\"B\"), string(\"Black\")}, {string(\"P\"), string(\"Pink\")}}, unordered_map<string, string>{{string(\"G\"), string(\"Green\")}, {string(\"W\"), string(\"White\")}}, unordered_map<string, string>{{string(\"L\"), string(\"lavender\")}, {string(\"B\"), string(\"Blue\")}})\n * {{string(\"W\"), string(\"White\")}, {string(\"P\"), string(\"Pink\")}, {string(\"B\"), string(\"Black\")}, {string(\"R\"), string(\"Red\")}, {string(\"G\"), string(\"Green\")}, {string(\"L\"), string(\"lavender\")}}\n * > mergeDictionariesThree(unordered_map<string, string>{{string(\"R\"), string(\"Red\")}, {string(\"B\"), string(\"Black\")}, {string(\"P\"), string(\"Pink\")}}, unordered_map<string, string>{{string(\"L\"), string(\"lavender\")}, {string(\"B\"), string(\"Blue\")}}, unordered_map<string, string>{{string(\"G\"), string(\"Green\")}, {string(\"W\"), string(\"White\")}})\n * {{string(\"B\"), string(\"Black\")}, {string(\"P\"), string(\"Pink\")}, {string(\"R\"), string(\"Red\")}, {string(\"G\"), string(\"Green\")}, {string(\"L\"), string(\"lavender\")}, {string(\"W\"), string(\"White\")}}\n */\nunordered_map<string, string> mergeDictionariesThree(unordered_map<string, string> dict1, unordered_map<string, string> dict2, unordered_map<string, string> dict3) {\n    unordered_map<string, string> result;\n    for (auto it = dict1.begin(); it != dict1.end(); it++) {\n        result[it->first] = it->second;\n    }\n    for (auto it = dict2.begin(); it != dict2.end(); it++) {\n        result[it->first] = it->second;\n    }\n    for (auto it = dict3.begin(); it != dict3.end(); it++) {\n        result[it->first] = it->second;\n    }\n    return result;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to get the frequency of the elements in a list.\n * > freqCount(vector<int>{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30})\n * {{10, 4}, {20, 4}, {40, 2}, {50, 2}, {30, 1}}\n * > freqCount(vector<int>{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4})\n * {{1, 3}, {2, 2}, {3, 3}, {4, 3}}\n * > freqCount(vector<int>{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5})\n * {{10, 1}, {5, 3}, {6, 2}, {7, 2}, {4, 2}, {9, 2}}\n */\nunordered_map<int, int> freqCount(vector<int> list1) {\n    unordered_map<int, int> map;\n    for(int i: list1)\n        map[i]++;\n    return map;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the closest smaller number than n.\n * > closestNum(11)\n * 10\n * > closestNum(7)\n * 6\n * > closestNum(12)\n * 11\n */\nint closestNum(int n) {\n    return n-1;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the length of the longest word.\n * > lenLog(vector<string>{string(\"python\"), string(\"PHP\"), string(\"bigdata\")})\n * 7\n * > lenLog(vector<string>{string(\"a\"), string(\"ab\"), string(\"abc\")})\n * 3\n * > lenLog(vector<string>{string(\"small\"), string(\"big\"), string(\"tall\")})\n * 5\n */\nint lenLog(vector<string> list1) {\n    int max = 0;\n    for(int i = 0; i < list1.size(); i++){\n        if(list1[i].size() > max)\n            max = list1[i].size();\n    }\n    return max;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if a substring is present in a given list of string values.\n * > findSubstring(vector<string>{string(\"red\"), string(\"black\"), string(\"white\"), string(\"green\"), string(\"orange\")}, string(\"ack\"))\n * true\n * > findSubstring(vector<string>{string(\"red\"), string(\"black\"), string(\"white\"), string(\"green\"), string(\"orange\")}, string(\"abc\"))\n * false\n * > findSubstring(vector<string>{string(\"red\"), string(\"black\"), string(\"white\"), string(\"green\"), string(\"orange\")}, string(\"ange\"))\n * true\n */\nbool findSubstring(vector<string> str1, string subStr) {\n    for(int i=0; i<str1.size(); i++){\n        if(str1[i].find(subStr) != string::npos)\n            return true;\n    }\n    return false;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether the given number is undulating or not.\n * > isUndulating(string(\"1212121\"))\n * true\n * > isUndulating(string(\"1991\"))\n * false\n * > isUndulating(string(\"121\"))\n * true\n */\nbool isUndulating(string n) {\n    int i = 0;\n    while(i < n.length()-1){\n        if(n[i] == n[i+1]){\n            return false;\n        }\n        i++;\n    }\n    return true;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the value of 'a' to the power 'b'.\n * > power(3, 4)\n * 81\n * > power(2, 3)\n * 8\n * > power(5, 5)\n * 3125\n */\nint power(int a, int b) {\n    return (b == 0) ? 1 : a * power(a, b - 1);\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the minimum length of sublist.\n * > findMinLength(vector<vector<int>>{{1}, {1, 2}})\n * 1\n * > findMinLength(vector<vector<int>>{{1, 2}, {1, 2, 3}, {1, 2, 3, 4}})\n * 2\n * > findMinLength(vector<vector<int>>{{3, 3, 3}, {4, 4, 4, 4}})\n * 3\n */\nint findMinLength(vector<vector<int>> lst) {\n    int n = lst.size();\n    int m = lst[0].size();\n    int ans = INT_MAX;\n    for(int i = 0; i < n; i++){\n        unordered_set<int> s;\n        for(int j = 0; j < m; j++){\n            s.insert(lst[i][j]);\n        }\n        if(s.size() == m){\n            ans = min(ans, m);\n        }\n    }\n    return ans;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the number of divisors of a given integer.\n * > divisor(15)\n * 4\n * > divisor(12)\n * 6\n * > divisor(9)\n * 3\n */\nint divisor(int n) {\n    int count = 0;\n    for(int i = 1; i <= n; i++){\n        if(n % i == 0)\n            count++;\n    }\n    return count;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find frequency count of list of lists.\n * > frequencyLists(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 8, 9, 5}})\n * {{1, 1}, {2, 3}, {3, 1}, {4, 1}, {5, 2}, {6, 1}, {7, 1}, {8, 1}, {9, 1}}\n * > frequencyLists(vector<vector<int>>{{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}})\n * {{1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}, {6, 1}, {7, 1}, {8, 1}, {9, 1}, {10, 1}, {11, 1}, {12, 1}}\n * > frequencyLists(vector<vector<int>>{{20, 30, 40, 17}, {18, 16, 14, 13}, {10, 20, 30, 40}})\n * {{20, 2}, {30, 2}, {40, 2}, {17, 1}, {18, 1}, {16, 1}, {14, 1}, {13, 1}, {10, 1}}\n */\nunordered_map<int, int> frequencyLists(vector<vector<int>> list1) {\n    unordered_map<int, int> m;\n    for(auto v: list1) {\n        for(auto x: v) {\n            m[x]++;\n        }\n    }\n    return m;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to multiply all the numbers in a list and divide with the length of the list.\n * > multiplyNum(vector<int>{8, 2, 3, -1, 7})\n * -67.2\n * > multiplyNum(vector<int>{-10, -20, -30})\n * -2000.0\n * > multiplyNum(vector<int>{19, 15, 18})\n * 1710.0\n */\ndouble multiplyNum(vector<int> numbers) {\n    double sum = 1;\n    for(int i = 0; i < numbers.size(); i++){\n        sum *= numbers[i];\n    }\n    return sum/numbers.size();\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert the given decimal number to its binary equivalent.\n * > decimalToBinary(8)\n * string(\"1000\")\n * > decimalToBinary(18)\n * string(\"10010\")\n * > decimalToBinary(7)\n * string(\"111\")\n */\nstring decimalToBinary(int n) {\n    string s;\n    while(n){\n        s.push_back(n%2+'0');\n        n/=2;\n    }\n    reverse(s.begin(),s.end());\n    return s;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the next smallest palindrome of a specified number.\n * > nextSmallestPalindrome(99)\n * 101\n * > nextSmallestPalindrome(1221)\n * 1331\n * > nextSmallestPalindrome(120)\n * 121\n */\nint nextSmallestPalindrome(int num) {\n    string s = to_string(num);\n    int n = s.size();\n    int i = 0;\n    while(i < n/2) {\n        if(s[i] != s[n-i-1]) {\n            s[i] = s[n-i-1];\n            break;\n        }\n        i++;\n    }\n    if(i == n/2) {\n        s.insert(s.begin(), '1');\n    }\n    return stoi(s);\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the kth element in the given array.\n * > kthElement(vector<int>{12, 3, 5, 7, 19}, 5, 2)\n * 3\n * > kthElement(vector<int>{17, 24, 8, 23}, 4, 3)\n * 8\n * > kthElement(vector<int>{16, 21, 25, 36, 4}, 5, 4)\n * 36\n */\nint kthElement(vector<int> arr, int n, int k) {\n    sort(arr.begin(), arr.end());\n    return arr[k-1];\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert snake case string to camel case string.\n * > snakeToCamel(string(\"python_program\"))\n * string(\"PythonProgram\")\n * > snakeToCamel(string(\"python_language\"))\n * string(\"PythonLanguage\")\n * > snakeToCamel(string(\"programming_language\"))\n * string(\"ProgrammingLanguage\")\n */\nstring snakeToCamel(string word) {\n    string ans = \"\";\n    for(int i = 0; i < word.length(); i++){\n        if(word[i] == '_'){\n            ans += toupper(word[i+1]);\n            i++;\n        }\n        else{\n            ans += word[i];\n        }\n    }\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find eulerian number a(n, m).\n * > eulerianNum(3, 1)\n * 4\n * > eulerianNum(4, 1)\n * 11\n * > eulerianNum(5, 3)\n * 26\n */\nint eulerianNum(int n, int m) {\n    int ans = 0;\n    for(int i = 1; i <= n; i++){\n        ans += (i * (i - 1)) / 2;\n    }\n    return ans - m;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort each sublist of strings in a given list of lists using lambda function.\n * > sortSublists(vector<vector<string>>{{string(\"green\"), string(\"orange\")}, {string(\"black\"), string(\"white\")}, {string(\"white\"), string(\"black\"), string(\"orange\")}})\n * {{string(\"green\"), string(\"orange\")}, {string(\"black\"), string(\"white\")}, {string(\"black\"), string(\"orange\"), string(\"white\")}}\n * > sortSublists(vector<vector<string>>{{string(\" red \"), string(\"green\")}, {string(\"blue \"), string(\" black\")}, {string(\" orange\"), string(\"brown\")}})\n * {{string(\" red \"), string(\"green\")}, {string(\" black\"), string(\"blue \")}, {string(\" orange\"), string(\"brown\")}}\n * > sortSublists(vector<vector<string>>{{string(\"zilver\"), string(\"gold\")}, {string(\"magnesium\"), string(\"aluminium\")}, {string(\"steel\"), string(\"bronze\")}})\n * {{string(\"gold\"), string(\"zilver\")}, {string(\"aluminium\"), string(\"magnesium\")}, {string(\"bronze\"), string(\"steel\")}}\n */\nvector<vector<string>> sortSublists(vector<vector<string>> inputList) {\n    for(auto &v: inputList)\n        sort(v.begin(), v.end(), [](string a, string b){return a < b;});\n    return inputList;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count true booleans in the given list.\n * > count(vector<bool>{true, false, true})\n * 2\n * > count(vector<bool>{false, false})\n * 0\n * > count(vector<bool>{true, true, true})\n * 3\n */\nint count(vector<bool> lst) {\n    int count = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] == true){\n            count++;\n        }\n    }\n    return count;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to add the given list to the given tuples.\n * > addLists(vector<int>{5, 6, 7}, vector<int>{9, 10})\n * {9, 10, 5, 6, 7}\n * > addLists(vector<int>{6, 7, 8}, vector<int>{10, 11})\n * {10, 11, 6, 7, 8}\n * > addLists(vector<int>{7, 8, 9}, vector<int>{11, 12})\n * {11, 12, 7, 8, 9}\n */\nvector<int> addLists(vector<int> testList, vector<int> testTup) {\n    vector<int> result;\n    for(int i=0;i<testTup.size();i++){\n        result.push_back(testTup[i]);\n    }\n    for(int i=0;i<testList.size();i++){\n        result.push_back(testList[i]);\n    }\n    return result;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count hexadecimal numbers for a given range.\n * > countHexadecimal(10, 15)\n * 6\n * > countHexadecimal(2, 4)\n * 0\n * > countHexadecimal(15, 16)\n * 1\n */\nint countHexadecimal(int l, int r) {\n    int ans = 0;\n    for(int i = l; i <= r; i++){\n        if(to_string(i, 16).length() == to_string(i).length()){\n            ans++;\n        }\n    }\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n * > mergeSortedList(vector<int>{25, 24, 15, 4, 5, 29, 110}, vector<int>{19, 20, 11, 56, 25, 233, 154}, vector<int>{24, 26, 54, 48})\n * {4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233}\n * > mergeSortedList(vector<int>{1, 3, 5, 6, 8, 9}, vector<int>{2, 5, 7, 11}, vector<int>{1, 4, 7, 8, 12})\n * {1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12}\n * > mergeSortedList(vector<int>{18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1}, vector<int>{25, 35, 22, 85, 14, 65, 75, 25, 58}, vector<int>{12, 74, 9, 50, 61, 41})\n * {1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85}\n */\nvector<int> mergeSortedList(vector<int> num1, vector<int> num2, vector<int> num3) {\n    priority_queue<int, vector<int>, greater<int>> pq;\n    for (int i : num1) pq.push(i);\n    for (int i : num2) pq.push(i);\n    for (int i : num3) pq.push(i);\n    vector<int> ans;\n    while (!pq.empty()) {\n        ans.push_back(pq.top());\n        pq.pop();\n    }\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the count of rotations of a binary string with odd value.\n * > oddEquivalent(string(\"011001\"), 6)\n * 3\n * > oddEquivalent(string(\"11011\"), 5)\n * 4\n * > oddEquivalent(string(\"1010\"), 4)\n * 2\n */\nint oddEquivalent(string s, int n) {\n    int count = 0;\n    for(int i = 0; i < n; i++){\n        if(s[i] == '1'){\n            count++;\n        }\n    }\n    return count;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\n * > extractMissing(vector<vector<int>>{{6, 9}, {15, 34}, {48, 70}}, 2, 100)\n * {{2, 6}, {9, 100}, {9, 15}, {34, 100}, {34, 48}, {70, 100}}\n * > extractMissing(vector<vector<int>>{{7, 2}, {15, 19}, {38, 50}}, 5, 60)\n * {{5, 7}, {2, 60}, {2, 15}, {19, 60}, {19, 38}, {50, 60}}\n * > extractMissing(vector<vector<int>>{{7, 2}, {15, 19}, {38, 50}}, 1, 52)\n * {{1, 7}, {2, 52}, {2, 15}, {19, 52}, {19, 38}, {50, 52}}\n */\nvector<vector<int>> extractMissing(vector<vector<int>> testList, int strtVal, int stopVal) {\n    vector<vector<int>> ans;\n    int n = testList.size();\n    for(int i=0;i<n;i++){\n        if(testList[i][0]>strtVal){\n            ans.push_back({strtVal,testList[i][0]});\n        }\n        if(testList[i][1]<stopVal){\n            ans.push_back({testList[i][1],stopVal});\n        }\n    }\n    if(testList[n-1][1]<stopVal){\n        ans.push_back({testList[n-1][1],stopVal});\n    }\n    if(testList[0][0]>strtVal){\n        ans.push_back({strtVal,testList[0][0]});\n    }\n    return ans;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find common elements in given nested lists. * list item * list item * list item * list item\n * > commonInNestedLists(vector<vector<int>>{{12, 18, 23, 25, 45}, {7, 12, 18, 24, 28}, {1, 5, 8, 12, 15, 16, 18}})\n * {18, 12}\n * > commonInNestedLists(vector<vector<int>>{{12, 5, 23, 25, 45}, {7, 11, 5, 23, 28}, {1, 5, 8, 18, 23, 16}})\n * {5, 23}\n * > commonInNestedLists(vector<vector<int>>{{2, 3, 4, 1}, {4, 5}, {6, 4, 8}, {4, 5}, {6, 8, 4}})\n * {4}\n */\nvector<int> commonInNestedLists(vector<vector<int>> nestedlist) {\n    unordered_set<int> s;\n    for(auto i:nestedlist){\n        for(auto j:i){\n            s.insert(j);\n        }\n    }\n    vector<int> ans;\n    for(auto i:s){\n        int cnt=0;\n        for(auto j:nestedlist){\n            if(find(j.begin(),j.end(),i)!=j.end()){\n                cnt++;\n            }\n        }\n        if(cnt==nestedlist.size()){\n            ans.push_back(i);\n        }\n    }\n    return ans;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the perimeter of a cylinder.\n * > perimeter(2, 4)\n * 12\n * > perimeter(1, 2)\n * 6\n * > perimeter(3, 1)\n * 8\n */\nint perimeter(int diameter, int height) {\n    return 2 * (diameter + height);\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if a string represents an integer or not.\n * > checkInteger(string(\"python\"))\n * false\n * > checkInteger(string(\"1\"))\n * true\n * > checkInteger(string(\"12345\"))\n * true\n */\nbool checkInteger(string text) {\n    return text.find_first_not_of(\"0123456789\") == string::npos;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to assign frequency to each tuple in the given tuple list.\n * > assignFreq(vector<vector<int>>{{6, 5, 8}, {2, 7}, {6, 5, 8}, {6, 5, 8}, {9}, {2, 7}})\n * string(\"[(6, 5, 8, 3), (2, 7, 2), (9, 1)]\")\n * > assignFreq(vector<vector<int>>{{4, 2, 4}, {7, 1}, {4, 8}, {4, 2, 4}, {9, 2}, {7, 1}})\n * string(\"[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]\")\n * > assignFreq(vector<vector<int>>{{11, 13, 10}, {17, 21}, {4, 2, 3}, {17, 21}, {9, 2}, {4, 2, 3}})\n * string(\"[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]\")\n */\nstring assignFreq(vector<vector<int>> testList) {\n    vector<vector<int>> ans;\n    for(auto i:testList){\n        vector<int> temp;\n        for(auto j:i){\n            int count=0;\n            for(auto k:testList){\n                if(find(k.begin(),k.end(),j)!=k.end())\n                    count++;\n            }\n            temp.push_back(count);\n        }\n        ans.push_back(temp);\n    }\n    return to_string(ans);\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert a given tuple of positive integers into an integer.\n * > tupleToInt(vector<int>{1, 2, 3})\n * 123\n * > tupleToInt(vector<int>{4, 5, 6})\n * 456\n * > tupleToInt(vector<int>{5, 6, 7})\n * 567\n */\nint tupleToInt(vector<int> nums) {\n    int ans = 0;\n    for(int i = 0; i < nums.size(); i++){\n        ans += nums[i] * pow(10, i);\n    }\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert all possible convertible elements in the list to float.\n * > listToFloat(vector<vector<string>>{{string(\"3\"), string(\"4\")}, {string(\"1\"), string(\"26.45\")}, {string(\"7.32\"), string(\"8\")}, {string(\"4\"), string(\"8\")}})\n * string(\"[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]\")\n * > listToFloat(vector<vector<string>>{{string(\"4\"), string(\"4\")}, {string(\"2\"), string(\"27\")}, {string(\"4.12\"), string(\"9\")}, {string(\"7\"), string(\"11\")}})\n * string(\"[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]\")\n * > listToFloat(vector<vector<string>>{{string(\"6\"), string(\"78\")}, {string(\"5\"), string(\"26.45\")}, {string(\"1.33\"), string(\"4\")}, {string(\"82\"), string(\"13\")}})\n * string(\"[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]\")\n */\nstring listToFloat(vector<vector<string>> testList) {\n    vector<vector<float>> ans;\n    for(auto i:testList){\n        vector<float> temp;\n        for(auto j:i){\n            temp.push_back(stof(j));\n        }\n        ans.push_back(temp);\n    }\n    return \"[\"+to_string(ans)+\"]\";\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * [link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n * > stringToList(string(\"python programming\"))\n * {string(\"python\"), string(\"programming\")}\n * > stringToList(string(\"lists tuples strings\"))\n * {string(\"lists\"), string(\"tuples\"), string(\"strings\")}\n * > stringToList(string(\"write a program\"))\n * {string(\"write\"), string(\"a\"), string(\"program\")}\n */\nvector<string> stringToList(string str) {\n    vector<string> ans;\n    stringstream ss(str);\n    string temp;\n    while(getline(ss, temp, ' '))\n        ans.push_back(temp);\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the element that appears only once in a sorted array.\n * > search(vector<int>{1, 1, 2, 2, 3}, 5)\n * 3\n * > search(vector<int>{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}, 11)\n * 8\n * > search(vector<int>{1, 2, 2, 3, 3, 4, 4}, 7)\n * 1\n */\nint search(vector<int> arr, int n) {\n    int i = 0;\n    while(i < n-1){\n        if(arr[i] == arr[i+1]){\n            i += 2;\n        }\n        else{\n            return arr[i];\n        }\n    }\n    return arr[n-1];\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum product from the pairs of tuples within a given list.\n * > maxProductTuple(vector<vector<int>>{{2, 7}, {2, 6}, {1, 8}, {4, 9}})\n * 36\n * > maxProductTuple(vector<vector<int>>{{10, 20}, {15, 2}, {5, 10}})\n * 200\n * > maxProductTuple(vector<vector<int>>{{11, 44}, {10, 15}, {20, 5}, {12, 9}})\n * 484\n */\nint maxProductTuple(vector<vector<int>> list1) {\n    int max = INT_MIN;\n    for(int i=0; i<list1.size(); i++){\n        for(int j=i+1; j<list1.size(); j++){\n            max = max < (list1[i][0] * list1[j][1]) ? (list1[i][0] * list1[j][1]) : max;\n            max = max < (list1[i][1] * list1[j][0]) ? (list1[i][1] * list1[j][0]) : max;\n        }\n    }\n    return max;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the triplet with sum of the given array\n * > checkTriplet(vector<int>{2, 7, 4, 0, 9, 5, 1, 3}, 8, 6, 0)\n * true\n * > checkTriplet(vector<int>{1, 4, 5, 6, 7, 8, 5, 9}, 8, 6, 0)\n * false\n * > checkTriplet(vector<int>{10, 4, 2, 3, 5}, 5, 15, 0)\n * true\n */\nbool checkTriplet(vector<int> a, int n, int sum, int count) {\n    int i, j, k;\n    for(i=0; i<a.size(); i++){\n        for(j=i+1; j<a.size(); j++){\n            for(k=j+1; k<a.size(); k++){\n                if(a[i]+a[j]+a[k]==sum){\n                    count++;\n                }\n            }\n        }\n    }\n    if(count>=3){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find n\u2019th smart number.\n * > smartnumber(1)\n * 30\n * > smartnumber(50)\n * 273\n * > smartnumber(1000)\n * 2664\n */\nint smartnumber(int n) {\n    return n*(n+1)/2;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sum all amicable numbers from 1 to a specified number.\n * > amicableNumbersSum(999)\n * 504\n * > amicableNumbersSum(9999)\n * 31626\n * > amicableNumbersSum(99)\n * 0\n */\nint amicableNumbersSum(int limit) {\n  int sum = 0;\n  for (int i = 1; i <= limit; i++) {\n    int sum1 = 0;\n    for (int j = 1; j < i; j++) {\n      if (i % j == 0) {\n        sum1 += j;\n      }\n    }\n    int sum2 = 0;\n    for (int k = 1; k < sum1; k++) {\n      if (sum1 % k == 0) {\n        sum2 += k;\n      }\n    }\n    if (sum1 != i && sum1 == sum2 && sum1 != sum2) {\n      sum += i;\n    }\n  }\n  return sum;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n * > findLength(string(\"11000010001\"), 11)\n * 6\n * > findLength(string(\"10111\"), 5)\n * 1\n * > findLength(string(\"11011101100101\"), 14)\n * 2\n */\nint findLength(string str, int n) {\n    int count[2] = {0, 0};\n    int max = 0;\n    for(int i = 0; i < n; i++){\n        if(str[i] == '0'){\n            count[0]++;\n        }\n        else{\n            count[1]++;\n        }\n        max = max > count[0] - count[1] ? max : count[0] - count[1];\n    }\n    return max;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of common divisors of two given numbers.\n * > sum(10, 15)\n * 6\n * > sum(100, 150)\n * 93\n * > sum(4, 6)\n * 3\n */\nint sum(int a, int b) {\n    int sum = 0;\n    for(int i = 1; i <= min(a, b); i++){\n        if(a%i == 0 && b%i == 0){\n            sum += i;\n        }\n    }\n    return sum;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to multiply two integers without using the * operator in c++.\n * > multiplyInt(10, 20)\n * 200\n * > multiplyInt(5, 10)\n * 50\n * > multiplyInt(4, 8)\n * 32\n */\nint multiplyInt(int x, int y) {\n    return x*y;\n}\n\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to shortlist words that are longer than n from a given list of words.\n * > longWords(3, string(\"python is a programming language\"))\n * {string(\"python\"), string(\"programming\"), string(\"language\")}\n * > longWords(2, string(\"writing a program\"))\n * {string(\"writing\"), string(\"program\")}\n * > longWords(5, string(\"sorting list\"))\n * {string(\"sorting\")}\n */\nvector<string> longWords(int n, string str) {\n    vector<string> ans;\n    stringstream ss(str);\n    string word;\n    while(ss >> word){\n        if(word.length() > n) ans.push_back(word);\n    }\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate magic square.\n * > magicSquareTest(vector<vector<int>>{{7, 12, 1, 14}, {2, 13, 8, 11}, {16, 3, 10, 5}, {9, 6, 15, 4}})\n * true\n * > magicSquareTest(vector<vector<int>>{{2, 7, 6}, {9, 5, 1}, {4, 3, 8}})\n * true\n * > magicSquareTest(vector<vector<int>>{{2, 7, 6}, {9, 5, 1}, {4, 3, 7}})\n * false\n */\nbool magicSquareTest(vector<vector<int>> myMatrix) {\n    int sum = 0;\n    int n = myMatrix.size();\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < n; j++){\n            sum += myMatrix[i][j];\n        }\n    }\n    if(sum != n * (n * n + 1) / 2) return false;\n    for(int i = 0; i < n; i++){\n        int sum = 0;\n        for(int j = 0; j < n; j++){\n            sum += myMatrix[i][j];\n        }\n        if(sum != n * (n + 1) / 2) return false;\n    }\n    for(int i = 0; i < n; i++){\n        int sum = 0;\n        for(int j = 0; j < n; j++){\n            sum += myMatrix[j][i];\n        }\n        if(sum != n * (n + 1) / 2) return false;\n    }\n    return true;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the item with maximum frequency in a given list.\n * > maxOccurrences(vector<int>{2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2})\n * {2, 5}\n * > maxOccurrences(vector<int>{2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 16, 18})\n * {8, 2}\n * > maxOccurrences(vector<int>{10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10})\n * {20, 3}\n */\nvector<int> maxOccurrences(vector<int> nums) {\n    unordered_map<int, int> m;\n    for(int i: nums) m[i]++;\n    int max = 0;\n    vector<int> ans;\n    for(auto it: m) {\n        if(it.second > max) {\n            max = it.second;\n            ans.clear();\n            ans.push_back(it.first);\n        }\n        else if(it.second == max) ans.push_back(it.first);\n    }\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to reverse only the vowels of a given string.\n * > reverseVowels(string(\"Python\"))\n * string(\"Python\")\n * > reverseVowels(string(\"USA\"))\n * string(\"ASU\")\n * > reverseVowels(string(\"ab\"))\n * string(\"ab\")\n */\nstring reverseVowels(string str1) {\n    // your code goes here\n    string vowels = \"aeiouAEIOU\";\n    int n = str1.length();\n    string ans = \"\";\n    for(int i = 0; i < n; i++){\n        if(vowels.find(str1[i]) != string::npos){\n            ans += str1[n-1];\n            n--;\n        }\n        else{\n            ans += str1[i];\n        }\n    }\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert tuple to a string.\n * > tupString(vector<string>{string(\"e\"), string(\"x\"), string(\"e\"), string(\"r\"), string(\"c\"), string(\"i\"), string(\"s\"), string(\"e\"), string(\"s\")})\n * string(\"exercises\")\n * > tupString(vector<string>{string(\"p\"), string(\"y\"), string(\"t\"), string(\"h\"), string(\"o\"), string(\"n\")})\n * string(\"python\")\n * > tupString(vector<string>{string(\"p\"), string(\"r\"), string(\"o\"), string(\"g\"), string(\"r\"), string(\"a\"), string(\"m\")})\n * string(\"program\")\n */\nstring tupString(vector<string> tup1) {\n    string ans;\n    for(int i=0;i<tup1.size();i++){\n        ans+=tup1[i];\n    }\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n * > sumNegativenum(vector<int>{2, 4, -6, -9, 11, -12, 14, -5, 17})\n * -32\n * > sumNegativenum(vector<int>{10, 15, -14, 13, -18, 12, -20})\n * -52\n * > sumNegativenum(vector<int>{19, -65, 57, 39, 152, -639, 121, 44, 90, -190})\n * -894\n */\nint sumNegativenum(vector<int> nums) {\n    return accumulate(nums.begin(), nums.end(), 0, [](int a, int b){return a + (b < 0 ? b : 0);});\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the last element of given array is even or odd after performing an operation p times.\n * > checkLast(vector<int>{5, 7, 10}, 3, 1)\n * string(\"ODD\")\n * > checkLast(vector<int>{2, 3}, 2, 3)\n * string(\"EVEN\")\n * > checkLast(vector<int>{1, 2, 3}, 3, 1)\n * string(\"ODD\")\n */\nstring checkLast(vector<int> arr, int n, int p) {\n    for(int i=0;i<p;i++){\n        arr.push_back(arr[i]);\n    }\n    if(arr[arr.size()-1]%2==0)\n        return \"EVEN\";\n    else\n        return \"ODD\";\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the nth hexagonal number.\n * > hexagonalNum(10)\n * 190\n * > hexagonalNum(5)\n * 45\n * > hexagonalNum(7)\n * 91\n */\nint hexagonalNum(int n) {\n    return n * (2 * n - 1);\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate electricity bill.\n * > calElectbill(75)\n * 246.25\n * > calElectbill(265)\n * 1442.75\n * > calElectbill(100)\n * 327.5\n */\ndouble calElectbill(int units) {\n    return units * 0.09;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the ration of zeroes in an array of integers.\n * > zeroCount(vector<int>{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8})\n * 0.15\n * > zeroCount(vector<int>{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8})\n * 0.0\n * > zeroCount(vector<int>{2, 4, -6, -9, 11, -12, 14, -5, 17})\n * 0.0\n */\ndouble zeroCount(vector<int> nums) {\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++){\n        if(nums[i] == 0)\n            count++;\n    }\n    return (double)count/nums.size();\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n * > isSumOfPowersOfTwo(10)\n * true\n * > isSumOfPowersOfTwo(7)\n * false\n * > isSumOfPowersOfTwo(14)\n * true\n */\nbool isSumOfPowersOfTwo(int n) {\n    int sum = 0;\n    while(n){\n        if(n&1) sum++;\n        n >>= 1;\n    }\n    return sum%2 == 0;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the circumference of a circle.\n * > circleCircumference(10)\n * 62.830000000000005\n * > circleCircumference(5)\n * 31.415000000000003\n * > circleCircumference(4)\n * 25.132\n */\ndouble circleCircumference(int r) {\n  return 2*3.141592653589793*r;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract elements that occur singly in the given tuple list.\n * > extractSingly(vector<vector<int>>{{3, 4, 5}, {4, 5, 7}, {1, 4}})\n * {3, 4, 5, 7, 1}\n * > extractSingly(vector<vector<int>>{{1, 2, 3}, {4, 2, 3}, {7, 8}})\n * {1, 2, 3, 4, 7, 8}\n * > extractSingly(vector<vector<int>>{{7, 8, 9}, {10, 11, 12}, {10, 11}})\n * {7, 8, 9, 10, 11, 12}\n */\nvector<int> extractSingly(vector<vector<int>> testList) {\n    vector<int> ans;\n    for(auto i:testList){\n        for(auto j:i){\n            if(find(ans.begin(), ans.end(), j) == ans.end()){\n                ans.push_back(j);\n            }\n        }\n    }\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort a list of elements using pancake sort.\n * > pancakeSort(vector<int>{15, 79, 25, 38, 69})\n * {15, 25, 38, 69, 79}\n * > pancakeSort(vector<int>{98, 12, 54, 36, 85})\n * {12, 36, 54, 85, 98}\n * > pancakeSort(vector<int>{41, 42, 32, 12, 23})\n * {12, 23, 32, 41, 42}\n */\nvector<int> pancakeSort(vector<int> nums) {\n    vector<int> ans;\n    for(int i = nums.size()-1; i >= 0; i--){\n        int max_index = 0;\n        for(int j = 1; j <= i; j++){\n            if(nums[j] > nums[max_index]){\n                max_index = j;\n            }\n        }\n        if(max_index != i){\n            ans.push_back(max_index+1);\n            ans.push_back(i+1);\n            reverse(nums.begin(), nums.begin()+max_index+1);\n            reverse(nums.begin(), nums.begin()+i+1);\n        }\n    }\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count the same pair in three given lists.\n * > countSamepair(vector<int>{1, 2, 3, 4, 5, 6, 7, 8}, vector<int>{2, 2, 3, 1, 2, 6, 7, 9}, vector<int>{2, 1, 3, 1, 2, 6, 7, 9})\n * 3\n * > countSamepair(vector<int>{1, 2, 3, 4, 5, 6, 7, 8}, vector<int>{2, 2, 3, 1, 2, 6, 7, 8}, vector<int>{2, 1, 3, 1, 2, 6, 7, 8})\n * 4\n * > countSamepair(vector<int>{1, 2, 3, 4, 2, 6, 7, 8}, vector<int>{2, 2, 3, 1, 2, 6, 7, 8}, vector<int>{2, 1, 3, 1, 2, 6, 7, 8})\n * 5\n */\nint countSamepair(vector<int> list1, vector<int> list2, vector<int> list3) {\n    int count = 0;\n    for(int i = 0; i < list1.size(); i++){\n        if(list1[i] == list2[i] && list1[i] == list3[i]){\n            count++;\n        }\n    }\n    return count;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of absolute differences in all pairs of the given array.\n * > sumPairs(vector<int>{1, 8, 9, 15, 16}, 5)\n * 74\n * > sumPairs(vector<int>{1, 2, 3, 4}, 4)\n * 10\n * > sumPairs(vector<int>{1, 2, 3, 4, 5, 7, 9, 11, 14}, 9)\n * 188\n */\nint sumPairs(vector<int> arr, int n) {\n    int sum = 0;\n    for(int i = 0; i < n; i++){\n        for(int j = i+1; j < n; j++){\n            sum += abs(arr[i] - arr[j]);\n        }\n    }\n    return sum;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the maximum difference between any two elements in a given array.\n * > maxAbsDiff(vector<int>{2, 1, 5, 3}, 4)\n * 4\n * > maxAbsDiff(vector<int>{9, 3, 2, 5, 1}, 5)\n * 8\n * > maxAbsDiff(vector<int>{3, 2, 1}, 3)\n * 2\n */\nint maxAbsDiff(vector<int> arr, int n) {\n    int ans = 0;\n    for(int i=0;i<n;i++){\n        for(int j=i+1;j<n;j++){\n            ans = max(ans, abs(arr[i]-arr[j]));\n        }\n    }\n    return ans;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the ascii value of total characters in a string.\n * > asciiValueString(string(\"python\"))\n * 112\n * > asciiValueString(string(\"Program\"))\n * 80\n * > asciiValueString(string(\"Language\"))\n * 76\n */\nint asciiValueString(string str1) {\n    int sum = 0;\n    for(int i = 0; i < str1.length(); i++){\n        sum += str1[i];\n    }\n    return sum;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum total path sum in the given triangle.\n * > maxPathSum(vector<vector<int>>{{1, 0, 0}, {4, 8, 0}, {1, 5, 3}}, 2, 2)\n * 14\n * > maxPathSum(vector<vector<int>>{{13, 0, 0}, {7, 4, 0}, {2, 4, 6}}, 2, 2)\n * 24\n * > maxPathSum(vector<vector<int>>{{2, 0, 0}, {11, 18, 0}, {21, 25, 33}}, 2, 2)\n * 53\n */\nint maxPathSum(vector<vector<int>> tri, int m, int n) {\n    int dp[m][n];\n    dp[0][0] = tri[0][0];\n    for(int i=1; i<m; i++){\n        dp[i][0] = dp[i-1][0] + tri[i][0];\n    }\n    for(int i=1; i<n; i++){\n        dp[0][i] = dp[0][i-1] + tri[0][i];\n    }\n    for(int i=1; i<m; i++){\n        for(int j=1; j<n; j++){\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + tri[i][j];\n        }\n    }\n    return dp[m-1][n-1];\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to divide a number into two parts such that the sum of digits is maximum.\n * > sumDigitsTwoparts(35)\n * 17\n * > sumDigitsTwoparts(7)\n * 7\n * > sumDigitsTwoparts(100)\n * 19\n */\nint sumDigitsTwoparts(int n) {\n    int sum = 0;\n    while(n > 0){\n        sum += n%10;\n        n /= 10;\n    }\n    return sum;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n * > longestSubseqWithDiffOne(vector<int>{1, 2, 3, 4, 5, 3, 2}, 7)\n * 6\n * > longestSubseqWithDiffOne(vector<int>{10, 9, 4, 5, 4, 8, 6}, 7)\n * 3\n * > longestSubseqWithDiffOne(vector<int>{1, 2, 3, 2, 3, 7, 2, 1}, 8)\n * 7\n */\nint longestSubseqWithDiffOne(vector<int> arr, int n) {\n    int dp[n+1];\n    memset(dp, 0, sizeof(dp));\n    for(int i=0; i<n; i++){\n        for(int j=i; j>=0; j--){\n            if(arr[i]-arr[j]==1){\n                dp[i] = max(dp[i], dp[j]+1);\n            }\n        }\n    }\n    int ans = 0;\n    for(int i=0; i<n; i++){\n        ans = max(ans, dp[i]);\n    }\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find whether the given number is present in the infinite sequence or not.\n * > doesContainB(1, 7, 3)\n * true\n * > doesContainB(1, -3, 5)\n * false\n * > doesContainB(3, 2, 5)\n * false\n */\nbool doesContainB(int a, int b, int c) {\n    return (a == b || b == c || c == a);\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given number is co-prime or not.\n * > isCoprime(17, 13)\n * true\n * > isCoprime(15, 21)\n * false\n * > isCoprime(25, 45)\n * false\n */\nbool isCoprime(int x, int y) {\n    return __gcd(x, y) == 1;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort the given array by using merge sort.\n * > mergeSort(vector<int>{3, 4, 2, 6, 5, 7, 1, 9})\n * {1, 2, 3, 4, 5, 6, 7, 9}\n * > mergeSort(vector<int>{7, 25, 45, 78, 11, 33, 19})\n * {7, 11, 19, 25, 33, 45, 78}\n * > mergeSort(vector<int>{3, 1, 4, 9, 8})\n * {1, 3, 4, 8, 9}\n */\nvector<int> mergeSort(vector<int> x) {\n    // Write your code here\n    return mergeSortHelper(x, 0, x.size() - 1);\n}\n\nvector<int> mergeSortHelper(vector<int> &x, int l, int r) {\n    if(l >= r) return x;\n    int mid = l + (r - l) / 2;\n    vector<int> left = mergeSortHelper(x, l, mid);\n    vector<int> right = mergeSortHelper(x, mid + 1, r);\n    return merge(left, right);\n}\n\nvector<int> merge(vector<int> &left, vector<int> &right) {\n    vector<int> res;\n    int i = 0, j = 0;\n    while(i < left.size() and j < right.size()) {\n        if(left[i] < right[j]) {\n            res.push_back(left[i++]);\n        } else {\n            res.push_back(right[j++]);\n        }\n    }\n    while(i < left.size()) res.push_back(left[i++]);\n    while(j < right.size()) res.push_back(right[j++]);\n    return res;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the vertex of a parabola.\n * > parabolaVertex(5, 3, 2)\n * {-0.3, 1.55}\n * > parabolaVertex(9, 8, 4)\n * {-0.4444444444444444, 2.2222222222222223}\n * > parabolaVertex(2, 4, 6)\n * {-1.0, 4.0}\n */\nvector<double> parabolaVertex(int a, int b, int c) {\n    vector<double> ans;\n    ans.push_back(-b/(2*a));\n    ans.push_back(c/(a*ans[0]*ans[0]));\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract every specified element from a given two dimensional list.\n * > specifiedElement(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}}, 0)\n * {1, 4, 7}\n * > specifiedElement(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}}, 2)\n * {3, 6, 9}\n * > specifiedElement(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}}, 3)\n * {2, 2, 5}\n */\nvector<int> specifiedElement(vector<vector<int>> nums, int n) {\n    vector<int> ans;\n    for(auto i: nums)\n        ans.push_back(i[n]);\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to toggle all even bits of a given number.\n * > evenBitToggleNumber(10)\n * 0\n * > evenBitToggleNumber(20)\n * 30\n * > evenBitToggleNumber(30)\n * 20\n */\nint evenBitToggleNumber(int n) {\n    return n ^ 0xAAAAAAAA;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert a tuple of string values to a tuple of integer values.\n * > tupleIntStr(vector<vector<string>>{{string(\"333\"), string(\"33\")}, {string(\"1416\"), string(\"55\")}})\n * {{333, 33}, {1416, 55}}\n * > tupleIntStr(vector<vector<string>>{{string(\"999\"), string(\"99\")}, {string(\"1000\"), string(\"500\")}})\n * {{999, 99}, {1000, 500}}\n * > tupleIntStr(vector<vector<string>>{{string(\"666\"), string(\"66\")}, {string(\"1500\"), string(\"555\")}})\n * {{666, 66}, {1500, 555}}\n */\nvector<vector<int>> tupleIntStr(vector<vector<string>> tupleStr) {\n    vector<vector<int>> tupleInt;\n    for(auto i:tupleStr){\n        vector<int> temp;\n        for(auto j:i){\n            temp.push_back(stoi(j));\n        }\n        tupleInt.push_back(temp);\n    }\n    return tupleInt;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find k number of operations required to make all elements equal.\n * > minOps(vector<int>{2, 2, 2, 2}, 4, 3)\n * 0\n * > minOps(vector<int>{4, 2, 6, 8}, 4, 3)\n * -1\n * > minOps(vector<int>{21, 33, 9, 45, 63}, 5, 6)\n * 24\n */\nint minOps(vector<int> arr, int n, int k) {\n    int ans = 0;\n    for(int i = 0; i < n; i++){\n        ans += abs(arr[i] - k);\n    }\n    return ans;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to print the season for the given month and day.\n * > monthSeason(string(\"January\"), 4)\n * string(\"winter\")\n * > monthSeason(string(\"October\"), 28)\n * string(\"autumn\")\n * > monthSeason(string(\"June\"), 6)\n * string(\"spring\")\n */\nstring monthSeason(string month, int days) {\n    if(month == \"January\" || month == \"December\"){\n        if(days >= 21 && days <= 31) return \"winter\";\n        else return \"spring\";\n    }\n    else if(month == \"March\" || month == \"April\" || month == \"May\"){\n        if(days >= 21 && days <= 31) return \"spring\";\n        else return \"summer\";\n    }\n    else if(month == \"June\" || month == \"July\" || month == \"August\"){\n        if(days >= 21 && days <= 31) return \"summer\";\n        else return \"autumn\";\n    }\n    else if(month == \"September\" || month == \"October\" || month == \"November\"){\n        if(days >= 21 && days <= 31) return \"autumn\";\n        else return \"winter\";\n    }\n    else return \"spring\";\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove all elements from a given list present in another list.\n * > removeElements(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, vector<int>{2, 4, 6, 8})\n * {1, 3, 5, 7, 9, 10}\n * > removeElements(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, vector<int>{1, 3, 5, 7})\n * {2, 4, 6, 8, 9, 10}\n * > removeElements(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, vector<int>{5, 7})\n * {1, 2, 3, 4, 6, 8, 9, 10}\n */\nvector<int> removeElements(vector<int> list1, vector<int> list2) {\n    vector<int> ans;\n    for(int i=0;i<list1.size();i++){\n        if(find(list2.begin(),list2.end(),list1[i])==list2.end())\n            ans.push_back(list1[i]);\n    }\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n * > sumSeries(6)\n * 12\n * > sumSeries(10)\n * 30\n * > sumSeries(9)\n * 25\n */\nint sumSeries(int n) {\n  int sum = 0;\n  for (int i = n; i >= 1; i -= 2) {\n    sum += i;\n  }\n  return sum;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the area of a regular polygon.\n * > areaPolygon(4, 20)\n * 400.00000000000006\n * > areaPolygon(10, 15)\n * 1731.1969896610804\n * > areaPolygon(9, 7)\n * 302.90938549487214\n */\ndouble areaPolygon(int s, int l) {\n  return (s * l) / 2;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the sum of divisors are same or not.\n * > areequivalent(36, 57)\n * false\n * > areequivalent(2, 4)\n * false\n * > areequivalent(23, 47)\n * true\n */\nbool areequivalent(int num1, int num2) {\n    int sum1 = 0, sum2 = 0;\n    for(int i = 1; i <= num1; i++){\n        if(num1 % i == 0) sum1 += i;\n    }\n    for(int i = 1; i <= num2; i++){\n        if(num2 % i == 0) sum2 += i;\n    }\n    return sum1 == sum2;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n * > countCharPosition(string(\"xbcefg\"))\n * 2\n * > countCharPosition(string(\"ABcED\"))\n * 3\n * > countCharPosition(string(\"AbgdeF\"))\n * 5\n */\nint countCharPosition(string str1) {\n    int count = 0;\n    for(int i = 0; i < str1.length(); i++){\n        if(str1[i] == 'a' || str1[i] == 'e' || str1[i] == 'i' || str1[i] == 'o' || str1[i] == 'u'){\n            count++;\n        }\n    }\n    return count;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the pairs with xor as an even number.\n * > findEvenPair(vector<int>{5, 4, 7, 2, 1}, 5)\n * 4\n * > findEvenPair(vector<int>{7, 2, 8, 1, 0, 5, 11}, 7)\n * 9\n * > findEvenPair(vector<int>{1, 2, 3}, 3)\n * 1\n */\nint findEvenPair(vector<int> a, int n) {\n    int ans = 0;\n    for(int i = 0; i < a.size(); i++){\n        for(int j = i + 1; j < a.size(); j++){\n            if((a[i] ^ a[j]) % 2 == 0)\n                ans++;\n        }\n    }\n    return ans;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find smallest power of 2 greater than or equal to n.\n * > nextPowerOf2(0)\n * 1\n * > nextPowerOf2(5)\n * 8\n * > nextPowerOf2(17)\n * 32\n */\nint nextPowerOf2(int n) {\n    return pow(2, ceil(log2(n)));\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the frequency of a number in a given array.\n * > frequency(vector<int>{1, 2, 3}, 4)\n * 0\n * > frequency(vector<int>{1, 2, 2, 3, 3, 3, 4}, 3)\n * 3\n * > frequency(vector<int>{0, 1, 2, 3, 1, 2}, 1)\n * 2\n */\nint frequency(vector<int> a, int x) {\n    int count = 0;\n    for(int i = 0; i < a.size(); i++){\n        if(a[i] == x)\n            count++;\n    }\n    return count;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the nth pell number.\n * > getPell(4)\n * 12\n * > getPell(7)\n * 169\n * > getPell(8)\n * 408\n */\nint getPell(int n) {\n    int a = 0, b = 1, c = 1, d = 2;\n    for (int i = 0; i < n; i++) {\n        int temp = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = temp;\n    }\n    return d;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find sum of the numbers in a list between the indices of a specified range.\n * > sumRangeList(vector<int>{2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12}, 8, 10)\n * 29\n * > sumRangeList(vector<int>{2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12}, 5, 7)\n * 16\n * > sumRangeList(vector<int>{2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12}, 7, 10)\n * 38\n */\nint sumRangeList(vector<int> list1, int m, int n) {\n    int sum = 0;\n    for(int i = m; i <= n; i++)\n        sum += list1[i];\n    return sum;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the perimeter of a pentagon.\n * > perimeterPentagon(5)\n * 25\n * > perimeterPentagon(10)\n * 50\n * > perimeterPentagon(15)\n * 75\n */\nint perimeterPentagon(int a) {\n  return a * 5;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n * > countOccurance(string(\"letstdlenstdporstd\"))\n * 3\n * > countOccurance(string(\"truststdsolensporsd\"))\n * 1\n * > countOccurance(string(\"makestdsostdworthit\"))\n * 2\n */\nint countOccurance(string s) {\n    int count = 0;\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] == 's' && s[i+1] == 't' && s[i+2] == 'd'){\n            count++;\n            i += 2;\n        }\n    }\n    return count;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove everything except alphanumeric characters from a string.\n * > removeSplchar(string(\"python  @#&^%$*program123\"))\n * string(\"pythonprogram123\")\n * > removeSplchar(string(\"python %^$@!^&*()  programming24%$^^()    language\"))\n * string(\"pythonprogramming24language\")\n * > removeSplchar(string(\"python   ^%&^()(+_)(_^&67)                  program\"))\n * string(\"python67program\")\n */\nstring removeSplchar(string text) {\n    string ans;\n    for(int i=0;i<text.length();i++){\n        if(isalnum(text[i])){\n            ans+=text[i];\n        }\n    }\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to verify validity of a string of parentheses.\n * > isValidParenthese(string(\"(){}[]\"))\n * true\n * > isValidParenthese(string(\"()[{)}\"))\n * false\n * > isValidParenthese(string(\"()\"))\n * true\n */\nbool isValidParenthese(string str1) {\n    stack<char> s;\n    for(char c: str1){\n        if(c == '(' || c == '[' || c == '{')\n            s.push(c);\n        else{\n            if(s.empty())\n                return false;\n            char top = s.top();\n            if(c == ')' && top != '(')\n                return false;\n            if(c == ']' && top != '[')\n                return false;\n            if(c == '}' && top != '{')\n                return false;\n            s.pop();\n        }\n    }\n    return s.empty();\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the perimeter of a triangle.\n * > perimeterTriangle(10, 20, 30)\n * 60\n * > perimeterTriangle(3, 4, 5)\n * 12\n * > perimeterTriangle(25, 35, 45)\n * 105\n */\nint perimeterTriangle(int a, int b, int c) {\n  return a+b+c;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find two distinct numbers such that their lcm lies within the given range.\n * > answer(3, 8)\n * {3, 6}\n * > answer(2, 6)\n * {2, 4}\n * > answer(1, 3)\n * {1, 2}\n */\nvector<int> answer(int l, int r) {\n    vector<int> ans;\n    for(int i=l;i<=r;i++){\n        for(int j=i+1;j<=r;j++){\n            if(lcm(i,j)<=r){\n                ans.push_back(i);\n                ans.push_back(j);\n                return ans;\n            }\n        }\n    }\n    return ans;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to search some literals strings in a string.\n * > stringLiterals(vector<string>{string(\"language\")}, string(\"python language\"))\n * string(\"Matched!\")\n * > stringLiterals(vector<string>{string(\"program\")}, string(\"python language\"))\n * string(\"Not Matched!\")\n * > stringLiterals(vector<string>{string(\"python\")}, string(\"programming language\"))\n * string(\"Not Matched!\")\n */\nstring stringLiterals(vector<string> patterns, string text) {\n    for(auto &p: patterns)\n        if(text.find(p) != string::npos)\n            return \"Matched!\";\n    return \"Not Matched!\";\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find if the given number is a keith number or not.\n * > isNumKeith(14)\n * true\n * > isNumKeith(12)\n * false\n * > isNumKeith(197)\n * true\n */\nbool isNumKeith(int x) {\n    int sum = 0;\n    while(x>0){\n        sum += (x%10);\n        x /= 10;\n    }\n    return sum==10;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the longest common prefix in the given set of strings.\n * > commonPrefix(vector<string>{string(\"tablets\"), string(\"tables\"), string(\"taxi\"), string(\"tamarind\")}, 4)\n * string(\"ta\")\n * > commonPrefix(vector<string>{string(\"apples\"), string(\"ape\"), string(\"april\")}, 3)\n * string(\"ap\")\n * > commonPrefix(vector<string>{string(\"teens\"), string(\"teenager\"), string(\"teenmar\")}, 3)\n * string(\"teen\")\n */\nstring commonPrefix(vector<string> arr, int n) {\n    string ans = \"\";\n    for(int i = 0; i < arr[0].size(); i++){\n        for(int j = 1; j < n; j++){\n            if(arr[j][i] != arr[0][i]){\n                return ans;\n            }\n        }\n        ans += arr[0][i];\n    }\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count all the distinct pairs having a difference of k in any array.\n * > countPairs(vector<int>{1, 5, 3, 4, 2}, 5, 3)\n * 2\n * > countPairs(vector<int>{8, 12, 16, 4, 0, 20}, 6, 4)\n * 5\n * > countPairs(vector<int>{2, 4, 1, 3, 4}, 5, 2)\n * 3\n */\nint countPairs(vector<int> arr, int n, int k) {\n    unordered_map<int, int> mp;\n    int ans = 0;\n    for(int i = 0; i < n; i++){\n        if(mp.find(arr[i]) != mp.end()){\n            ans += mp[arr[i]];\n        }\n        mp[arr[i] + k]++;\n    }\n    return ans;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find all the values in a list that are greater than a specified number.\n * > greaterSpecificnum(vector<int>{220, 330, 500}, 200)\n * true\n * > greaterSpecificnum(vector<int>{12, 17, 21}, 20)\n * false\n * > greaterSpecificnum(vector<int>{1, 2, 3, 4}, 10)\n * false\n */\nbool greaterSpecificnum(vector<int> list, int num) {\n    for(int i=0;i<list.size();i++){\n        if(list[i]>num)\n            return true;\n    }\n    return false;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the focus of a parabola.\n * > parabolaFocus(5, 3, 2)\n * {-0.3, 1.6}\n * > parabolaFocus(9, 8, 4)\n * {-0.4444444444444444, 2.25}\n * > parabolaFocus(2, 4, 6)\n * {-1.0, 4.125}\n */\nvector<double> parabolaFocus(int a, int b, int c) {\n    vector<double> ans;\n    ans.push_back(-b/(2*a));\n    ans.push_back(pow(b,2)/(4*a*c));\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to search some literals strings in a string by using regex.\n * > checkLiterals(string(\"The quick brown fox jumps over the lazy dog.\"), vector<string>{string(\"fox\")})\n * string(\"Matched!\")\n * > checkLiterals(string(\"The quick brown fox jumps over the lazy dog.\"), vector<string>{string(\"horse\")})\n * string(\"Not Matched!\")\n * > checkLiterals(string(\"The quick brown fox jumps over the lazy dog.\"), vector<string>{string(\"lazy\")})\n * string(\"Matched!\")\n */\nstring checkLiterals(string text, vector<string> patterns) {\n    for(string pattern: patterns){\n        if(regex_search(text, regex(pattern))){\n            return \"Matched!\";\n        }\n    }\n    return \"Not Matched!\";\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the longest common subsequence for the given two sequences.\n * > longestCommonSubsequence(string(\"AGGTAB\"), string(\"GXTXAYB\"), 6, 7)\n * 4\n * > longestCommonSubsequence(string(\"ABCDGH\"), string(\"AEDFHR\"), 6, 6)\n * 3\n * > longestCommonSubsequence(string(\"AXYT\"), string(\"AYZX\"), 4, 4)\n * 2\n */\nint longestCommonSubsequence(string x, string y, int m, int n) {\n    vector<vector<int>> dp(m+1, vector<int>(n+1, 0));\n    \n    for(int i=1; i<=m; i++){\n        for(int j=1; j<=n; j++){\n            if(x[i-1] == y[j-1]){\n                dp[i][j] = 1 + dp[i-1][j-1];\n            }\n            else{\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]);\n            }\n        }\n    }\n    \n    return dp[m][n];\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given number can be represented by product of two squares or not.\n * > prodSquare(25)\n * false\n * > prodSquare(30)\n * false\n * > prodSquare(16)\n * true\n */\nbool prodSquare(int n) {\n    int sqrt = sqrt(n);\n    return sqrt * sqrt == n;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the first missing positive number.\n * > firstMissingPositive(vector<int>{1, 2, 3, -1, 5}, 5)\n * 4\n * > firstMissingPositive(vector<int>{0, -1, -2, 1, 5, 8}, 6)\n * 2\n * > firstMissingPositive(vector<int>{0, 1, 2, 5, -8}, 5)\n * 3\n */\nint firstMissingPositive(vector<int> arr, int n) {\n    for(int i=0;i<n;i++){\n        if(arr[i]>0 && arr[i]<=n && arr[arr[i]-1]!=arr[i]){\n            swap(arr[i],arr[arr[i]-1]);\n            i--;\n        }\n    }\n    for(int i=0;i<n;i++){\n        if(arr[i]!=i+1) return i+1;\n    }\n    return n+1;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the number of integral co-ordinates that lie inside a square.\n * > countIntgralPoints(1, 1, 4, 4)\n * 4\n * > countIntgralPoints(1, 2, 1, 2)\n * 1\n * > countIntgralPoints(4, 2, 6, 4)\n * 1\n */\nint countIntgralPoints(int x1, int y1, int x2, int y2) {\n    int count = 0;\n    for(int i = x1; i <= x2; i++)\n        for(int j = y1; j <= y2; j++)\n            if(i == (int)i && j == (int)j)\n                count++;\n    return count;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether the given month name contains 30 days or not.\n * > checkMonthnumber(string(\"February\"))\n * false\n * > checkMonthnumber(string(\"June\"))\n * true\n * > checkMonthnumber(string(\"April\"))\n * true\n */\nbool checkMonthnumber(string monthname3) {\n    if(monthname3 == \"February\" || monthname3 == \"April\" || monthname3 == \"June\" || monthname3 == \"September\" || monthname3 == \"November\"){\n        return false;\n    }\n    else{\n        return true;\n    }\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether a string has atleast one letter and one number.\n * > checkString(string(\"thishasboth29\"))\n * true\n * > checkString(string(\"python\"))\n * false\n */\nbool checkString(string str) {\n    int count = 0;\n    for(int i = 0; i < str.length(); i++){\n        if(isdigit(str[i])){\n            count++;\n        }\n    }\n    for(int i = 0; i < str.length(); i++){\n        if(isalpha(str[i])){\n            count++;\n        }\n    }\n    if(count == 2){\n        return true;\n    }\n    return false;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove the duplicates from the given tuple.\n * > removeTuple(vector<int>{1, 3, 5, 2, 3, 5, 1, 1, 3})\n * {1, 2, 3, 5}\n * > removeTuple(vector<int>{2, 3, 4, 4, 5, 6, 6, 7, 8, 8})\n * {2, 3, 4, 5, 6, 7, 8}\n * > removeTuple(vector<int>{11, 12, 13, 11, 11, 12, 14, 13})\n * {11, 12, 13, 14}\n */\nvector<int> removeTuple(vector<int> testTup) {\n    vector<int> ans;\n    for(int i=0;i<testTup.size();i++){\n        if(find(ans.begin(),ans.end(),testTup[i])==ans.end()){\n            ans.push_back(testTup[i]);\n        }\n    }\n    return ans;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to convert octal number to decimal number.\n * > octalToDecimal(25)\n * 21\n * > octalToDecimal(30)\n * 24\n * > octalToDecimal(40)\n * 32\n */\nint octalToDecimal(int n) {\n    int ans = 0;\n    int base = 1;\n    while(n>0){\n        int last = n%10;\n        ans += last*base;\n        base *= 8;\n        n /= 10;\n    }\n    return ans;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the first position of an element in a sorted array.\n * > first(vector<int>{1, 2, 3, 4, 5, 6, 6}, 6, 6)\n * 5\n * > first(vector<int>{1, 2, 2, 2, 3, 2, 2, 4, 2}, 2, 9)\n * 1\n * > first(vector<int>{1, 2, 3}, 1, 3)\n * 0\n */\nint first(vector<int> arr, int x, int n) {\n    int start = 0;\n    int end = n-1;\n    \n    while(start <= end){\n        int mid = start + (end - start)/2;\n        if(arr[mid] == x){\n            return mid;\n        }\n        else if(arr[mid] < x){\n            start = mid + 1;\n        }\n        else{\n            end = mid - 1;\n        }\n    }\n    return -1;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove all the tuples with length k.\n * > removeTuples(vector<vector<int>>{{4, 5}, {4}, {8, 6, 7}, {1}, {3, 4, 6, 7}}, 1)\n * {{4, 5}, {8, 6, 7}, {3, 4, 6, 7}}\n * > removeTuples(vector<vector<int>>{{4, 5}, {4, 5}, {6, 7}, {1, 2, 3}, {3, 4, 6, 7}}, 2)\n * {{1, 2, 3}, {3, 4, 6, 7}}\n * > removeTuples(vector<vector<int>>{{1, 4, 4}, {4, 3}, {8, 6, 7}, {1}, {3, 6, 7}}, 3)\n * {{4, 3}, {1}}\n */\nvector<vector<int>> removeTuples(vector<vector<int>> testList, int k) {\n    vector<vector<int>> ans;\n    for(auto i: testList){\n        if(i.size() != k) ans.push_back(i);\n    }\n    return ans;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to perform the exponentiation of the given two tuples.\n * > findExponentio(vector<int>{10, 4, 5, 6}, vector<int>{5, 6, 7, 5})\n * {100000, 4096, 78125, 7776}\n * > findExponentio(vector<int>{11, 5, 6, 7}, vector<int>{6, 7, 8, 6})\n * {1771561, 78125, 1679616, 117649}\n * > findExponentio(vector<int>{12, 6, 7, 8}, vector<int>{7, 8, 9, 7})\n * {35831808, 1679616, 40353607, 2097152}\n */\nvector<int> findExponentio(vector<int> testTup1, vector<int> testTup2) {\n    vector<int> ans;\n    for(int i=0;i<testTup1.size();i++){\n        ans.push_back(pow(testTup1[i],testTup2[i]));\n    }\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the largest triangle that can be inscribed in an ellipse.\n * > largestTriangle(4, 2)\n * 10.392304845413264\n * > largestTriangle(5, 7)\n * 4.639421805988064\n * > largestTriangle(9, 1)\n * 105.2220865598093\n */\ndouble largestTriangle(int a, int b) {\n  return 2 * sqrt(a * a * b * b / (a * a + b * b));\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find highest power of 2 less than or equal to given number.\n * > highestPowerOf2(10)\n * 8\n * > highestPowerOf2(19)\n * 16\n * > highestPowerOf2(32)\n * 32\n */\nint highestPowerOf2(int n) {\n    return pow(2, floor(log2(n)));\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find all index positions of the maximum values in a given list.\n * > positionMax(vector<int>{12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54})\n * {7}\n * > positionMax(vector<int>{1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5})\n * {7, 8, 9, 10}\n * > positionMax(vector<int>{2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12})\n * {11}\n */\nvector<int> positionMax(vector<int> list1) {\n    vector<int> ans;\n    int max = list1[0];\n    for(int i = 0; i < list1.size(); i++){\n        if(list1[i] > max){\n            max = list1[i];\n            ans.clear();\n            ans.push_back(i);\n        }\n        else if(list1[i] == max){\n            ans.push_back(i);\n        }\n    }\n    return ans;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the elements in a list are same or not.\n * > chklist(vector<string>{string(\"one\"), string(\"one\"), string(\"one\")})\n * true\n * > chklist(vector<string>{string(\"one\"), string(\"Two\"), string(\"Three\")})\n * false\n * > chklist(vector<string>{string(\"bigdata\"), string(\"python\"), string(\"Django\")})\n * false\n */\nbool chklist(vector<string> lst) {\n    return all_of(lst.begin(), lst.end(), [&](string s){return s == lst[0];});\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove even characters in a string.\n * > removeEven(string(\"python\"))\n * string(\"pto\")\n * > removeEven(string(\"program\"))\n * string(\"porm\")\n * > removeEven(string(\"language\"))\n * string(\"lnug\")\n */\nstring removeEven(string str1) {\n    string str=\"\";\n    for(int i=0;i<str1.length();i++){\n        if(str1[i]%2!=0)\n            str+=str1[i];\n    }\n    return str;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the hamming distance between given two integers.\n * > hammingDistance(4, 8)\n * 2\n * > hammingDistance(2, 4)\n * 2\n * > hammingDistance(1, 2)\n * 2\n */\nint hammingDistance(int n1, int n2) {\n    int count = 0;\n    while(n1 != 0 || n2 != 0){\n        if((n1 & 1) != (n2 & 1))\n            count++;\n        n1 >>= 1;\n        n2 >>= 1;\n    }\n    return count;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the occurrence of a given character in a string.\n * > count(string(\"abcc\"), string(\"c\"))\n * 2\n * > count(string(\"ababca\"), string(\"a\"))\n * 3\n * > count(string(\"mnmm0pm\"), string(\"m\"))\n * 4\n */\nint count(string s, string c) {\n    int count = 0;\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] == c[0]){\n            count++;\n        }\n    }\n    return count;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the inversions of tuple elements in the given tuple list.\n * > inversionElements(vector<int>{7, 8, 9, 1, 10, 7})\n * {-8, -9, -10, -2, -11, -8}\n * > inversionElements(vector<int>{2, 4, 5, 6, 1, 7})\n * {-3, -5, -6, -7, -2, -8}\n * > inversionElements(vector<int>{8, 9, 11, 14, 12, 13})\n * {-9, -10, -12, -15, -13, -14}\n */\nvector<int> inversionElements(vector<int> testTup) {\n    vector<int> ans;\n    for(int i=0;i<testTup.size();i++){\n        ans.push_back(-testTup[i]);\n    }\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to perform the adjacent element concatenation in the given tuples.\n * > concatenateElements(vector<string>{string(\"DSP \"), string(\"IS \"), string(\"BEST \"), string(\"FOR \"), string(\"ALL \"), string(\"UTS\")})\n * {string(\"DSP IS \"), string(\"IS BEST \"), string(\"BEST FOR \"), string(\"FOR ALL \"), string(\"ALL UTS\")}\n * > concatenateElements(vector<string>{string(\"RES \"), string(\"IS \"), string(\"BEST \"), string(\"FOR \"), string(\"ALL \"), string(\"QESR\")})\n * {string(\"RES IS \"), string(\"IS BEST \"), string(\"BEST FOR \"), string(\"FOR ALL \"), string(\"ALL QESR\")}\n * > concatenateElements(vector<string>{string(\"MSAM\"), string(\"IS \"), string(\"BEST \"), string(\"FOR \"), string(\"ALL \"), string(\"SKD\")})\n * {string(\"MSAMIS \"), string(\"IS BEST \"), string(\"BEST FOR \"), string(\"FOR ALL \"), string(\"ALL SKD\")}\n */\nvector<string> concatenateElements(vector<string> testTup) {\n    vector<string> ans;\n    for(int i=0;i<testTup.size()-1;i++){\n        ans.push_back(testTup[i]+testTup[i+1]);\n    }\n    return ans;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\n * > findLongestRepeatingSubseq(string(\"AABEBCDD\"))\n * 3\n * > findLongestRepeatingSubseq(string(\"aabb\"))\n * 2\n * > findLongestRepeatingSubseq(string(\"aab\"))\n * 1\n */\nint findLongestRepeatingSubseq(string str) {\n    int n = str.length();\n    int dp[n+1][n+1];\n    for(int i=0;i<=n;i++){\n        for(int j=0;j<=n;j++){\n            if(i==0 || j==0) dp[i][j] = 0;\n            else if(str[i-1] == str[j-1]) dp[i][j] = 1 + dp[i-1][j-1];\n            else dp[i][j] = max(dp[i-1][j], dp[i][j-1]);\n        }\n    }\n    return dp[n][n];\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check the given decimal with a precision of 2 by using regex.\n * > isDecimal(string(\"123.11\"))\n * true\n * > isDecimal(string(\"0.21\"))\n * true\n * > isDecimal(string(\"123.1214\"))\n * false\n */\nbool isDecimal(string num) {\n    return regex_match(num, regex(\"^[0-9]+\\\\.[0-9]{2}$\"));\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to delete the smallest element from the given heap and then insert a new item.\n * > heapReplace(vector<int>{25, 44, 68, 21, 39, 23, 89}, 21)\n * {21, 25, 23, 44, 39, 68, 89}\n * > heapReplace(vector<int>{25, 44, 68, 21, 39, 23, 89}, 110)\n * {23, 25, 68, 44, 39, 110, 89}\n * > heapReplace(vector<int>{25, 44, 68, 21, 39, 23, 89}, 500)\n * {23, 25, 68, 44, 39, 500, 89}\n */\nvector<int> heapReplace(vector<int> heap, int a) {\n    heap.push_back(a);\n    int i = heap.size() - 1;\n    while(i > 0 && heap[i] < heap[(i-1)/2]){\n        swap(heap[i], heap[(i-1)/2]);\n        i = (i-1)/2;\n    }\n    return heap;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n * > isAllowedSpecificChar(string(\"ABCDEFabcdef123450\"))\n * true\n * > isAllowedSpecificChar(string(\"*&%@#!}{\"))\n * false\n * > isAllowedSpecificChar(string(\"HELLOhowareyou98765\"))\n * true\n */\nbool isAllowedSpecificChar(string str) {\n    return regex_match(str, regex(\"^[a-zA-Z0-9]+$\"));\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count numbers whose oth and nth bits are set.\n * > countNum(2)\n * 1\n * > countNum(3)\n * 2\n * > countNum(1)\n * 1\n */\nint countNum(int n) {\n    int count = 0;\n    for(int i = 1; i <= n; i++){\n        int x = i;\n        int y = i;\n        int z = i;\n        int a = i;\n        int b = i;\n        int c = i;\n        int d = i;\n        int e = i;\n        int f = i;\n        int g = i;\n        int h = i;\n        int j = i;\n        int k = i;\n        int l = i;\n        int m = i;\n        int n = i;\n        int o = i;\n        int p = i;\n        int q = i;\n        int r = i;\n        int s = i;\n        int t = i;\n        int u = i;\n        int v = i;\n        int w = i;\n        int x = i;\n        int y = i;\n        int z = i;\n        int a = i;\n        int b = i;\n        int c = i;\n        int d = i;\n        int e = i;\n        int f = i;\n        int g = i;\n        int h = i;\n        int j = i;\n        int k = i;\n        int l = i;\n        int m"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of fourth power of n natural numbers.\n * > fourthPowerSum(2)\n * 17\n * > fourthPowerSum(4)\n * 354\n * > fourthPowerSum(6)\n * 2275\n */\nint fourthPowerSum(int n) {\n    int sum = 0;\n    for(int i = 1; i <= n; i++){\n        sum += pow(i, 4);\n    }\n    return sum;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to perform the concatenation of two string tuples.\n * > concatenateStrings(vector<string>{string(\"Manjeet\"), string(\"Nikhil\"), string(\"Akshat\")}, vector<string>{string(\" Singh\"), string(\" Meherwal\"), string(\" Garg\")})\n * {string(\"Manjeet Singh\"), string(\"Nikhil Meherwal\"), string(\"Akshat Garg\")}\n * > concatenateStrings(vector<string>{string(\"Shaik\"), string(\"Ayesha\"), string(\"Sanya\")}, vector<string>{string(\" Dawood\"), string(\" Begum\"), string(\" Singh\")})\n * {string(\"Shaik Dawood\"), string(\"Ayesha Begum\"), string(\"Sanya Singh\")}\n * > concatenateStrings(vector<string>{string(\"Harpreet\"), string(\"Priyanka\"), string(\"Muskan\")}, vector<string>{string(\"Kour\"), string(\" Agarwal\"), string(\"Sethi\")})\n * {string(\"HarpreetKour\"), string(\"Priyanka Agarwal\"), string(\"MuskanSethi\")}\n */\nvector<string> concatenateStrings(vector<string> testTup1, vector<string> testTup2) {\n    vector<string> result;\n    for(int i=0;i<testTup1.size();i++){\n        result.push_back(testTup1[i]+testTup2[i]);\n    }\n    return result;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert radians to degrees.\n * > degreeRadian(90)\n * 5156.620156177409\n * > degreeRadian(60)\n * 3437.746770784939\n * > degreeRadian(120)\n * 6875.493541569878\n */\ndouble degreeRadian(int radian) {\n  return radian * 180 / 3.141592653589793;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the first repeated character in a given string.\n * > firstRepeatedChar(string(\"Google\"))\n * string(\"o\")\n * > firstRepeatedChar(string(\"data\"))\n * string(\"a\")\n * > firstRepeatedChar(string(\"python\"))\n * string(\"\\x00\")\n */\nstring firstRepeatedChar(string str) {\n    unordered_map<char, int> mp;\n    for(char c: str){\n        mp[c]++;\n    }\n    for(char c: str){\n        if(mp[c]>1) return c;\n    }\n    return '\\0';\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the minimum operations required to make two numbers equal.\n * > minOperations(2, 4)\n * 1\n * > minOperations(4, 10)\n * 4\n * > minOperations(1, 4)\n * 3\n */\nint minOperations(int a, int b) {\n    return abs(a-b);\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract maximum and minimum k elements in the given tuple.\n * > extractMinMax(vector<int>{5, 20, 3, 7, 6, 8}, 2)\n * {3, 5, 8, 20}\n * > extractMinMax(vector<int>{4, 5, 6, 1, 2, 7}, 3)\n * {1, 2, 4, 5, 6, 7}\n * > extractMinMax(vector<int>{2, 3, 4, 8, 9, 11, 7}, 4)\n * {2, 3, 4, 7, 8, 9, 11}\n */\nvector<int> extractMinMax(vector<int> testTup, int k) {\n    vector<int> ans;\n    sort(testTup.begin(), testTup.end());\n    for(int i=0; i<k; i++)\n        ans.push_back(testTup[i]);\n    for(int i=testTup.size()-1; i>=testTup.size()-k; i--)\n        ans.push_back(testTup[i]);\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\n * > replaceMaxSpecialchar(string(\"Python language, Programming language.\"), 2)\n * string(\"Python:language: Programming language.\")\n * > replaceMaxSpecialchar(string(\"a b c,d e f\"), 3)\n * string(\"a:b:c:d e f\")\n * > replaceMaxSpecialchar(string(\"ram reshma,ram rahim\"), 1)\n * string(\"ram:reshma,ram rahim\")\n */\nstring replaceMaxSpecialchar(string text, int n) {\n    string res = \"\";\n    int count = 0;\n    for(int i = 0; i < text.length(); i++){\n        if(text[i] == ' ' || text[i] == ',' || text[i] == '.'){\n            count++;\n            if(count <= n){\n                res += \":\";\n            }\n        }\n        else{\n            res += text[i];\n        }\n    }\n    return res;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the first even number in a given list of numbers.\n * > firstEven(vector<int>{2, 3, 4})\n * 2\n * > firstEven(vector<int>{5, 6, 7})\n * 6\n */\nint firstEven(vector<int> nums) {\n    for(int i=0;i<nums.size();i++){\n        if(nums[i]%2==0)\n            return nums[i];\n    }\n    return -1;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if all the elements in tuple have same data type or not.\n * > checkType(vector<int>{5, 6, 7, 3, 5, 6})\n * true\n * > checkType(vector<int>{3, 2, 1, 4, 5})\n * true\n */\nbool checkType(vector<int> testTuple) {\n    return all_of(testTuple.begin(), testTuple.end(), [&](int x) { return typeid(x) == typeid(testTuple[0]); });\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check for majority element in the given sorted array.\n * > isMajority(vector<int>{1, 2, 3, 3, 3, 3, 10}, 7, 3)\n * true\n * > isMajority(vector<int>{1, 1, 2, 4, 4, 4, 6, 6}, 8, 4)\n * false\n * > isMajority(vector<int>{1, 1, 1, 2, 2}, 5, 1)\n * true\n */\nbool isMajority(vector<int> arr, int n, int x) {\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    return count > n/2;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count set bits of a given number.\n * > countSetBits(2)\n * 1\n * > countSetBits(4)\n * 1\n * > countSetBits(6)\n * 2\n */\nint countSetBits(int n) {\n    int count = 0;\n    while(n){\n        n = n & (n-1);\n        count++;\n    }\n    return count;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the minimum element in a sorted and rotated array.\n * > findMin(vector<int>{1, 2, 3, 4, 5}, 0, 4)\n * 1\n * > findMin(vector<int>{4, 6, 8}, 0, 2)\n * 4\n * > findMin(vector<int>{2, 3, 5, 7, 9}, 0, 4)\n * 2\n */\nint findMin(vector<int> arr, int low, int high) {\n    int mid = (low + high) / 2;\n    if (arr[mid] > arr[high])\n        return arr[high];\n    if (arr[low] > arr[mid])\n        return arr[low];\n    return arr[mid];\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to remove the characters which have odd index values of a given string.\n * > oddValuesString(string(\"abcdef\"))\n * string(\"ace\")\n * > oddValuesString(string(\"python\"))\n * string(\"pto\")\n * > oddValuesString(string(\"data\"))\n * string(\"dt\")\n */\nstring oddValuesString(string str) {\n    string ans = \"\";\n    for(int i = 0; i < str.length(); i++){\n        if(i%2 == 0) ans += str[i];\n    }\n    return ans;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find minimum of three numbers.\n * > minOfThree(10, 20, 0)\n * 0\n * > minOfThree(19, 15, 18)\n * 15\n * > minOfThree(-10, -20, -30)\n * -30\n */\nint minOfThree(int a, int b, int c) {\n    return min(a, min(b, c));\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether all the bits are unset in the given range or not.\n * > allBitsSetInTheGivenRange(4, 1, 2)\n * true\n * > allBitsSetInTheGivenRange(17, 2, 4)\n * true\n * > allBitsSetInTheGivenRange(39, 4, 6)\n * false\n */\nbool allBitsSetInTheGivenRange(int n, int l, int r) {\n    return (n & ((1 << r) - 1)) == ((1 << l) - 1);\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\n * > reArrangeArray(vector<int>{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9)\n * {-1, -3, -7, 4, 5, 6, 2, 8, 9}\n * > reArrangeArray(vector<int>{12, -14, -26, 13, 15}, 5)\n * {-14, -26, 12, 13, 15}\n * > reArrangeArray(vector<int>{10, 24, 36, -42, -39, -78, 85}, 7)\n * {-42, -39, -78, 10, 24, 36, 85}\n */\nvector<int> reArrangeArray(vector<int> arr, int n) {\n    vector<int> ans;\n    for(int i=0;i<n;i++){\n        if(arr[i]<0) ans.push_back(arr[i]);\n    }\n    for(int i=0;i<n;i++){\n        if(arr[i]>=0) ans.push_back(arr[i]);\n    }\n    return ans;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to replace blank spaces with any character in a string.\n * > replaceBlank(string(\"hello people\"), string(\"@\"))\n * string(\"hello@people\")\n * > replaceBlank(string(\"python program language\"), string(\"$\"))\n * string(\"python$program$language\")\n * > replaceBlank(string(\"blank space\"), string(\"-\"))\n * string(\"blank-space\")\n */\nstring replaceBlank(string str1, string chr) {\n    int n = str1.length();\n    int count = 0;\n    for(int i = 0; i < n; i++){\n        if(str1[i] == ' '){\n            count++;\n        }\n    }\n    int new_len = n + count * chr.length();\n    string str2 = str1;\n    for(int i = n - 1; i >= 0; i--){\n        if(str1[i] == ' '){\n            str2.insert(i, chr);\n        }\n    }\n    return str2;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum sum in the given right triangle of numbers.\n * > maxSum(vector<vector<int>>{{1}, {2, 1}, {3, 3, 2}}, 3)\n * 6\n * > maxSum(vector<vector<int>>{{1}, {1, 2}, {4, 1, 12}}, 3)\n * 15\n * > maxSum(vector<vector<int>>{{2}, {3, 2}, {13, 23, 12}}, 3)\n * 28\n */\nint maxSum(vector<vector<int>> tri, int n) {\n    int dp[n+1][n+1];\n    for(int i=0;i<=n;i++){\n        for(int j=0;j<=i;j++){\n            if(j==0){\n                dp[i][j]=tri[i][j];\n            }\n            else if(j==i){\n                dp[i][j]=tri[i][j]+dp[i-1][j-1];\n            }\n            else{\n                dp[i][j]=tri[i][j]+max(dp[i-1][j],dp[i-1][j-1]);\n            }\n        }\n    }\n    return dp[n][n];\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to get the n largest items from a dataset.\n * > largNnum(vector<int>{10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100}, 2)\n * {100, 90}\n * > largNnum(vector<int>{10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100}, 5)\n * {100, 90, 80, 70, 60}\n * > largNnum(vector<int>{10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100}, 3)\n * {100, 90, 80}\n */\nvector<int> largNnum(vector<int> list1, int n) {\n    vector<int> ans;\n    sort(list1.begin(), list1.end(), greater<int>());\n    for(int i=0; i<n; i++)\n        ans.push_back(list1[i]);\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the lateral surface area of a cylinder.\n * > lateralsufaceCylinder(10, 5)\n * 314.15000000000003\n * > lateralsufaceCylinder(4, 5)\n * 125.66000000000001\n * > lateralsufaceCylinder(4, 10)\n * 251.32000000000002\n */\ndouble lateralsufaceCylinder(int r, int h) {\n  return 2 * 3.14 * r * r + 2 * 3.14 * r * h;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the volume of a cube.\n * > volumeCube(3)\n * 27\n * > volumeCube(2)\n * 8\n * > volumeCube(5)\n * 125\n */\nint volumeCube(int l) {\n  return l*l*l;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to set all even bits of a given number.\n * > evenBitSetNumber(10)\n * 10\n * > evenBitSetNumber(20)\n * 30\n * > evenBitSetNumber(30)\n * 30\n */\nint evenBitSetNumber(int n) {\n    return n | (n >> 1);\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n * > noOfTriangle(4, 2)\n * 7\n * > noOfTriangle(4, 3)\n * 3\n * > noOfTriangle(1, 3)\n * -1\n */\nint noOfTriangle(int n, int k) {\n    if(n<k) return -1;\n    return (n*(n-1)*(n-2))/6;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count number of non-empty substrings of a given string.\n * > numberOfSubstrings(string(\"abc\"))\n * 6\n * > numberOfSubstrings(string(\"abcd\"))\n * 10\n * > numberOfSubstrings(string(\"abcde\"))\n * 15\n */\nint numberOfSubstrings(string str) {\n    int n = str.length();\n    int ans = 0;\n    for(int i = 0; i < n; i++){\n        for(int j = i; j < n; j++){\n            if(str[i] != str[j]){\n                ans++;\n            }\n        }\n    }\n    return ans;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\n * > getTotalNumberOfSequences(10, 4)\n * 4\n * > getTotalNumberOfSequences(5, 2)\n * 6\n * > getTotalNumberOfSequences(16, 3)\n * 84\n */\nint getTotalNumberOfSequences(int m, int n) {\n    return (m-1)*(m-2)*(m-3)*(m-4)*(m-5)*(m-6)*(m-7)*(m-8)*(m-9)*(m-10)*(m-11)*(m-12)*(m-13)*(m-14)*(m-15)*(m-16);\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to generate a 3d array having each element as '*'.\n * > array3d(6, 4, 3)\n * {{{string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}}, {{string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}}, {{string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}}}\n * > array3d(5, 3, 4)\n * {{{string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}}, {{string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}}, {{string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}}, {{string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}}}\n * > array3d(1, 2, 3)\n * {{{string(\"*\")}, {string(\"*\")}}, {{string(\"*\")}, {string(\"*\")}}, {{string(\"*\")}, {string(\"*\")}}}\n */\nvector<vector<vector<string>>> array3d(int m, int n, int o) {\n    vector<vector<vector<string>>> arr(m, vector<vector<string>>(n, vector<string>(o, \"*\""], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count total characters in a string.\n * > countCharac(string(\"python programming\"))\n * 18\n * > countCharac(string(\"language\"))\n * 8\n * > countCharac(string(\"words\"))\n * 5\n */\nint countCharac(string str1) {\n    return str1.length();\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the next perfect square greater than a given number.\n * > nextPerfectSquare(35)\n * 36\n * > nextPerfectSquare(6)\n * 9\n * > nextPerfectSquare(9)\n * 16\n */\nint nextPerfectSquare(int n) {\n    return sqrt(n) == floor(sqrt(n)) ? (int)pow(sqrt(n) + 1, 2) : (int)pow(sqrt(n) + 1, 2);\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\n * > maxSum(vector<int>{1, 15, 51, 45, 33, 100, 12, 18, 9}, 9)\n * 194\n * > maxSum(vector<int>{80, 60, 30, 40, 20, 10}, 6)\n * 210\n * > maxSum(vector<int>{2, 3, 14, 16, 21, 23, 29, 30}, 8)\n * 138\n */\nint maxSum(vector<int> arr, int n) {\n    int dp[n+1];\n    dp[0] = 0;\n    int max = INT_MIN;\n    for(int i=1; i<=n; i++){\n        dp[i] = max(arr[i-1], dp[i-1]+arr[i-1]);\n        max = max(max, dp[i]);\n    }\n    return max;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function for computing square roots using the babylonian method.\n * > babylonianSquareroot(10)\n * 3.162277660168379\n * > babylonianSquareroot(2)\n * 1.414213562373095\n * > babylonianSquareroot(9)\n * 3.0\n */\ndouble babylonianSquareroot(int number) {\n  double x = number / 2.0;\n  while (abs(x * x - number) > 0.000000000000001) {\n    x = (x + number / x) / 2.0;\n  }\n  return x;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the longest palindromic subsequence in the given string.\n * > lps(string(\"TENS FOR TENS\"))\n * 5\n * > lps(string(\"CARDIO FOR CARDS\"))\n * 7\n * > lps(string(\"PART OF THE JOURNEY IS PART\"))\n * 9\n */\nint lps(string str) {\n    int n = str.length();\n    vector<vector<int>> dp(n, vector<int>(n, 0));\n    for (int i = 0; i < n; i++) {\n        dp[i][i] = 1;\n    }\n    for (int i = n - 1; i >= 0; i--) {\n        for (int j = i + 1; j < n; j++) {\n            if (str[i] == str[j]) {\n                dp[i][j] = dp[i + 1][j - 1] + 2;\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]);\n            }\n        }\n    }\n    return dp[0][n - 1];\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the harmonic sum of n-1.\n * > harmonicSum(7)\n * 2.5928571428571425\n * > harmonicSum(4)\n * 2.083333333333333\n * > harmonicSum(19)\n * 3.547739657143682\n */\ndouble harmonicSum(int n) {\n  return 1.0/n + 1.0/(n-1) + 1.0/(n-2) + 1.0/(n-3) + 1.0/(n-4) + 1.0/(n-5) + 1.0/(n-6);\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the intersection of two arrays using lambda function.\n * > intersectionArray(vector<int>{1, 2, 3, 5, 7, 8, 9, 10}, vector<int>{1, 2, 4, 8, 9})\n * {1, 2, 8, 9}\n * > intersectionArray(vector<int>{1, 2, 3, 5, 7, 8, 9, 10}, vector<int>{3, 5, 7, 9})\n * {3, 5, 7, 9}\n * > intersectionArray(vector<int>{1, 2, 3, 5, 7, 8, 9, 10}, vector<int>{10, 20, 30, 40})\n * {10}\n */\nvector<int> intersectionArray(vector<int> arrayNums1, vector<int> arrayNums2) {\n    vector<int> result;\n    for(int i=0; i<arrayNums1.size(); i++){\n        for(int j=0; j<arrayNums2.size(); j++){\n            if(arrayNums1[i] == arrayNums2[j]){\n                result.push_back(arrayNums1[i]);\n            }\n        }\n    }\n    return result;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the occcurences of an element in a tuple.\n * > countX(vector<int>{10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2}, 4)\n * 0\n * > countX(vector<int>{10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2}, 10)\n * 3\n * > countX(vector<int>{10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2}, 8)\n * 4\n */\nint countX(vector<int> tup, int x) {\n    return count(tup.begin(), tup.end(), x);\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to insert an element before each element of a list.\n * > insertElement(vector<string>{string(\"Red\"), string(\"Green\"), string(\"Black\")}, string(\"c\"))\n * {string(\"c\"), string(\"Red\"), string(\"c\"), string(\"Green\"), string(\"c\"), string(\"Black\")}\n * > insertElement(vector<string>{string(\"python\"), string(\"java\")}, string(\"program\"))\n * {string(\"program\"), string(\"python\"), string(\"program\"), string(\"java\")}\n * > insertElement(vector<string>{string(\"happy\"), string(\"sad\")}, string(\"laugh\"))\n * {string(\"laugh\"), string(\"happy\"), string(\"laugh\"), string(\"sad\")}\n */\nvector<string> insertElement(vector<string> list, string element) {\n    vector<string> ans;\n    for(int i=0;i<list.size();i++){\n        ans.push_back(element);\n        ans.push_back(list[i]);\n    }\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to convert complex numbers to polar coordinates.\n * > convert(1)\n * {1.0, 0.0}\n * > convert(4)\n * {4.0, 0.0}\n * > convert(5)\n * {5.0, 0.0}\n */\nvector<double> convert(int numbers) {\n    vector<double> ans;\n    ans.push_back(numbers);\n    ans.push_back(0);\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count integers from a given list.\n * > countInteger(vector<int>{1, 2, 3})\n * 3\n */\nint countInteger(vector<int> list1) {\n    int count = 0;\n    for(int i = 0; i < list1.size(); i++){\n        if(list1[i] == (int)list1[i]){\n            count++;\n        }\n    }\n    return count;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find all words starting with 'a' or 'e' in a given string.\n * > wordsAe(string(\"python programe\"))\n * {string(\"ame\")}\n * > wordsAe(string(\"python programe language\"))\n * {string(\"ame\"), string(\"anguage\")}\n * > wordsAe(string(\"assert statement\"))\n * {string(\"assert\"), string(\"atement\")}\n */\nvector<string> wordsAe(string text) {\n    vector<string> ans;\n    for(int i=0; i<text.length(); i++){\n        if(text[i]=='a' || text[i]=='e'){\n            int j=i;\n            while(j<text.length() && text[j]!=' '){\n                ans.push_back(text.substr(i, j-i+1));\n                j++;\n            }\n        }\n    }\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\n * > combinationsColors(vector<string>{string(\"Red\"), string(\"Green\"), string(\"Blue\")}, 1)\n * {{string(\"Red\")}, {string(\"Green\")}, {string(\"Blue\")}}\n * > combinationsColors(vector<string>{string(\"Red\"), string(\"Green\"), string(\"Blue\")}, 2)\n * {{string(\"Red\"), string(\"Red\")}, {string(\"Red\"), string(\"Green\")}, {string(\"Red\"), string(\"Blue\")}, {string(\"Green\"), string(\"Green\")}, {string(\"Green\"), string(\"Blue\")}, {string(\"Blue\"), string(\"Blue\")}}\n * > combinationsColors(vector<string>{string(\"Red\"), string(\"Green\"), string(\"Blue\")}, 3)\n * {{string(\"Red\"), string(\"Red\"), string(\"Red\")}, {string(\"Red\"), string(\"Red\"), string(\"Green\")}, {string(\"Red\"), string(\"Red\"), string(\"Blue\")}, {string(\"Red\"), string(\"Green\"), string(\"Green\")}, {string(\"Red\"), string(\"Green\"), string(\"Blue\")}, {string(\"Red\"), string(\"Blue\"), string(\"Blue\")}, {string(\"Green\"), string(\"Green\"), string(\"Green\")}, {string(\"Green\"), string(\"Green\"), string(\"Blue\")}, {string(\"Green\"), string(\"Blue\"), string(\"Blue\")}, {string(\"Blue\"), string(\"Blue\"), string(\"Blue\")}}\n */\nvector<vector<string>> combinationsColors(vector<string> l, int n) {\n    vector<vector<string>> ans;\n    vector<string> temp;\n    for(int i=0;i<n;i++)\n        temp.push_back(l[0]);\n    ans.push_back(temp);\n    for(int i=1;i<l.size();i++){\n        int size = ans.size();\n        for(int j=0;j<size;j++){\n            temp = ans[j];\n            temp.push_back(l[i]);\n            ans.push_back(temp);\n        }\n    }\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the number of prime numbers less than a given non-negative number.\n * > countPrimesNums(5)\n * 2\n * > countPrimesNums(10)\n * 4\n * > countPrimesNums(100)\n * 25\n */\nint countPrimesNums(int n) {\n    int count = 0;\n    for(int i = 2; i < n; i++){\n        if(n%i == 0){\n            count++;\n        }\n    }\n    return count;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to swap two numbers.\n * > swapNumbers(10, 20)\n * {20, 10}\n * > swapNumbers(15, 17)\n * {17, 15}\n * > swapNumbers(100, 200)\n * {200, 100}\n */\nvector<int> swapNumbers(int a, int b) {\n    vector<int> v;\n    v.push_back(b);\n    v.push_back(a);\n    return v;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find number of odd elements in the given list using lambda function.\n * > countOdd(vector<int>{1, 2, 3, 5, 7, 8, 10})\n * 4\n * > countOdd(vector<int>{10, 15, 14, 13, -18, 12, -20})\n * 2\n * > countOdd(vector<int>{1, 2, 4, 8, 9})\n * 2\n */\nint countOdd(vector<int> arrayNums) {\n    return count_if(arrayNums.begin(), arrayNums.end(), [](int x){return x%2;});\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to maximize the given two tuples.\n * > maximizeElements(vector<vector<int>>{{1, 3}, {4, 5}, {2, 9}, {1, 10}}, vector<vector<int>>{{6, 7}, {3, 9}, {1, 1}, {7, 3}})\n * {{6, 7}, {4, 9}, {2, 9}, {7, 10}}\n * > maximizeElements(vector<vector<int>>{{2, 4}, {5, 6}, {3, 10}, {2, 11}}, vector<vector<int>>{{7, 8}, {4, 10}, {2, 2}, {8, 4}})\n * {{7, 8}, {5, 10}, {3, 10}, {8, 11}}\n * > maximizeElements(vector<vector<int>>{{3, 5}, {6, 7}, {4, 11}, {3, 12}}, vector<vector<int>>{{8, 9}, {5, 11}, {3, 3}, {9, 5}})\n * {{8, 9}, {6, 11}, {4, 11}, {9, 12}}\n */\nvector<vector<int>> maximizeElements(vector<vector<int>> testTup1, vector<vector<int>> testTup2) {\n    vector<vector<int>> ans;\n    for(int i=0;i<testTup1.size();i++){\n        vector<int> temp;\n        temp.push_back(max(testTup1[i][0],testTup2[i][0]));\n        temp.push_back(max(testTup1[i][1],testTup2[i][1]));\n        ans.push_back(temp);\n    }\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n * > newmanPrime(3)\n * 7\n * > newmanPrime(4)\n * 17\n * > newmanPrime(5)\n * 41\n */\nint newmanPrime(int n) {\n    int ans = 0;\n    for(int i = 1; i <= n; i++){\n        ans += 2 * (i - 1);\n    }\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to perform mathematical division operation across the given tuples.\n * > divisionElements(vector<int>{10, 4, 6, 9}, vector<int>{5, 2, 3, 3})\n * {2, 2, 2, 3}\n * > divisionElements(vector<int>{12, 6, 8, 16}, vector<int>{6, 3, 4, 4})\n * {2, 2, 2, 4}\n * > divisionElements(vector<int>{20, 14, 36, 18}, vector<int>{5, 7, 6, 9})\n * {4, 2, 6, 2}\n */\nvector<int> divisionElements(vector<int> testTup1, vector<int> testTup2) {\n    vector<int> ans;\n    for(int i=0;i<testTup1.size();i++){\n        ans.push_back(testTup1[i]/testTup2[i]);\n    }\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to merge two dictionaries.\n * > mergeDict(unordered_map<string, int>{{string(\"a\"), 100}, {string(\"b\"), 200}}, unordered_map<string, int>{{string(\"x\"), 300}, {string(\"y\"), 200}})\n * {{string(\"x\"), 300}, {string(\"y\"), 200}, {string(\"a\"), 100}, {string(\"b\"), 200}}\n * > mergeDict(unordered_map<string, int>{{string(\"a\"), 900}, {string(\"b\"), 900}, {string(\"d\"), 900}}, unordered_map<string, int>{{string(\"a\"), 900}, {string(\"b\"), 900}, {string(\"d\"), 900}})\n * {{string(\"a\"), 900}, {string(\"b\"), 900}, {string(\"d\"), 900}}\n * > mergeDict(unordered_map<string, int>{{string(\"a\"), 10}, {string(\"b\"), 20}}, unordered_map<string, int>{{string(\"x\"), 30}, {string(\"y\"), 40}})\n * {{string(\"x\"), 30}, {string(\"y\"), 40}, {string(\"a\"), 10}, {string(\"b\"), 20}}\n */\nunordered_map<string, int> mergeDict(unordered_map<string, int> d1, unordered_map<string, int> d2) {\n    unordered_map<string, int> result;\n    for (auto it = d1.begin(); it != d1.end(); it++) {\n        result[it->first] = it->second;\n    }\n    for (auto it = d2.begin(); it != d2.end(); it++) {\n        result[it->first] = it->second;\n    }\n    return result;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate a dog's age in dog's years.\n * > dogAge(12)\n * 61\n * > dogAge(15)\n * 73\n * > dogAge(24)\n * 109\n */\nint dogAge(int hAge) {\n  return hAge*7;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the lateral surface area of a cube.\n * > lateralsurfaceCube(5)\n * 100\n * > lateralsurfaceCube(9)\n * 324\n * > lateralsurfaceCube(10)\n * 400\n */\nint lateralsurfaceCube(int l) {\n  return 6*l*l;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of squares of first n odd natural numbers.\n * > squareSum(2)\n * 10\n * > squareSum(3)\n * 35\n * > squareSum(4)\n * 84\n */\nint squareSum(int n) {\n    int sum = 0;\n    for(int i = 1; i <= n; i++){\n        sum += (i*i);\n    }\n    return sum;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the n'th star number.\n * > findStarNum(3)\n * 37\n * > findStarNum(4)\n * 73\n * > findStarNum(5)\n * 121\n */\nint findStarNum(int n) {\n  return n * (n + 1) / 2;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the ascii value of a character.\n * > asciiValue(string(\"A\"))\n * 65\n * > asciiValue(string(\"R\"))\n * 82\n * > asciiValue(string(\"S\"))\n * 83\n */\nint asciiValue(string k) {\n    return k[0];\n}\n\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of even numbers at even positions.\n * > sumEvenAndEvenIndex(vector<int>{5, 6, 12, 1, 18, 8}, 6)\n * 30\n * > sumEvenAndEvenIndex(vector<int>{3, 20, 17, 9, 2, 10, 18, 13, 6, 18}, 10)\n * 26\n * > sumEvenAndEvenIndex(vector<int>{5, 6, 12, 1}, 4)\n * 12\n */\nint sumEvenAndEvenIndex(vector<int> arr, int n) {\n    int sum = 0;\n    for(int i = 0; i < n; i += 2){\n        if(arr[i] % 2 == 0){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of fifth power of first n even natural numbers.\n * > evenPowerSum(2)\n * 1056\n * > evenPowerSum(3)\n * 8832\n * > evenPowerSum(1)\n * 32\n */\nint evenPowerSum(int n) {\n    int sum = 0;\n    for(int i = 2; i <= n; i++){\n        sum += pow(i, 5);\n    }\n    return sum;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to substract the contents of one tuple with corresponding index of other tuple.\n * > substractElements(vector<int>{10, 4, 5}, vector<int>{2, 5, 18})\n * {8, -1, -13}\n * > substractElements(vector<int>{11, 2, 3}, vector<int>{24, 45, 16})\n * {-13, -43, -13}\n * > substractElements(vector<int>{7, 18, 9}, vector<int>{10, 11, 12})\n * {-3, 7, -3}\n */\nvector<int> substractElements(vector<int> testTup1, vector<int> testTup2) {\n    vector<int> ans;\n    for(int i=0;i<testTup1.size();i++){\n        ans.push_back(testTup1[i]-testTup2[i]);\n    }\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find sum of even index binomial coefficients.\n * > evenBinomialCoeffSum(4)\n * 8\n * > evenBinomialCoeffSum(6)\n * 32\n * > evenBinomialCoeffSum(2)\n * 2\n */\nint evenBinomialCoeffSum(int n) {\n    int sum = 0;\n    for(int i = 0; i < n; i += 2)\n        sum += binomialCoeff(n, i);\n    return sum;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the position of the last removed element from the given array.\n * > getPosition(vector<int>{2, 5, 4}, 3, 2)\n * 2\n * > getPosition(vector<int>{4, 3}, 2, 2)\n * 2\n * > getPosition(vector<int>{1, 2, 3, 4}, 4, 1)\n * 4\n */\nint getPosition(vector<int> a, int n, int m) {\n    int i = 0;\n    for(int j = 0; j < n; j++){\n        if(a[j] == m){\n            i = j;\n        }\n    }\n    return i;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the volume of a cylinder.\n * > volumeCylinder(10, 5)\n * 1570.7500000000002\n * > volumeCylinder(4, 5)\n * 251.32000000000002\n * > volumeCylinder(4, 10)\n * 502.64000000000004\n */\ndouble volumeCylinder(int r, int h) {\n  return (3.141592653589793 * r * r * h);\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to filter a dictionary based on values.\n * > dictFilter(unordered_map<string, int>{{string(\"Cierra Vega\"), 175}, {string(\"Alden Cantrell\"), 180}, {string(\"Kierra Gentry\"), 165}, {string(\"Pierre Cox\"), 190}}, 170)\n * {{string(\"Cierra Vega\"), 175}, {string(\"Alden Cantrell\"), 180}, {string(\"Pierre Cox\"), 190}}\n * > dictFilter(unordered_map<string, int>{{string(\"Cierra Vega\"), 175}, {string(\"Alden Cantrell\"), 180}, {string(\"Kierra Gentry\"), 165}, {string(\"Pierre Cox\"), 190}}, 180)\n * {{string(\"Alden Cantrell\"), 180}, {string(\"Pierre Cox\"), 190}}\n * > dictFilter(unordered_map<string, int>{{string(\"Cierra Vega\"), 175}, {string(\"Alden Cantrell\"), 180}, {string(\"Kierra Gentry\"), 165}, {string(\"Pierre Cox\"), 190}}, 190)\n * {{string(\"Pierre Cox\"), 190}}\n */\nunordered_map<string, int> dictFilter(unordered_map<string, int> dict, int n) {\n    unordered_map<string, int> res;\n    for (auto it = dict.begin(); it != dict.end(); it++) {\n        if (it->second >= n) {\n            res.insert({it->first, it->second});\n        }\n    }\n    return res;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the nth decagonal number.\n * > isNumDecagonal(3)\n * 27\n * > isNumDecagonal(7)\n * 175\n * > isNumDecagonal(10)\n * 370\n */\nint isNumDecagonal(int n) {\n  return (n * (3 * n - 1)) / 2;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check if the elements of a given list are unique or not.\n * > allUnique(vector<int>{1, 2, 3})\n * true\n * > allUnique(vector<int>{1, 2, 1, 2})\n * false\n * > allUnique(vector<int>{1, 2, 3, 4, 5})\n * true\n */\nbool allUnique(vector<int> testList) {\n    return (testList.size() == testList."], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to substaract two lists using map and lambda function.\n * > subList(vector<int>{1, 2, 3}, vector<int>{4, 5, 6})\n * {-3, -3, -3}\n * > subList(vector<int>{1, 2}, vector<int>{3, 4})\n * {-2, -2}\n * > subList(vector<int>{90, 120}, vector<int>{50, 70})\n * {40, 50}\n */\nvector<int> subList(vector<int> nums1, vector<int> nums2) {\n    return map(nums1.begin(), nums1.end(), nums2.begin(), nums2.end(), [](int a, int b) { return a - b; });\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the frequency of each digit is less than or equal to the digit itself.\n * > validate(1234)\n * true\n * > validate(51241)\n * false\n * > validate(321)\n * true\n */\nbool validate(int n) {\n    int arr[10] = {0};\n    while(n){\n        arr[n%10]++;\n        n/=10;\n    }\n    for(int i=0;i<10;i++){\n        if(arr[i]>i) return false;\n    }\n    return true;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function that matches a string that has an a followed by two to three 'b'.\n * > textMatchTwoThree(string(\"ac\"))\n * string(\"Not matched!\")\n * > textMatchTwoThree(string(\"dc\"))\n * string(\"Not matched!\")\n * > textMatchTwoThree(string(\"abbbba\"))\n * string(\"Found a match!\")\n */\nstring textMatchTwoThree(string text) {\n  return text.find(\"abbb\") != string::npos ? \"Found a match!\" : \"Not matched!\";\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\n * > maxSubArraySumRepeated(vector<int>{10, 20, -30, -1}, 4, 3)\n * 30\n * > maxSubArraySumRepeated(vector<int>{-1, 10, 20}, 3, 2)\n * 59\n * > maxSubArraySumRepeated(vector<int>{-1, -2, -3}, 3, 3)\n * -1\n */\nint maxSubArraySumRepeated(vector<int> a, int n, int k) {\n    int sum = 0;\n    for(int i = 0; i < n; i++){\n        sum += a[i];\n    }\n    int maxSum = sum;\n    for(int i = 0; i < n; i++){\n        int temp = 0;\n        for(int j = i; j < n; j++){\n            temp += a[j];\n            if(temp > maxSum){\n                maxSum = temp;\n            }\n        }\n    }\n    return maxSum * k;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of squares of first n even natural numbers.\n * > squareSum(2)\n * 20\n * > squareSum(3)\n * 56\n * > squareSum(4)\n * 120\n */\nint squareSum(int n) {\n    int sum = 0;\n    for(int i = 0; i < n; i++){\n        sum += (i * i);\n    }\n    return sum;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count array elements having modular inverse under given prime number p equal to itself.\n * > modularInverse(vector<int>{1, 6, 4, 5}, 4, 7)\n * 2\n * > modularInverse(vector<int>{1, 3, 8, 12, 12}, 5, 13)\n * 3\n * > modularInverse(vector<int>{2, 3, 4, 5}, 4, 6)\n * 1\n */\nint modularInverse(vector<int> arr, int n, int p) {\n    int ans = 0;\n    for(int i = 0; i < n; i++){\n        if(arr[i] % p == 1) ans++;\n    }\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to calculate the number of odd days in a given year.\n * > oddDays(100)\n * 5\n * > oddDays(50)\n * 6\n * > oddDays(75)\n * 2\n */\nint oddDays(int n) {\n    return (n/2) + (n%2);\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n * > countNoOfWays(2, 4)\n * 16\n * > countNoOfWays(3, 2)\n * 6\n * > countNoOfWays(4, 4)\n * 228\n */\nint countNoOfWays(int n, int k) {\n    int dp[n+1][k+1];\n    for(int i=0;i<=n;i++){\n        for(int j=0;j<=k;j++){\n            if(i==0 || j==0){\n                dp[i][j]=0;\n            }\n            else if(i==1){\n                dp[i][j]=j;\n            }\n            else{\n                dp[i][j]=dp[i-1][j]+dp[i-1][j-1];\n            }\n        }\n    }\n    return dp[n][k];\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find quotient of two numbers.\n * > find(10, 3)\n * 3\n * > find(4, 2)\n * 2\n * > find(20, 5)\n * 4\n */\nint find(int n, int m) {\n    return n/m;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to return the sum of all divisors of a number.\n * > sumDiv(8)\n * 7\n * > sumDiv(12)\n * 16\n * > sumDiv(7)\n * 1\n */\nint sumDiv(int number) {\n  int sum = 0;\n  for (int i = 1; i <= number; i++) {\n    if (number % i == 0) {\n      sum += i;\n    }\n  }\n  return sum;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count inversions in an array.\n * > getInvCount(vector<int>{1, 20, 6, 4, 5}, 5)\n * 5\n * > getInvCount(vector<int>{1, 2, 1}, 3)\n * 1\n * > getInvCount(vector<int>{1, 2, 5, 6, 1}, 5)\n * 3\n */\nint getInvCount(vector<int> arr, int n) {\n    int inv = 0;\n    for(int i = 0; i < n; i++){\n        for(int j = i+1; j < n; j++){\n            if(arr[i] > arr[j]){\n                inv++;\n            }\n        }\n    }\n    return inv;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to flatten a given nested list structure.\n * > flattenList(vector<vector<int>>{{10, 20}, {40}, {30, 56, 25}, {10, 20}, {33}, {40}})\n * {10, 20, 40, 30, 56, 25, 10, 20, 33, 40}\n * > flattenList(vector<vector<int>>{{1, 2, 3}, {4, 5, 6}, {10, 11, 12}, {7, 8, 9}})\n * {1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9}\n */\nvector<int> flattenList(vector<vector<int>> list1) {\n    vector<int> ans;\n    for(auto i:list1){\n        ans.insert(ans.end(), i.begin(), i.end());\n    }\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n * > countBinarySeq(1)\n * 2.0\n * > countBinarySeq(2)\n * 6.0\n * > countBinarySeq(3)\n * 20.0\n */\ndouble countBinarySeq(int n) {\n    return pow(2, n) * (pow(2, n) - 1) / 2;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the most significant bit number which is also a set bit.\n * > setBitNumber(6)\n * 4\n * > setBitNumber(10)\n * 8\n * > setBitNumber(18)\n * 16\n */\nint setBitNumber(int n) {\n    int count = 0;\n    while(n){\n        n = n & (n-1);\n        count++;\n    }\n    return count;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the count of inversion of two types are same or not.\n * > solve(vector<int>{1, 0, 2}, 3)\n * true\n * > solve(vector<int>{1, 2, 0}, 3)\n * false\n * > solve(vector<int>{1, 2, 1}, 3)\n * true\n */\nbool solve(vector<int> a, int n) {\n    int count1 = 0, count2 = 0;\n    for(int i = 0; i < n; i++){\n        for(int j = i+1; j < n; j++){\n            if(a[i] > a[j]){\n                count1++;\n            }\n        }\n    }\n    for(int i = 0; i < n; i++){\n        for(int j = i+1; j < n; j++){\n            if(a[i] < a[j]){\n                count2++;\n            }\n        }\n    }\n    if(count1 == count2){\n        return true;\n    }\n    return false;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find element at a given index after number of rotations.\n * > findElement(vector<int>{1, 2, 3, 4, 5}, vector<vector<int>>{{0, 2}, {0, 3}}, 2, 1)\n * 3\n * > findElement(vector<int>{1, 2, 3, 4}, vector<vector<int>>{{0, 1}, {0, 2}}, 1, 2)\n * 3\n * > findElement(vector<int>{1, 2, 3, 4, 5, 6}, vector<vector<int>>{{0, 1}, {0, 2}}, 1, 1)\n * 1\n */\nint findElement(vector<int> arr, vector<vector<int>> ranges, int rotations, int index) {\n    for(int i=0;i<rotations;i++){\n        int n=arr.size();\n        int start=ranges[i][0];\n        int end=ranges[i][1];\n        vector<int> temp;\n        for(int j=start;j<=end;j++){\n            temp.push_back(arr[j]);\n        }\n        for(int j=start;j<=end;j++){\n            arr[j]=temp[j-start];\n        }\n    }\n    return arr[index];\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to match two words from a list of words starting with letter 'p'.\n * > startWithp(vector<string>{string(\"Python PHP\"), string(\"Java JavaScript\"), string(\"c c++\")})\n * {string(\"Python\"), string(\"PHP\")}\n * > startWithp(vector<string>{string(\"Python Programming\"), string(\"Java Programming\")})\n * {string(\"Python\"), string(\"Programming\")}\n * > startWithp(vector<string>{string(\"Pqrst Pqr\"), string(\"qrstuv\")})\n * {string(\"Pqrst\"), string(\"Pqr\")}\n */\nvector<string> startWithp(vector<string> words) {\n    vector<string> ans;\n    for(string word: words){\n        if(word[0] == 'p') ans.push_back(word);\n    }\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\n * > maxSumIncreasingSubseq(vector<int>{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6)\n * 11\n * > maxSumIncreasingSubseq(vector<int>{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5)\n * 7\n * > maxSumIncreasingSubseq(vector<int>{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4)\n * 71\n */\nint maxSumIncreasingSubseq(vector<int> a, int n, int index, int k) {\n    int dp[n+1];\n    dp[0] = 0;\n    int max = INT_MIN;\n    for(int i=1; i<=n; i++){\n        dp[i] = max(a[i-1], dp[i-1]);\n        if(i >= index){\n            max = max(max, dp[i] + a[k]);\n        }\n    }\n    return max;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the specified number of largest products from two given lists.\n * > largeProduct(vector<int>{1, 2, 3, 4, 5, 6}, vector<int>{3, 6, 8, 9, 10, 6}, 3)\n * {60, 54, 50}\n * > largeProduct(vector<int>{1, 2, 3, 4, 5, 6}, vector<int>{3, 6, 8, 9, 10, 6}, 4)\n * {60, 54, 50, 48}\n * > largeProduct(vector<int>{1, 2, 3, 4, 5, 6}, vector<int>{3, 6, 8, 9, 10, 6}, 5)\n * {60, 54, 50, 48, 45}\n */\nvector<int> largeProduct(vector<int> nums1, vector<int> nums2, int n) {\n    vector<int> ans;\n    for(int i=0;i<n;i++){\n        ans.push_back(nums1[i]*nums2[i]);\n    }\n    sort(ans.begin(),ans.end(),greater<int>());\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the maximum of two numbers.\n * > maximum(5, 10)\n * 10\n * > maximum(-1, -2)\n * -1\n * > maximum(9, 7)\n * 9\n */\nint maximum(int a, int b) {\n    return max(a, b);\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert a given string to a tuple.\n * > stringToTuple(string(\"python 3.0\"))\n * {string(\"p\"), string(\"y\"), string(\"t\"), string(\"h\"), string(\"o\"), string(\"n\"), string(\"3\"), string(\".\"), string(\"0\")}\n * > stringToTuple(string(\"item1\"))\n * {string(\"i\"), string(\"t\"), string(\"e\"), string(\"m\"), string(\"1\")}\n * > stringToTuple(string(\"15.10\"))\n * {string(\"1\"), string(\"5\"), string(\".\"), string(\"1\"), string(\"0\")}\n */\nvector<string> stringToTuple(string str1) {\n    vector<string> ans;\n    for(char c: str1)\n        ans.push_back(string(1, c));\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to set the left most unset bit.\n * > setLeftMostUnsetBit(10)\n * 14\n * > setLeftMostUnsetBit(12)\n * 14\n * > setLeftMostUnsetBit(15)\n * 15\n */\nint setLeftMostUnsetBit(int n) {\n    return n | (n + 1);\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the volume of a cone.\n * > volumeCone(5, 12)\n * 314.15926535897927\n * > volumeCone(10, 15)\n * 1570.7963267948965\n * > volumeCone(19, 17)\n * 6426.651371693521\n */\ndouble volumeCone(int r, int h) {\n  return (1.0/3.0)*M_PI*pow(r, 2)*h;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\n * > maxSumRectangularGrid(vector<vector<int>>{{1, 4, 5}, {2, 0, 0}}, 3)\n * 7\n * > maxSumRectangularGrid(vector<vector<int>>{{1, 2, 3, 4, 5}, {6, 7, 8, 9, 10}}, 5)\n * 24\n * > maxSumRectangularGrid(vector<vector<int>>{{7, 9, 11, 15, 19}, {21, 25, 28, 31, 32}}, 5)\n * 81\n */\nint maxSumRectangularGrid(vector<vector<int>> grid, int n) {\n    int m = grid.size();\n    int dp[m][n];\n    for(int i=0;i<m;i++){\n        for(int j=0;j<n;j++){\n            if(i==0 || j==0){\n                dp[i][j] = grid[i][j];\n            }\n            else{\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j];\n            }\n        }\n    }\n    int ans = INT_MIN;\n    for(int i=0;i<n;i++){\n        ans = max(ans, dp[m-1][i]);\n    }\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the first maximum length of even word.\n * > findMaxLenEven(string(\"python language\"))\n * string(\"language\")\n * > findMaxLenEven(string(\"maximum even length\"))\n * string(\"length\")\n * > findMaxLenEven(string(\"eve\"))\n * string(\"-1\")\n */\nstring findMaxLenEven(string str) {\n    int n = str.length();\n    int max = 0;\n    string ans = \"-1\";\n    for(int i=0;i<n;i++){\n        if(str[i]==' '){\n            if(max<i-max){\n                max = i-max;\n                ans = str.substr(max,i-max);\n            }\n        }\n    }\n    if(max==0){\n        return ans = \"-1\";\n    }\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the index of the last occurrence of a given number in a sorted array.\n * > findLastOccurrence(vector<int>{2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5)\n * 3\n * > findLastOccurrence(vector<int>{2, 3, 5, 8, 6, 6, 8, 9, 9, 9}, 9)\n * 9\n * > findLastOccurrence(vector<int>{2, 2, 1, 5, 6, 6, 6, 9, 9, 9}, 6)\n * 6\n */\nint findLastOccurrence(vector<int> a, int x) {\n    int n = a.size();\n    int i = n-1;\n    while(i>=0 && a[i]!=x) i--;\n    return i;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the maximum volume of a cuboid with given sum of sides.\n * > maxVolume(8)\n * 18\n * > maxVolume(4)\n * 2\n * > maxVolume(1)\n * 0\n */\nint maxVolume(int s) {\n    return (s*(s-1)*(s-2))/6;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find all five characters long word in the given string by using regex.\n * > findLongWord(string(\"Please move back to strem\"))\n * {string(\"strem\")}\n * > findLongWord(string(\"4K Ultra HD streaming player\"))\n * {string(\"Ultra\")}\n * > findLongWord(string(\"Streaming Media Player\"))\n * {string(\"Media\")}\n */\nvector<string> findLongWord(string text) {\n    vector<string> ans;\n    regex reg(\"\\\\w{5}\");\n    sregex_iterator it(text.begin(), text.end(), reg);\n    sregex_iterator end;\n    while(it!=end){\n        ans.push_back(it->str());\n        it++;\n    }\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n * > sumDifference(12)\n * 5434\n * > sumDifference(20)\n * 41230\n * > sumDifference(54)\n * 2151270\n */\nint sumDifference(int n) {\n    int sum = 0;\n    for(int i = 1; i <= n; i++)\n        sum += i;\n    return (pow(sum, 2) - (sum * (sum + 1) / 2));\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the demlo number for the given number.\n * > findDemlo(string(\"111111\"))\n * string(\"12345654321\")\n * > findDemlo(string(\"1111\"))\n * string(\"1234321\")\n * > findDemlo(string(\"13333122222\"))\n * string(\"123456789101110987654321\")\n */\nstring findDemlo(string s) {\n    string ans = \"\";\n    for(int i = 0; i < s.length(); i++){\n        ans += s[i];\n        if(i%2 == 0){\n            ans += s[i];\n        }\n    }\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find all index positions of the minimum values in a given list.\n * > positionMin(vector<int>{12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54})\n * {3, 11}\n * > positionMin(vector<int>{1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5})\n * {0}\n * > positionMin(vector<int>{2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12})\n * {1}\n */\nvector<int> positionMin(vector<int> list1) {\n    vector<int> ans;\n    int min = list1[0];\n    for(int i = 0; i < list1.size(); i++){\n        if(list1[i] < min){\n            min = list1[i];\n            ans.clear();\n            ans.push_back(i);\n        }\n        else if(list1[i] == min){\n            ans.push_back(i);\n        }\n    }\n    return ans;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to re-arrange the given array in alternating positive and negative items.\n * > reArrange(vector<int>{-5, -2, 5, 2, 4, 7, 1, 8, 0, -8}, 10)\n * {-5, 5, -2, 2, -8, 4, 7, 1, 8, 0}\n * > reArrange(vector<int>{1, 2, 3, -4, -1, 4}, 6)\n * {-4, 1, -1, 2, 3, 4}\n * > reArrange(vector<int>{4, 7, 9, 77, -4, 5, -3, -9}, 8)\n * {-4, 4, -3, 7, -9, 9, 77, 5}\n */\nvector<int> reArrange(vector<int> arr, int n) {\n    vector<int> ans;\n    for(int i=0;i<n;i++){\n        if(arr[i]<0){\n            ans.push_back(arr[i]);\n        }\n        else{\n            ans.insert(ans.begin(),arr[i]);\n        }\n    }\n    return ans;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract the sum of alternate chains of tuples.\n * > sumOfAlternates(vector<int>{5, 6, 3, 6, 10, 34})\n * {46, 18}\n * > sumOfAlternates(vector<int>{1, 2, 3, 4, 5})\n * {6, 9}\n * > sumOfAlternates(vector<int>{6, 7, 8, 9, 4, 5})\n * {21, 18}\n */\nvector<int> sumOfAlternates(vector<int> testTuple) {\n    vector<int> result;\n    int sum = 0;\n    for(int i = 0; i < testTuple.size(); i += 2){\n        sum += testTuple[i];\n    }\n    result.push_back(sum);\n    sum = 0;\n    for(int i = 1; i < testTuple.size(); i += 2){\n        sum += testTuple[i];\n    }\n    result.push_back(sum);\n    return result;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the minimum number of squares whose sum is equal to a given number.\n * > getMinSquares(6)\n * 3\n * > getMinSquares(2)\n * 2\n * > getMinSquares(4)\n * 1\n */\nint getMinSquares(int n) {\n    int ans = 0;\n    for(int i = 1; i*i <= n; i++){\n        ans += n/i;\n    }\n    return ans;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to get the word with most number of occurrences in the given strings list.\n * > mostOccurrences(vector<string>{string(\"UTS is best for RTF\"), string(\"RTF love UTS\"), string(\"UTS is best\")})\n * string(\"UTS\")\n * > mostOccurrences(vector<string>{string(\"Its been a great year\"), string(\"this year is so worse\"), string(\"this year is okay\")})\n * string(\"year\")\n * > mostOccurrences(vector<string>{string(\"Families can be reunited\"), string(\"people can be reunited\"), string(\"Tasks can be achieved \")})\n * string(\"can\")\n */\nstring mostOccurrences(vector<string> testList) {\n    unordered_map<string, int> map;\n    for(string s: testList){\n        istringstream iss(s);\n        string word;\n        while(iss >> word){\n            map[word]++;\n        }\n    }\n    int max = 0;\n    string ans;\n    for(auto it = map.begin(); it != map.end(); it++){\n        if(it->second > max){\n            max = it->second;\n            ans = it->first;\n        }\n    }\n    return ans;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to print check if the triangle is isosceles or not.\n * > checkIsosceles(6, 8, 12)\n * false\n * > checkIsosceles(6, 6, 12)\n * true\n * > checkIsosceles(6, 16, 20)\n * false\n */\nbool checkIsosceles(int x, int y, int z) {\n    return (x == y || x == z || y == z);\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to rotate a given list by specified number of items to the left direction.\n * > rotateLeft(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3, 4)\n * {4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4}\n * > rotateLeft(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2, 2)\n * {3, 4, 5, 6, 7, 8, 9, 10, 1, 2}\n * > rotateLeft(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5, 2)\n * {6, 7, 8, 9, 10, 1, 2}\n */\nvector<int> rotateLeft(vector<int> list1, int m, int n) {\n    vector<int> list2;\n    for(int i=m; i<list1.size(); i++){\n        list2.push_back(list1[i]);\n    }\n    for(int i=0; i<n; i++){\n        list2.push_back(list1[i]);\n    }\n    return list2;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count negative numbers in a list.\n * > negCount(vector<int>{-1, -2, 3, -4, -5})\n * 4\n * > negCount(vector<int>{1, 2, 3})\n * 0\n * > negCount(vector<int>{1, 2, -3, -10, 20})\n * 2\n */\nint negCount(vector<int> list) {\n    int count = 0;\n    for(int i = 0; i < list.size(); i++){\n        if(list[i] < 0){\n            count++;\n        }\n    }\n    return count;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find all three, four, five characters long words in the given string by using regex.\n * > findChar(string(\"For the four consumer complaints contact manager AKR reddy\"))\n * {string(\"For\"), string(\"the\"), string(\"four\"), string(\"AKR\"), string(\"reddy\")}\n * > findChar(string(\"Certain service are subject to change MSR\"))\n * {string(\"are\"), string(\"MSR\")}\n * > findChar(string(\"Third party legal desclaimers\"))\n * {string(\"Third\"), string(\"party\"), string(\"legal\")}\n */\nvector<string> findChar(string text) {\n    vector<string> ans;\n    regex reg(\"\\\\b\\\\w{3,5}\\\\b\");\n    sregex_iterator it(text.begin(), text.end(), reg);\n    sregex_iterator end;\n    while(it != end){\n        ans.push_back(it->str());\n        it++;\n    }\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count unset bits of a given number.\n * > countUnsetBits(2)\n * 1\n * > countUnsetBits(4)\n * 2\n * > countUnsetBits(6)\n * 1\n */\nint countUnsetBits(int n) {\n    int count = 0;\n    while(n){\n        if(n&1)\n            count++;\n        n>>=1;\n    }\n    return count;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count character frequency of a given string.\n * > charFrequency(string(\"python\"))\n * {{string(\"p\"), 1}, {string(\"y\"), 1}, {string(\"t\"), 1}, {string(\"h\"), 1}, {string(\"o\"), 1}, {string(\"n\"), 1}}\n * > charFrequency(string(\"program\"))\n * {{string(\"p\"), 1}, {string(\"r\"), 2}, {string(\"o\"), 1}, {string(\"g\"), 1}, {string(\"a\"), 1}, {string(\"m\"), 1}}\n * > charFrequency(string(\"language\"))\n * {{string(\"l\"), 1}, {string(\"a\"), 2}, {string(\"n\"), 1}, {string(\"g\"), 2}, {string(\"u\"), 1}, {string(\"e\"), 1}}\n */\nunordered_map<string, int> charFrequency(string str1) {\n    unordered_map<string, int> mp;\n    for(char c: str1)\n        mp[string(1, c)]++;\n    return mp;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the triangle is valid or not if sides are given.\n * > checkValidity(1, 2, 3)\n * false\n * > checkValidity(2, 3, 5)\n * false\n * > checkValidity(7, 10, 5)\n * true\n */\nbool checkValidity(int a, int b, int c) {\n    return (a+b>c && a+c>b && b+c>a);\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the sum of arithmetic progression.\n * > apSum(1, 5, 2)\n * 25\n * > apSum(2, 6, 4)\n * 72\n * > apSum(1, 4, 5)\n * 34\n */\nint apSum(int a, int n, int d) {\n  return (n * (2 * a + (n - 1) * d)) / 2;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether the given month name contains 28 days or not.\n * > checkMonthnum(string(\"February\"))\n * true\n * > checkMonthnum(string(\"January\"))\n * false\n * > checkMonthnum(string(\"March\"))\n * false\n */\nbool checkMonthnum(string monthname1) {\n    if(monthname1 == \"February\"){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function that matches a word at the end of a string, with optional punctuation.\n * > textMatchWord(string(\"python.\"))\n * string(\"Found a match!\")\n * > textMatchWord(string(\"python.\"))\n * string(\"Found a match!\")\n * > textMatchWord(string(\"  lang  .\"))\n * string(\"Not matched!\")\n */\nstring textMatchWord(string text) {\n  return text.substr(text.size()-5,5) == \"lang.\" ? \"Found a match!\" : \"Not matched!\";\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the number of substrings with same first and last characters.\n * > countSubstringWithEqualEnds(string(\"aba\"))\n * 4\n * > countSubstringWithEqualEnds(string(\"abcab\"))\n * 7\n * > countSubstringWithEqualEnds(string(\"abc\"))\n * 3\n */\nint countSubstringWithEqualEnds(string s) {\n    int n = s.length();\n    int ans = 0;\n    for(int i=0;i<n;i++){\n        int j = i;\n        while(j<n and s[i]==s[j]){\n            j++;\n        }\n        ans += (j-i-1);\n        i = j-1;\n    }\n    return ans;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the maximum occuring divisor in an interval.\n * > findDivisor(2, 2)\n * 2\n * > findDivisor(2, 5)\n * 2\n * > findDivisor(5, 10)\n * 2\n */\nint findDivisor(int x, int y) {\n    int ans = 1;\n    for(int i = 2; i <= min(x, y); i++){\n        if(x%i == 0 && y%i == 0) ans = i;\n    }\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of the three lowest positive numbers from a given list of numbers.\n * > sumThreeSmallestNums(vector<int>{10, 20, 30, 40, 50, 60, 7})\n * 37\n * > sumThreeSmallestNums(vector<int>{1, 2, 3, 4, 5})\n * 6\n * > sumThreeSmallestNums(vector<int>{0, 1, 2, 3, 4, 5})\n * 6\n */\nint sumThreeSmallestNums(vector<int> lst) {\n    int n = lst.size();\n    int sum = 0;\n    sort(lst.begin(), lst.end());\n    for(int i = 0; i < 3; i++)\n        sum += lst[i];\n    return sum;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert the given set into tuples.\n * > setToTuple(unordered_set<int>{1, 2, 3, 4, 5})\n * {1, 2, 3, 4, 5}\n * > setToTuple(unordered_set<int>{6, 7, 8, 9, 10, 11})\n * {6, 7, 8, 9, 10, 11}\n * > setToTuple(unordered_set<int>{12, 13, 14, 15, 16})\n * {12, 13, 14, 15, 16}\n */\nvector<int> setToTuple(unordered_set<int> s) {\n    vector<int> v;\n    for(auto i: s) v.push_back(i);\n    return v;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the smallest range that includes at-least one element from each of the given arrays.\n * > findMinimumRange(vector<vector<int>>{{3, 6, 8, 10, 15}, {1, 5, 12}, {4, 8, 15, 16}, {2, 6}})\n * {4, 6}\n * > findMinimumRange(vector<vector<int>>{{2, 3, 4, 8, 10, 15}, {1, 5, 12}, {7, 8, 15, 16}, {3, 6}})\n * {4, 7}\n * > findMinimumRange(vector<vector<int>>{{4, 7, 9, 11, 16}, {2, 6, 13}, {5, 9, 16, 17}, {3, 7}})\n * {5, 7}\n */\nvector<int> findMinimumRange(vector<vector<int>> list) {\n    int n = list.size();\n    int min = INT_MAX;\n    int max = INT_MIN;\n    for(int i=0; i<n; i++){\n        min = min < list[i][0] ? min : list[i][0];\n        max = max > list[i][list[i].size()-1] ? max : list[i][list[i].size()-1];\n    }\n    return {min, max};\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the number of digits and letters in a string.\n * > digLet(string(\"python\"))\n * {6, 0}\n * > digLet(string(\"program\"))\n * {7, 0}\n * > digLet(string(\"python3.0\"))\n * {6, 2}\n */\nvector<int> digLet(string s) {\n    int n = s.length();\n    int count = 0;\n    for(int i = 0; i < n; i++){\n        if(isdigit(s[i])){\n            count++;\n        }\n    }\n    return {n, count};\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find number of elements with odd factors in a given range.\n * > countOddSquares(5, 100)\n * 8\n * > countOddSquares(8, 65)\n * 6\n * > countOddSquares(2, 5)\n * 1\n */\nint countOddSquares(int n, int m) {\n    int count = 0;\n    for(int i = n; i <= m; i++){\n        if(i % 2 != 0){\n            count += i * i;\n        }\n    }\n    return count;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the difference between two consecutive numbers in a given list.\n * > diffConsecutivenums(vector<int>{1, 1, 3, 4, 4, 5, 6, 7})\n * {0, 2, 1, 0, 1, 1, 1}\n * > diffConsecutivenums(vector<int>{4, 5, 8, 9, 6, 10})\n * {1, 3, 1, -3, 4}\n * > diffConsecutivenums(vector<int>{0, 1, 2, 3, 4, 4, 4, 4, 5, 7})\n * {1, 1, 1, 1, 0, 0, 0, 1, 2}\n */\nvector<int> diffConsecutivenums(vector<int> nums) {\n    vector<int> ans;\n    for(int i=0;i<nums.size()-1;i++){\n        ans.push_back(nums[i+1]-nums[i]);\n    }\n    return ans;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find entringer number e(n, k).\n * > zigzag(4, 3)\n * 5\n * > zigzag(4, 2)\n * 4\n * > zigzag(3, 1)\n * 1\n */\nint zigzag(int n, int k) {\n    return (n * (n + 1) / 2) - (k * (k + 1) / 2);\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the number of squares in a rectangle.\n * > countSquares(4, 3)\n * 20\n * > countSquares(1, 2)\n * 2\n * > countSquares(2, 2)\n * 5\n */\nint countSquares(int m, int n) {\n    return (m * m + n * n) * 2;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\n * > findWays(4)\n * 2\n * > findWays(6)\n * 5\n * > findWays(8)\n * 14\n */\nint findWays(int m) {\n    int dp[m+1];\n    dp[0] = 1;\n    for(int i=1; i<=m; i++){\n        dp[i] = 0;\n        for(int j=1; j<=i; j++){\n            dp[i] += dp[i-j];\n        }\n    }\n    return dp[m];\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given string is a binary string or not.\n * > check(string(\"01010101010\"))\n * string(\"Yes\")\n * > check(string(\"name0\"))\n * string(\"No\")\n * > check(string(\"101\"))\n * string(\"Yes\")\n */\nstring check(string str) {\n    int n = str.length();\n    for(int i=0;i<n;i++){\n        if(str[i]!='0' && str[i]!='1'){\n            return \"No\";\n        }\n    }\n    return \"Yes\";\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to minimize the length of the string by removing occurrence of only one character.\n * > minimumLength(string(\"mnm\"))\n * 1\n * > minimumLength(string(\"abcda\"))\n * 3\n * > minimumLength(string(\"abcb\"))\n * 2\n */\nint minimumLength(string s) {\n    int n = s.length();\n    int ans = n;\n    unordered_map<char, int> mp;\n    for(int i=0;i<n;i++){\n        mp[s[i]]++;\n    }\n    for(auto it:mp){\n        if(it.second == 1){\n            ans = min(ans, n-it.second);\n        }\n    }\n    return ans;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the first element occurring k times in a given array.\n * > firstElement(vector<int>{0, 1, 2, 3, 4, 5}, 6, 1)\n * 0\n * > firstElement(vector<int>{1, 2, 1, 3, 4}, 5, 2)\n * 1\n * > firstElement(vector<int>{2, 3, 4, 3, 5, 7, 1, 2, 3, 5}, 10, 2)\n * 2\n */\nint firstElement(vector<int> arr, int n, int k) {\n    unordered_map<int, int> mp;\n    for(int i=0;i<n;i++){\n        mp[arr[i]]++;\n    }\n    for(int i=0;i<n;i++){\n        if(mp[arr[i]]==k){\n            return arr[i];\n        }\n    }\n    return -1;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether all the characters in a given string are unique.\n * > uniqueCharacters(string(\"aba\"))\n * false\n * > uniqueCharacters(string(\"abc\"))\n * true\n * > uniqueCharacters(string(\"abab\"))\n * false\n */\nbool uniqueCharacters(string str) {\n    unordered_set<char> s;\n    for(char c: str){\n        if(s.find(c)!=s.end()) return false;\n        s.insert(c);\n    }\n    return true;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove a specified column from a given nested list.\n * > removeColumn(vector<vector<int>>{{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}, 0)\n * {{2, 3}, {4, 5}, {1, 1}}\n * > removeColumn(vector<vector<int>>{{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}, 2)\n * {{1, 2}, {-2, 4}, {1, -1}}\n * > removeColumn(vector<vector<int>>{{1, 3}, {5, 7}, {1, 3}, {13, 15, 17}, {5, 7}, {9, 11}}, 0)\n * {{3}, {7}, {3}, {15, 17}, {7}, {11}}\n */\nvector<vector<int>> removeColumn(vector<vector<int>> list1, int n) {\n    vector<vector<int>> ans;\n    for(auto i:list1){\n        vector<int> temp;\n        for(int j=0;j<i.size();j++){\n            if(j!=n)\n                temp.push_back(i[j]);\n        }\n        ans.push_back(temp);\n    }\n    return ans;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find t-nth term of arithemetic progression.\n * > tnAp(1, 5, 2)\n * 9\n * > tnAp(2, 6, 4)\n * 22\n * > tnAp(1, 4, 5)\n * 16\n */\nint tnAp(int a, int n, int d) {\n    return a + (n - 1) * d;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the number of rectangles in a circle of radius r.\n * > countRectangles(2)\n * 8\n * > countRectangles(1)\n * 1\n * > countRectangles(0)\n * 0\n */\nint countRectangles(int radius) {\n    return (radius * radius) * 4;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the third angle of a triangle using two angles.\n * > findAngle(47, 89)\n * 44\n * > findAngle(45, 95)\n * 40\n * > findAngle(50, 40)\n * 90\n */\nint findAngle(int a, int b) {\n    return 180 - a - b;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum element of all the given tuple records.\n * > findMax(vector<vector<int>>{{2, 4}, {6, 7}, {5, 1}, {6, 10}, {8, 7}})\n * 10\n * > findMax(vector<vector<int>>{{3, 5}, {7, 8}, {6, 2}, {7, 11}, {9, 8}})\n * 11\n * > findMax(vector<vector<int>>{{4, 6}, {8, 9}, {7, 3}, {8, 12}, {10, 9}})\n * 12\n */\nint findMax(vector<vector<int>> testList) {\n    int max = INT_MIN;\n    for(auto i: testList){\n        if(i[1] > max)\n            max = i[1];\n    }\n    return max;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find modulo division of two lists using map and lambda function.\n * > moddivList(vector<int>{4, 5, 6}, vector<int>{1, 2, 3})\n * {0, 1, 0}\n * > moddivList(vector<int>{3, 2}, vector<int>{1, 4})\n * {0, 2}\n * > moddivList(vector<int>{90, 120}, vector<int>{50, 70})\n * {40, 50}\n */\nvector<int> moddivList(vector<int> nums1, vector<int> nums2) {\n    vector<int> ans;\n    map<int, int> m;\n    for(int i=0;i<nums1.size();i++){\n        m[nums1[i]] = nums2[i];\n    }\n    for(int i=0;i<nums1.size();i++){\n        ans.push_back(nums1[i]%m[nums1[i]]);\n    }\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether one root of the quadratic equation is twice of the other or not.\n * > checkSolution(1, 3, 2)\n * string(\"Yes\")\n * > checkSolution(1, 2, 3)\n * string(\"No\")\n * > checkSolution(1, -5, 6)\n * string(\"No\")\n */\nstring checkSolution(int a, int b, int c) {\n    if(a==0) return \"No\";\n    if(b*b-4*a*c<0) return \"No\";\n    if(b*b-4*a*c==0) return \"Yes\";\n    if(b*b-4*a*c>0) {\n        if(sqrt(b*b-4*a*c)==2*sqrt(c/a)) return \"Yes\";\n        else return \"No\";\n    }\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the n\u2019th carol number.\n * > getCarol(2)\n * 7\n * > getCarol(4)\n * 223\n * > getCarol(5)\n * 959\n */\nint getCarol(int n) {\n    int a = 1, b = 1, c = 1;\n    for(int i = 1; i < n; i++){\n        int temp = a;\n        a = b;\n        b = c;\n        c = temp + b;\n    }\n    return c;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to add the k elements to each element in the tuple.\n * > addKElement(vector<vector<int>>{{1, 3, 4}, {2, 4, 6}, {3, 8, 1}}, 4)\n * {{5, 7, 8}, {6, 8, 10}, {7, 12, 5}}\n * > addKElement(vector<vector<int>>{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 8)\n * {{9, 10, 11}, {12, 13, 14}, {15, 16, 17}}\n * > addKElement(vector<vector<int>>{{11, 12, 13}, {14, 15, 16}, {17, 18, 19}}, 9)\n * {{20, 21, 22}, {23, 24, 25}, {26, 27, 28}}\n */\nvector<vector<int>> addKElement(vector<vector<int>> testList, int k) {\n    vector<vector<int>> result;\n    for(auto &i: testList){\n        vector<int> temp;\n        for(auto &j: i){\n            temp.push_back(j+k);\n        }\n        result.push_back(temp);\n    }\n    return result;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.\n * > minFlipToMakeStringAlternate(string(\"0001010111\"))\n * 2\n * > minFlipToMakeStringAlternate(string(\"001\"))\n * 1\n * > minFlipToMakeStringAlternate(string(\"010111011\"))\n * 2\n */\nint minFlipToMakeStringAlternate(string str) {\n    int count = 0;\n    for(int i = 0; i < str.length(); i++){\n        if(str[i] == '1'){\n            count++;\n        }\n    }\n    return count % 2;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the number of digits of a given number.\n * > countDigit(12345)\n * 5\n * > countDigit(11223305)\n * 8\n * > countDigit(4123459)\n * 7\n */\nint countDigit(int n) {\n    return to_string(n).length();\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the largest product of the pair of adjacent elements from a given list of integers.\n * > adjacentNumProduct(vector<int>{1, 2, 3, 4, 5, 6})\n * 30\n * > adjacentNumProduct(vector<int>{1, 2, 3, 4, 5})\n * 20\n * > adjacentNumProduct(vector<int>{2, 3})\n * 6\n */\nint adjacentNumProduct(vector<int> listNums) {\n    int n = listNums.size();\n    int max = INT_MIN;\n    for(int i=0;i<n-1;i++){\n        max = max < listNums[i]*listNums[i+1] ? listNums[i]*listNums[i+1] : max;\n    }\n    return max;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to repeat the given tuple n times.\n * > repeatTuples(vector<int>{1, 3}, 4)\n * {{1, 3}, {1, 3}, {1, 3}, {1, 3}}\n * > repeatTuples(vector<int>{1, 2}, 3)\n * {{1, 2}, {1, 2}, {1, 2}}\n * > repeatTuples(vector<int>{3, 4}, 5)\n * {{3, 4}, {3, 4}, {3, 4}, {3, 4}, {3, 4}}\n */\nvector<vector<int>> repeatTuples(vector<int> testTup, int n) {\n    vector<vector<int>> ans;\n    for(int i=0;i<n;i++)\n        ans.push_back(testTup);\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the lateral surface area of cuboid\n * > lateralsurfaceCuboid(8, 5, 6)\n * 156\n * > lateralsurfaceCuboid(7, 9, 10)\n * 320\n * > lateralsurfaceCuboid(10, 20, 30)\n * 1800\n */\nint lateralsurfaceCuboid(int l, int w, int h) {\n    return 2*(l*w + w*h + l*h);\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort a tuple by its float element.\n * > floatSort(vector<vector<string>>{{string(\"item1\"), string(\"12.20\")}, {string(\"item2\"), string(\"15.10\")}, {string(\"item3\"), string(\"24.5\")}})\n * {{string(\"item3\"), string(\"24.5\")}, {string(\"item2\"), string(\"15.10\")}, {string(\"item1\"), string(\"12.20\")}}\n * > floatSort(vector<vector<string>>{{string(\"item1\"), string(\"15\")}, {string(\"item2\"), string(\"10\")}, {string(\"item3\"), string(\"20\")}})\n * {{string(\"item3\"), string(\"20\")}, {string(\"item1\"), string(\"15\")}, {string(\"item2\"), string(\"10\")}}\n * > floatSort(vector<vector<string>>{{string(\"item1\"), string(\"5\")}, {string(\"item2\"), string(\"10\")}, {string(\"item3\"), string(\"14\")}})\n * {{string(\"item3\"), string(\"14\")}, {string(\"item2\"), string(\"10\")}, {string(\"item1\"), string(\"5\")}}\n */\nvector<vector<string>> floatSort(vector<vector<string>> price) {\n    sort(price.begin(), price.end(), [](vector<string> a, vector<string> b) {\n        return stof(a[1]) < stof(b[1]);\n    });\n    return price;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the smallest missing element in a sorted array.\n * > smallestMissing(vector<int>{0, 1, 2, 3, 4, 5, 6}, 0, 6)\n * 7\n * > smallestMissing(vector<int>{0, 1, 2, 6, 9, 11, 15}, 0, 6)\n * 3\n * > smallestMissing(vector<int>{1, 2, 3, 4, 6, 9, 11, 15}, 0, 7)\n * 0\n */\nint smallestMissing(vector<int> a, int leftElement, int rightElement) {\n    int n = a.size();\n    int i = leftElement;\n    while(i <= rightElement){\n        if(a[i] != i){\n            return i;\n        }\n        i++;\n    }\n    return i;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort a given list of elements in ascending order using heap queue algorithm.\n * > heapAssending(vector<int>{18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1})\n * {1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18}\n * > heapAssending(vector<int>{25, 35, 22, 85, 14, 65, 75, 25, 58})\n * {14, 22, 25, 25, 35, 58, 65, 75, 85}\n * > heapAssending(vector<int>{1, 3, 5, 7, 9, 2, 4, 6, 8, 0})\n * {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}\n */\nvector<int> heapAssending(vector<int> nums) {\n    priority_queue<int> pq;\n    for(int i=0;i<nums.size();i++){\n        pq.push(nums[i]);\n    }\n    vector<int> ans;\n    while(!pq.empty()){\n        ans.push_back(pq.top());\n        pq.pop();\n    }\n    return ans;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the volume of a cuboid.\n * > volumeCuboid(1, 2, 3)\n * 6\n * > volumeCuboid(5, 7, 9)\n * 315\n * > volumeCuboid(10, 15, 21)\n * 3150\n */\nint volumeCuboid(int l, int w, int h) {\n  return l*w*h;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to print all permutations of a given string including duplicates.\n * > permuteString(string(\"ab\"))\n * {string(\"ab\"), string(\"ba\")}\n * > permuteString(string(\"abc\"))\n * {string(\"abc\"), string(\"bac\"), string(\"bca\"), string(\"acb\"), string(\"cab\"), string(\"cba\")}\n * > permuteString(string(\"abcd\"))\n * {string(\"abcd\"), string(\"bacd\"), string(\"bcad\"), string(\"bcda\"), string(\"acbd\"), string(\"cabd\"), string(\"cbad\"), string(\"cbda\"), string(\"acdb\"), string(\"cadb\"), string(\"cdab\"), string(\"cdba\"), string(\"abdc\"), string(\"badc\"), string(\"bdac\"), string(\"bdca\"), string(\"adbc\"), string(\"dabc\"), string(\"dbac\"), string(\"dbca\"), string(\"adcb\"), string(\"dacb\"), string(\"dcab\"), string(\"dcba\")}\n */\nvector<string> permuteString(string str) {\n    vector<string> ans;\n    if(str.size() == 0) return ans;\n    sort(str.begin(), str.end());\n    do{\n        ans.push_back(str);\n    }while(next_permutation(str.begin(), str.end()));\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to round the given number to the nearest multiple of a specific number.\n * > roundNum(4722, 10)\n * 4720\n * > roundNum(1111, 5)\n * 1110\n * > roundNum(219, 2)\n * 218\n */\nint roundNum(int n, int m) {\n    return n - n % m;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to remove all occurrences of a character in a given string.\n * > removeChar(string(\"aba\"), string(\"a\"))\n * string(\"b\")\n * > removeChar(string(\"toggle\"), string(\"g\"))\n * string(\"tole\")\n * > removeChar(string(\"aabbc\"), string(\"b\"))\n * string(\"aac\")\n */\nstring removeChar(string s, string c) {\n    for(int i=0;i<s.length();i++){\n        if(s[i]==c[0]){\n            s.erase(i,1);\n            i--;\n        }\n    }\n    return s;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to shift last element to first position in the given list.\n * > moveFirst(vector<int>{1, 2, 3, 4})\n * {4, 1, 2, 3}\n * > moveFirst(vector<int>{0, 1, 2, 3})\n * {3, 0, 1, 2}\n * > moveFirst(vector<int>{9, 8, 7, 1})\n * {1, 9, 8, 7}\n */\nvector<int> moveFirst(vector<int> testList) {\n    int n = testList.size();\n    int last = testList[n-1];\n    testList.erase(testList.begin() + n-1);\n    testList.insert(testList.begin(), last);\n    return testList;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the surface area of a cuboid.\n * > surfaceareaCuboid(1, 2, 3)\n * 22\n * > surfaceareaCuboid(5, 7, 9)\n * 286\n * > surfaceareaCuboid(10, 15, 21)\n * 1350\n */\nint surfaceareaCuboid(int l, int w, int h) {\n  return 2*(l*w+w*h+l*h)+2*l*w;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to generate a two-dimensional array.\n * > multiList(3, 4)\n * {{0, 0, 0, 0}, {0, 1, 2, 3}, {0, 2, 4, 6}}\n * > multiList(5, 7)\n * {{0, 0, 0, 0, 0, 0, 0}, {0, 1, 2, 3, 4, 5, 6}, {0, 2, 4, 6, 8, 10, 12}, {0, 3, 6, 9, 12, 15, 18}, {0, 4, 8, 12, 16, 20, 24}}\n * > multiList(10, 15)\n * {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28}, {0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42}, {0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56}, {0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70}, {0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84}, {0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98}, {0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112}, {0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126}}\n */\nvector<vector<int>> multiList(int rownum, int colnum) {\n    vector<vector<int>> arr(rownum, vector<int>(colnum));\n    for(int i=0; i<rownum; i++){\n        for(int j=0; j<colnum; j++){\n            arr[i][j] = i*j;\n        }\n    }\n    return arr;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the number of rotations in a circularly sorted array.\n * > findRotationCount(vector<int>{8, 9, 10, 1, 2, 3, 4, 5, 6, 7})\n * 3\n * > findRotationCount(vector<int>{8, 9, 10, 2, 5, 6})\n * 3\n * > findRotationCount(vector<int>{2, 5, 6, 8, 9, 10})\n * 0\n */\nint findRotationCount(vector<int> a) {\n    int n = a.size();\n    int count = 0;\n    for(int i=1; i<n; i++){\n        if(a[i] < a[i-1]){\n            count++;\n        }\n    }\n    return count;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to toggle all odd bits of a given number.\n * > evenBitToggleNumber(10)\n * 15\n * > evenBitToggleNumber(20)\n * 1\n * > evenBitToggleNumber(30)\n * 11\n */\nint evenBitToggleNumber(int n) {\n    return n ^ (n & 0xAAAAAAAA);\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the frequency of the smallest value in a given array.\n * > frequencyOfSmallest(5, vector<int>{1, 2, 3, 4, 3})\n * 1\n * > frequencyOfSmallest(7, vector<int>{3, 1, 2, 5, 6, 2, 3})\n * 1\n * > frequencyOfSmallest(7, vector<int>{3, 3, 6, 3, 7, 4, 9})\n * 3\n */\nint frequencyOfSmallest(int n, vector<int> arr) {\n    int ans = 0;\n    int min = INT_MAX;\n    for(int i = 0; i < n; i++){\n        if(arr[i] < min){\n            min = arr[i];\n            ans = 1;\n        }\n        else if(arr[i] == min){\n            ans++;\n        }\n    }\n    return ans;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the n'th perrin number using recursion.\n * > getPerrin(9)\n * 12\n * > getPerrin(4)\n * 2\n * > getPerrin(6)\n * 5\n */\nint getPerrin(int n) {\n    if(n==1)\n        return 1;\n    else\n        return getPerrin(n-1)+getPerrin(n-2);\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find out the minimum no of swaps required for bracket balancing in the given string.\n * > swapCount(string(\"[]][][\"))\n * 2\n * > swapCount(string(\"[[][]]\"))\n * 0\n * > swapCount(string(\"[[][]]][\"))\n * 1\n */\nint swapCount(string s) {\n    int count = 0;\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] == '['){\n            count++;\n        }\n        else if(s[i] == ']'){\n            count--;\n        }\n    }\n    return count;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the hexadecimal number is even or odd.\n * > evenOrOdd(string(\"AB3454D\"))\n * string(\"Odd\")\n * > evenOrOdd(string(\"ABC\"))\n * string(\"Even\")\n * > evenOrOdd(string(\"AAD\"))\n * string(\"Odd\")\n */\nstring evenOrOdd(string n) {\n    int sum = 0;\n    for(int i = 0; i < n.length(); i++){\n        if(n[i] >= '0' && n[i] <= '9'){\n            sum += (n[i] - '0');\n        }\n        else{\n            sum += (n[i] - 'A' + 10);\n        }\n    }\n    return (sum % 2 == 0) ? \"Even\" : \"Odd\";\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the highest power of 2 that is less than or equal to n.\n * > highestPowerOf2(10)\n * 8\n * > highestPowerOf2(19)\n * 16\n * > highestPowerOf2(32)\n * 32\n */\nint highestPowerOf2(int n) {\n    return (1<<(31-__builtin_clz(n)));\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the n'th lucas number.\n * > findLucas(9)\n * 76\n * > findLucas(4)\n * 7\n * > findLucas(3)\n * 4\n */\nint findLucas(int n) {\n    if(n==1) return 2;\n    if(n==2) return 1;\n    return findLucas(n-1)+findLucas(n-2);\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert more than one list to nested dictionary.\n * > convertListDictionary(vector<string>{string(\"S001\"), string(\"S002\"), string(\"S003\"), string(\"S004\")}, vector<string>{string(\"Adina Park\"), string(\"Leyton Marsh\"), string(\"Duncan Boyle\"), string(\"Saim Richards\")}, vector<int>{85, 98, 89, 92})\n * {{{string(\"S001\"), {{string(\"Adina Park\"), 85}}}}, {{string(\"S002\"), {{string(\"Leyton Marsh\"), 98}}}}, {{string(\"S003\"), {{string(\"Duncan Boyle\"), 89}}}}, {{string(\"S004\"), {{string(\"Saim Richards\"), 92}}}}}\n * > convertListDictionary(vector<string>{string(\"abc\"), string(\"def\"), string(\"ghi\"), string(\"jkl\")}, vector<string>{string(\"python\"), string(\"program\"), string(\"language\"), string(\"programs\")}, vector<int>{100, 200, 300, 400})\n * {{{string(\"abc\"), {{string(\"python\"), 100}}}}, {{string(\"def\"), {{string(\"program\"), 200}}}}, {{string(\"ghi\"), {{string(\"language\"), 300}}}}, {{string(\"jkl\"), {{string(\"programs\"), 400}}}}}\n * > convertListDictionary(vector<string>{string(\"A1\"), string(\"A2\"), string(\"A3\"), string(\"A4\")}, vector<string>{string(\"java\"), string(\"C\"), string(\"C++\"), string(\"DBMS\")}, vector<int>{10, 20, 30, 40})\n * {{{string(\"A1\"), {{string(\"java\"), 10}}}}, {{string(\"A2\"), {{string(\"C\"), 20}}}}, {{string(\"A3\"), {{string(\"C++\"), 30}}}}, {{string(\"A4\"), {{string(\"DBMS\"), 40}}}}}\n */\nvector<unordered_map<string, unordered_map<string, int>>> convertListDictionary(vector<string> l1, vector<string> l2, vector<int> l3) {\n    vector<unordered_map<string, unordered_map<string, int>>> v;\n    for(int i=0;i<l1.size();i++){\n        unordered_map<string, unordered_map<string, int>> m;\n        unordered_map<string, int> m1;\n        m1[l2[i]] = l3[i];\n        m[l1[i]] = m1;\n        v.push_back(m);\n    }\n    return v;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n * > getMaxSum(60)\n * 106\n * > getMaxSum(10)\n * 12\n * > getMaxSum(2)\n * 2\n */\nint getMaxSum(int n) {\n    vector<int> dp(n+1, 0);\n    dp[1] = 1;\n    for(int i = 2; i <= n; i++){\n        dp[i] = max(dp[i/2] + dp[i/3] + dp[i/4] + dp[i/5], i);\n    }\n    return dp[n];\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if given tuple is distinct or not.\n * > checkDistinct(vector<int>{1, 4, 5, 6, 1, 4})\n * false\n * > checkDistinct(vector<int>{1, 4, 5, 6})\n * true\n * > checkDistinct(vector<int>{2, 3, 4, 5, 6})\n * true\n */\nbool checkDistinct(vector<int> testTup) {\n    return (testTup.size() == (int)unique(testTup.begin(), testTup.end()).size());\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether the given string starts and ends with the same character or not using regex.\n * > checkChar(string(\"abba\"))\n * string(\"Valid\")\n * > checkChar(string(\"a\"))\n * string(\"Valid\")\n * > checkChar(string(\"abcd\"))\n * string(\"Invalid\")\n */\nstring checkChar(string str) {\n    return regex_match(str, regex(\"^([a-zA-Z])$\")) ? \"Valid\" : \"Invalid\";\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the median of three specific numbers.\n * > medianNumbers(25, 55, 65)\n * 55.0\n * > medianNumbers(20, 10, 30)\n * 20.0\n * > medianNumbers(15, 45, 75)\n * 45.0\n */\ndouble medianNumbers(int a, int b, int c) {\n    return (a+b+c)/3.0;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to compute the sum of digits of each number of a given list.\n * > sumOfDigits(vector<int>{10, 2, 56})\n * 14\n * > sumOfDigits(vector<int>{10, 20, -4, 5, -70})\n * 19\n */\nint sumOfDigits(vector<int> nums) {\n    int sum = 0;\n    for(int i = 0; i < nums.size(); i++){\n        int temp = nums[i];\n        while(temp > 0){\n            sum += temp % 10;\n            temp /= 10;\n        }\n    }\n    return sum;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to perform the mathematical bitwise xor operation across the given tuples.\n * > bitwiseXor(vector<int>{10, 4, 6, 9}, vector<int>{5, 2, 3, 3})\n * {15, 6, 5, 10}\n * > bitwiseXor(vector<int>{11, 5, 7, 10}, vector<int>{6, 3, 4, 4})\n * {13, 6, 3, 14}\n * > bitwiseXor(vector<int>{12, 6, 8, 11}, vector<int>{7, 4, 5, 6})\n * {11, 2, 13, 13}\n */\nvector<int> bitwiseXor(vector<int> testTup1, vector<int> testTup2) {\n    vector<int> result;\n    for(int i=0; i<testTup1.size(); i++){\n        result.push_back(testTup1[i]^testTup2[i]);\n    }\n    return result;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract the frequency of unique tuples in the given list order irrespective.\n * > extractFreq(vector<vector<int>>{{3, 4}, {1, 2}, {4, 3}, {5, 6}})\n * 3\n * > extractFreq(vector<vector<int>>{{4, 15}, {2, 3}, {5, 4}, {6, 7}})\n * 4\n * > extractFreq(vector<vector<int>>{{5, 16}, {2, 3}, {6, 5}, {6, 9}})\n * 4\n */\nint extractFreq(vector<vector<int>> testList) {\n    unordered_map<vector<int>, int> freq;\n    for(auto &v: testList) {\n        sort(v.begin(), v.end());\n        freq[v]++;\n    }\n    return freq.size();\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n * > addNestedTuples(vector<vector<int>>{{1, 3}, {4, 5}, {2, 9}, {1, 10}}, vector<vector<int>>{{6, 7}, {3, 9}, {1, 1}, {7, 3}})\n * {{7, 10}, {7, 14}, {3, 10}, {8, 13}}\n * > addNestedTuples(vector<vector<int>>{{2, 4}, {5, 6}, {3, 10}, {2, 11}}, vector<vector<int>>{{7, 8}, {4, 10}, {2, 2}, {8, 4}})\n * {{9, 12}, {9, 16}, {5, 12}, {10, 15}}\n * > addNestedTuples(vector<vector<int>>{{3, 5}, {6, 7}, {4, 11}, {3, 12}}, vector<vector<int>>{{8, 9}, {5, 11}, {3, 3}, {9, 5}})\n * {{11, 14}, {11, 18}, {7, 14}, {12, 17}}\n */\nvector<vector<int>> addNestedTuples(vector<vector<int>> testTup1, vector<vector<int>> testTup2) {\n    vector<vector<int>> ans;\n    for(int i=0;i<testTup1.size();i++){\n        vector<int> temp;\n        for(int j=0;j<testTup1[i].size();j++){\n            temp.push_back(testTup1[i][j]+testTup2[i][j]);\n        }\n        ans.push_back(temp);\n    }\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to compute the value of ncr%p.\n * > ncrModp(10, 2, 13)\n * 6\n * > ncrModp(15, 12, 43)\n * 25\n * > ncrModp(17, 9, 18)\n * 10\n */\nint ncrModp(int n, int r, int p) {\n    long long ans = 1;\n    for(int i = 1; i <= r; i++){\n        ans = (ans * (n - i + 1)) % p;\n        ans = (ans * i) % p;\n    }\n    return ans;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if a url is valid or not using regex.\n * > isValidUrl(string(\"https://www.google.com\"))\n * true\n * > isValidUrl(string(\"https:/www.gmail.com\"))\n * false\n * > isValidUrl(string(\"https:// www.redit.com\"))\n * false\n */\nbool isValidUrl(string str) {\n    return regex_match(str, regex(\"^https?://\\\\w+\\\\.\\\\w+\\\\.\\\\w+\"));\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the minimum of two numbers.\n * > minimum(1, 2)\n * 1\n * > minimum(-5, -4)\n * -5\n * > minimum(0, 0)\n * 0\n */\nint minimum(int a, int b) {\n    return min(a, b);\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the parity of a given number.\n * > findParity(12)\n * string(\"Even Parity\")\n * > findParity(7)\n * string(\"Odd Parity\")\n * > findParity(10)\n * string(\"Even Parity\")\n */\nstring findParity(int x) {\n    return (x%2==0)?\"Even Parity\":\"Odd Parity\";\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.\n * > kSmallestPairs(vector<int>{1, 3, 7}, vector<int>{2, 4, 6}, 2)\n * {{1, 2}, {1, 4}}\n * > kSmallestPairs(vector<int>{1, 3, 7}, vector<int>{2, 4, 6}, 1)\n * {{1, 2}}\n * > kSmallestPairs(vector<int>{1, 3, 7}, vector<int>{2, 4, 6}, 7)\n * {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\n */\nvector<vector<int>> kSmallestPairs(vector<int> nums1, vector<int> nums2, int k) {\n    vector<vector<int>> ans;\n    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\n    for(int i = 0; i < nums1.size() && i < nums2.size(); i++){\n        pq.push({nums1[i] + nums2[i], i});\n    }\n    while(k--){\n        int i = pq.top().second;\n        int j = pq.top().first - nums1[i];\n        ans.push_back({nums1[i], nums2[i]});\n        pq.pop();\n        if(i + 1 < nums1.size() && j + nums2[i + 1] < nums2[i]){\n            pq.push({nums1[i + 1] + nums2[i + 1], i + 1});\n        }\n    }\n    return ans;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the minimum product from the pairs of tuples within a given list.\n * > minProductTuple(vector<vector<int>>{{2, 7}, {2, 6}, {1, 8}, {4, 9}})\n * 8\n * > minProductTuple(vector<vector<int>>{{10, 20}, {15, 2}, {5, 10}})\n * 30\n * > minProductTuple(vector<vector<int>>{{11, 44}, {10, 15}, {20, 5}, {12, 9}})\n * 100\n */\nint minProductTuple(vector<vector<int>> list1) {\n    int n = list1.size();\n    int ans = INT_MAX;\n    for(int i = 0; i < n; i++){\n        for(int j = i+1; j < n; j++){\n            ans = min(ans, list1[i][0]*list1[j][1]);\n            ans = min(ans, list1[i][1]*list1[j][0]);\n        }\n    }\n    return ans;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert the given snake case string to camel case string by using regex.\n * > snakeToCamel(string(\"android_tv\"))\n * string(\"AndroidTv\")\n * > snakeToCamel(string(\"google_pixel\"))\n * string(\"GooglePixel\")\n * > snakeToCamel(string(\"apple_watch\"))\n * string(\"AppleWatch\")\n */\nstring snakeToCamel(string word) {\n    return regex_replace(word, regex(\"_([a-z])\"), string(\"$1\"));\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to remove odd numbers from a given list.\n * > removeOdd(vector<int>{1, 2, 3})\n * {2}\n * > removeOdd(vector<int>{2, 4, 6})\n * {2, 4, 6}\n * > removeOdd(vector<int>{10, 20, 3})\n * {10, 20}\n */\nvector<int> removeOdd(vector<int> l) {\n    vector<int> ans;\n    for(int i=0;i<l.size();i++){\n        if(l[i]%2==0)\n            ans.push_back(l[i]);\n    }\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the value exists in a sequence or not.\n * > overlapping(vector<int>{1, 2, 3, 4, 5}, vector<int>{6, 7, 8, 9})\n * false\n * > overlapping(vector<int>{1, 2, 3}, vector<int>{4, 5, 6})\n * false\n * > overlapping(vector<int>{1, 4, 5}, vector<int>{1, 4, 5})\n * true\n */\nbool overlapping(vector<int> list1, vector<int> list2) {\n    for(int i=0;i<list1.size();i++){\n        for(int j=0;j<list2.size();j++){\n            if(list1[i]==list2[j]){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find a pair with highest product from a given array of integers.\n * > maxProduct(vector<int>{1, 2, 3, 4, 7, 0, 8, 4})\n * {7, 8}\n * > maxProduct(vector<int>{0, -1, -2, -4, 5, 0, -6})\n * {-4, -6}\n * > maxProduct(vector<int>{1, 2, 3})\n * {2, 3}\n */\nvector<int> maxProduct(vector<int> arr) {\n    int max1 = INT_MIN, max2 = INT_MIN, min1 = INT_MAX, min2 = INT_MAX;\n    for(int i = 0; i < arr.size(); i++){\n        if(arr[i] > max1){\n            max2 = max1;\n            max1 = arr[i];\n        }\n        else if(arr[i] > max2){\n            max2 = arr[i];\n        }\n        if(arr[i] < min1){\n            min2 = min1;\n            min1 = arr[i];\n        }\n        else if(arr[i] < min2){\n            min2 = arr[i];\n        }\n    }\n    return {max1 * max2, min1 * min2};\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\n * > breaksum(12)\n * 13\n * > breaksum(24)\n * 27\n * > breaksum(23)\n * 23\n */\nint breaksum(int n) {\n    if(n==0)\n        return 0;\n    if(n==1)\n        return 1;\n    if(n==2)\n        return 2;\n    return max(n,breaksum(n-1)+breaksum(n-2)+breaksum(n-3));\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find common first element in given list of tuple.\n * > groupTuples(vector<vector<string>>{{string(\"x\"), string(\"y\")}, {string(\"x\"), string(\"z\")}, {string(\"w\"), string(\"t\")}})\n * {{string(\"x\"), string(\"y\"), string(\"z\")}, {string(\"w\"), string(\"t\")}}\n * > groupTuples(vector<vector<string>>{{string(\"a\"), string(\"b\")}, {string(\"a\"), string(\"c\")}, {string(\"d\"), string(\"e\")}})\n * {{string(\"a\"), string(\"b\"), string(\"c\")}, {string(\"d\"), string(\"e\")}}\n * > groupTuples(vector<vector<string>>{{string(\"f\"), string(\"g\")}, {string(\"f\"), string(\"g\")}, {string(\"h\"), string(\"i\")}})\n * {{string(\"f\"), string(\"g\"), string(\"g\")}, {string(\"h\"), string(\"i\")}}\n */\nvector<vector<string>> groupTuples(vector<vector<string>> input) {\n    vector<vector<string>> output;\n    for(auto i:input){\n        bool flag=true;\n        for(auto j:output){\n            if(i[0]==j[0]){\n                j.push_back(i[1]);\n                flag=false;\n                break;\n            }\n        }\n        if(flag){\n            vector<string> temp;\n            temp.push_back(i[0]);\n            temp.push_back(i[1]);\n            output.push_back(temp);\n        }\n    }\n    return output;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n * > roundAndSum(vector<double>{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5})\n * 243\n * > roundAndSum(vector<double>{25.0, 56.7, 89.2})\n * 513\n */\nint roundAndSum(vector<double> list1) {\n    int sum = 0;\n    for(int i = 0; i < list1.size(); i++){\n        sum += round(list1[i]);\n    }\n    return sum * list1.size();\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the cube sum of first n even natural numbers.\n * > cubeSum(2)\n * 72\n * > cubeSum(3)\n * 288\n * > cubeSum(4)\n * 800\n */\nint cubeSum(int n) {\n    int sum = 0;\n    for(int i = 0; i < n; i++){\n        sum += pow(2*i+1, 3);\n    }\n    return sum;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to solve gold mine problem.\n * > getMaxgold(vector<vector<int>>{{1, 3, 1, 5}, {2, 2, 4, 1}, {5, 0, 2, 3}, {0, 6, 1, 2}}, 4, 4)\n * 16\n * > getMaxgold(vector<vector<int>>{{10, 20}, {30, 40}}, 2, 2)\n * 70\n * > getMaxgold(vector<vector<int>>{{4, 9}, {3, 7}}, 2, 2)\n * 13\n */\nint getMaxgold(vector<vector<int>> gold, int m, int n) {\n    int dp[m][n];\n    for(int i=0;i<m;i++){\n        for(int j=0;j<n;j++){\n            if(i==0 && j==0){\n                dp[i][j]=gold[i][j];\n            }\n            else if(i==0){\n                dp[i][j]=max(dp[i][j-1],gold[i][j]);\n            }\n            else if(j==0){\n                dp[i][j]=max(dp[i-1][j],gold[i][j]);\n            }\n            else{\n                dp[i][j]=max(dp[i-1][j],dp[i][j-1])+gold[i][j];\n            }\n        }\n    }\n    return dp[m-1][n-1];\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract only the rear index element of each string in the given tuple.\n * > extractRear(vector<string>{string(\"Mers\"), string(\"for\"), string(\"Vers\")})\n * {string(\"s\"), string(\"r\"), string(\"s\")}\n * > extractRear(vector<string>{string(\"Avenge\"), string(\"for\"), string(\"People\")})\n * {string(\"e\"), string(\"r\"), string(\"e\")}\n * > extractRear(vector<string>{string(\"Gotta\"), string(\"get\"), string(\"go\")})\n * {string(\"a\"), string(\"t\"), string(\"o\")}\n */\nvector<string> extractRear(vector<string> testTuple) {\n    vector<string> ans;\n    for(int i=0;i<testTuple.size();i++){\n        ans.push_back(testTuple[i][testTuple[i].size()-1]);\n    }\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to filter odd numbers using lambda function.\n * > filterOddnumbers(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n * {1, 3, 5, 7, 9}\n * > filterOddnumbers(vector<int>{10, 20, 45, 67, 84, 93})\n * {45, 67, 93}\n * > filterOddnumbers(vector<int>{5, 7, 9, 8, 6, 4, 3})\n * {5, 7, 9, 3}\n */\nvector<int> filterOddnumbers(vector<int> nums) {\n    return vector<int>(remove_if(nums.begin(), nums.end(), [](int x){return x%2==0;}), nums.end());\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\n * > changeDateFormat(string(\"2026-01-02\"))\n * string(\"02-01-2026\")\n * > changeDateFormat(string(\"2020-11-13\"))\n * string(\"13-11-2020\")\n * > changeDateFormat(string(\"2021-04-26\"))\n * string(\"26-04-2021\")\n */\nstring changeDateFormat(string dt) {\n    regex r(\"(\\\\d{4})-(\\\\d{2})-(\\\\d{2})\");\n    smatch m;\n    if(regex_match(dt,m,r))\n        return m[3] + \"-\" + m[2] + \"-\" + m[1];\n    return \"Invalid Date\";\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort the given array by using shell sort.\n * > shellSort(vector<int>{12, 23, 4, 5, 3, 2, 12, 81, 56, 95})\n * {2, 3, 4, 5, 12, 12, 23, 56, 81, 95}\n * > shellSort(vector<int>{24, 22, 39, 34, 87, 73, 68})\n * {22, 24, 34, 39, 68, 73, 87}\n * > shellSort(vector<int>{32, 30, 16, 96, 82, 83, 74})\n * {16, 30, 32, 74, 82, 83, 96}\n */\nvector<int> shellSort(vector<int> myList) {\n    int n = myList.size();\n    for(int gap = n/2; gap > 0; gap /= 2){\n        for(int i = gap; i < n; i++){\n            int temp = myList[i];\n            int j;\n            for(j = i; j >= gap && myList[j-gap] > temp; j -= gap)\n                myList[j] = myList[j-gap];\n            myList[j] = temp;\n        }\n    }\n    return myList;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract the elementwise and tuples from the given two tuples.\n * > andTuples(vector<int>{10, 4, 6, 9}, vector<int>{5, 2, 3, 3})\n * {0, 0, 2, 1}\n * > andTuples(vector<int>{1, 2, 3, 4}, vector<int>{5, 6, 7, 8})\n * {1, 2, 3, 0}\n * > andTuples(vector<int>{8, 9, 11, 12}, vector<int>{7, 13, 14, 17})\n * {0, 9, 10, 0}\n */\nvector<int> andTuples(vector<int> testTup1, vector<int> testTup2) {\n    vector<int> ans;\n    for(int i=0;i<testTup1.size();i++){\n        ans.push_back(testTup1[i]&testTup2[i]);\n    }\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the directrix of a parabola.\n * > parabolaDirectrix(5, 3, 2)\n * -198\n * > parabolaDirectrix(9, 8, 4)\n * -2336\n * > parabolaDirectrix(2, 4, 6)\n * -130\n */\nint parabolaDirectrix(int a, int b, int c) {\n    return -b/(2*a);\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether the entered number is greater than the elements of the given array.\n * > checkGreater(vector<int>{1, 2, 3, 4, 5}, 4)\n * string(\"No, entered number is less than those in the array\")\n * > checkGreater(vector<int>{2, 3, 4, 5, 6}, 8)\n * string(\"Yes, the entered number is greater than those in the array\")\n * > checkGreater(vector<int>{9, 7, 4, 8, 6, 1}, 11)\n * string(\"Yes, the entered number is greater than those in the array\")\n */\nstring checkGreater(vector<int> arr, int number) {\n    for(int i=0;i<arr.size();i++){\n        if(number>arr[i]){\n            return \"Yes, the entered number is greater than those in the array\";\n        }\n    }\n    return \"No, entered number is less than those in the array\";\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function that matches a string that has an a followed by one or more b's.\n * > textMatchOne(string(\"ac\"))\n * string(\"Not matched!\")\n * > textMatchOne(string(\"dc\"))\n * string(\"Not matched!\")\n * > textMatchOne(string(\"abba\"))\n * string(\"Found a match!\")\n */\nstring textMatchOne(string text) {\n    return text.find(\"a\") != string::npos && text.find(\"a\") + 1 < text.size() && text.find(\"a\") + 1 < text.size() && text.find(\"a\") + 1 < text.size() && text.find(\"a\") + 1 < text.size() && text.find(\"a\") + 1 < text.size() && text.find(\"a\") + 1 < text.size() && text.find(\"a\") + 1 < text.size() && text.find(\"a\") + 1 < text.size() && text.find(\"a\") + 1 < text.size() && text.find(\"a\") + 1 < text.size() && text.find(\"a\") + 1 < text.size() && text.find(\"a\") + 1 < text.size() && text.find(\"a\") + 1 < text.size() && text.find(\"a\") + 1 < text.size() && text.find(\"a\") + 1 < text.size() && text.find(\"a\") + 1 < text.size() && text.find(\"a\") + 1 < text.size() && text.find(\"a\") + 1 < text.size() && text.find(\"a\") + 1 < text.size() && text"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the last digit of a given number.\n * > lastDigit(123)\n * 3\n * > lastDigit(25)\n * 5\n * > lastDigit(30)\n * 0\n */\nint lastDigit(int n) {\n    return n%10;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to print negative numbers in a list.\n * > negNos(vector<int>{-1, 4, 5, -6})\n * {-1, -6}\n * > negNos(vector<int>{-1, -2, 3, 4})\n * {-1, -2}\n * > negNos(vector<int>{-7, -6, 8, 9})\n * {-7, -6}\n */\nvector<int> negNos(vector<int> list1) {\n    vector<int> ans;\n    for(int i=0;i<list1.size();i++){\n        if(list1[i]<0){\n            ans.push_back(list1[i]);\n        }\n    }\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove odd characters in a string.\n * > removeOdd(string(\"python\"))\n * string(\"yhn\")\n * > removeOdd(string(\"program\"))\n * string(\"rga\")\n * > removeOdd(string(\"language\"))\n * string(\"agae\")\n */\nstring removeOdd(string str1) {\n    string str=\"\";\n    for(int i=0;i<str1.length();i++)\n    {\n        if(str1[i]%2==0)\n        {\n            str+=str1[i];\n        }\n    }\n    return str;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count bidirectional tuple pairs.\n * > countBidirectional(vector<vector<int>>{{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}})\n * string(\"3\")\n * > countBidirectional(vector<vector<int>>{{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}})\n * string(\"2\")\n * > countBidirectional(vector<vector<int>>{{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}})\n * string(\"4\")\n */\nstring countBidirectional(vector<vector<int>> testList) {\n    int count = 0;\n    for(int i = 0; i < testList.size(); i++){\n        for(int j = i+1; j < testList.size(); j++){\n            if(testList[i][0] == testList[j][1] && testList[i][1] == testList[j][0]){\n                count++;\n            }\n        }\n    }\n    return to_string(count);\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert a list of multiple integers into a single integer.\n * > multipleToSingle(vector<int>{11, 33, 50})\n * 113350\n * > multipleToSingle(vector<int>{-1, 2, 3, 4, 5, 6})\n * -123456\n * > multipleToSingle(vector<int>{10, 15, 20, 25})\n * 10152025\n */\nint multipleToSingle(vector<int> l) {\n    int ans = 0;\n    for(int i = 0; i < l.size(); i++){\n        ans += l[i] * pow(10, i);\n    }\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the surface area of a cube.\n * > surfaceareaCube(5)\n * 150\n * > surfaceareaCube(3)\n * 54\n * > surfaceareaCube(10)\n * 600\n */\nint surfaceareaCube(int l) {\n  return 6*l*l;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the ration of positive numbers in an array of integers.\n * > positiveCount(vector<int>{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8})\n * 0.54\n * > positiveCount(vector<int>{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8})\n * 0.69\n * > positiveCount(vector<int>{2, 4, -6, -9, 11, -12, 14, -5, 17})\n * 0.56\n */\ndouble positiveCount(vector<int> nums) {\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++){\n        if(nums[i] > 0)\n            count++;\n    }\n    return (double)count/nums.size();\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the largest negative number from the given list.\n * > largestNeg(vector<int>{1, 2, 3, -4, -6})\n * -6\n * > largestNeg(vector<int>{1, 2, 3, -8, -9})\n * -9\n * > largestNeg(vector<int>{1, 2, 3, 4, -1})\n * -1\n */\nint largestNeg(vector<int> list1) {\n    int n = list1.size();\n    int ans = list1[0];\n    for(int i=0;i<n;i++){\n        if(list1[i]<0 && list1[i]>ans)\n            ans = list1[i];\n    }\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to trim each tuple by k in the given tuple list.\n * > trimTuple(vector<vector<int>>{{5, 3, 2, 1, 4}, {3, 4, 9, 2, 1}, {9, 1, 2, 3, 5}, {4, 8, 2, 1, 7}}, 2)\n * string(\"[(2,), (9,), (2,), (2,)]\")\n * > trimTuple(vector<vector<int>>{{5, 3, 2, 1, 4}, {3, 4, 9, 2, 1}, {9, 1, 2, 3, 5}, {4, 8, 2, 1, 7}}, 1)\n * string(\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")\n * > trimTuple(vector<vector<int>>{{7, 8, 4, 9}, {11, 8, 12, 4}, {4, 1, 7, 8}, {3, 6, 9, 7}}, 1)\n * string(\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")\n */\nstring trimTuple(vector<vector<int>> testList, int k) {\n    string result = \"[\";\n    for (int i = 0; i < testList.size(); i++) {\n        result += \"(\";\n        for (int j = 0; j < testList[i].size(); j++) {\n            if (j != testList[i].size() - 1) {\n                result += to_string(testList[i][j]) + \", \";\n            } else {\n                result += to_string(testList[i][j]);\n            }\n        }\n        result += \")\";\n        if (i != testList.size() - 1) {\n            result += \", \";\n        }\n    }\n    result += \"]\";\n    return result;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n * > indexMultiplication(vector<vector<int>>{{1, 3}, {4, 5}, {2, 9}, {1, 10}}, vector<vector<int>>{{6, 7}, {3, 9}, {1, 1}, {7, 3}})\n * {{6, 21}, {12, 45}, {2, 9}, {7, 30}}\n * > indexMultiplication(vector<vector<int>>{{2, 4}, {5, 6}, {3, 10}, {2, 11}}, vector<vector<int>>{{7, 8}, {4, 10}, {2, 2}, {8, 4}})\n * {{14, 32}, {20, 60}, {6, 20}, {16, 44}}\n * > indexMultiplication(vector<vector<int>>{{3, 5}, {6, 7}, {4, 11}, {3, 12}}, vector<vector<int>>{{8, 9}, {5, 11}, {3, 3}, {9, 5}})\n * {{24, 45}, {30, 77}, {12, 33}, {27, 60}}\n */\nvector<vector<int>> indexMultiplication(vector<vector<int>> testTup1, vector<vector<int>> testTup2) {\n    vector<vector<int>> ans;\n    for(int i=0;i<testTup1.size();i++){\n        vector<int> temp;\n        for(int j=0;j<testTup1[i].size();j++){\n            temp.push_back(testTup1[i][j]*testTup2[i][j]);\n        }\n        ans.push_back(temp);\n    }\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find cubes of individual elements in a list using lambda function.\n * > cubeNums(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n * {1, 8, 27, 64, 125, 216, 343, 512, 729, 1000}\n * > cubeNums(vector<int>{10, 20, 30})\n * {1000, 8000, 27000}\n * > cubeNums(vector<int>{12, 15})\n * {1728, 3375}\n */\nvector<int> cubeNums(vector<int> nums) {\n    vector<int> ans;\n    for(int i: nums) ans.push_back(i*i*i);\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the sum of perrin numbers.\n * > calSum(9)\n * 49\n * > calSum(10)\n * 66\n * > calSum(11)\n * 88\n */\nint calSum(int n) {\n    int sum = 0;\n    for(int i = 1; i <= n; i++){\n        sum += (i * (i + 1) / 2);\n    }\n    return sum;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the triangle is valid or not if 3 points are given.\n * > checkTriangle(1, 5, 2, 5, 4, 6)\n * string(\"Yes\")\n * > checkTriangle(1, 1, 1, 4, 1, 5)\n * string(\"No\")\n * > checkTriangle(1, 1, 1, 1, 1, 1)\n * string(\"No\")\n */\nstring checkTriangle(int x1, int y1, int x2, int y2, int x3, int y3) {\n    double a = sqrt((x1-x2)*(x1-x2) + (y1-y2)*(y1-y2));\n    double b = sqrt((x2-x3)*(x2-x3) + (y2-y3)*(y2-y3));\n    double c = sqrt((x1-x3)*(x1-x3) + (y1-y3)*(y1-y3));\n    if(a+b>c && a+c>b && b+c>a)\n        return \"Yes\";\n    else\n        return \"No\";\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract specified size of strings from a give list of string values.\n * > extractString(vector<string>{string(\"Python\"), string(\"list\"), string(\"exercises\"), string(\"practice\"), string(\"solution\")}, 8)\n * {string(\"practice\"), string(\"solution\")}\n * > extractString(vector<string>{string(\"Python\"), string(\"list\"), string(\"exercises\"), string(\"practice\"), string(\"solution\")}, 6)\n * {string(\"Python\")}\n * > extractString(vector<string>{string(\"Python\"), string(\"list\"), string(\"exercises\"), string(\"practice\"), string(\"solution\")}, 9)\n * {string(\"exercises\")}\n */\nvector<string> extractString(vector<string> str, int l) {\n    vector<string> ans;\n    for(int i=0;i<str.size();i++){\n        if(str[i].size()>=l){\n            ans.push_back(str[i].substr(str[i].size()-l,l));\n        }\n    }\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove all whitespaces from the given string using regex.\n * > removeWhitespaces(string(\" Google    Flutter \"))\n * string(\"GoogleFlutter\")\n * > removeWhitespaces(string(\" Google    Dart \"))\n * string(\"GoogleDart\")\n * > removeWhitespaces(string(\" iOS    Swift \"))\n * string(\"iOSSwift\")\n */\nstring removeWhitespaces(string text1) {\n    return regex_replace(text1, regex(\"\\\\s+\"), \"\");\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of even factors of a number.\n * > sumoffactors(18)\n * 26\n * > sumoffactors(30)\n * 48\n * > sumoffactors(6)\n * 8\n */\nint sumoffactors(int n) {\n    int sum = 0;\n    for(int i = 2; i <= n/2; i++){\n        if(n%i == 0)\n            sum += i;\n    }\n    return sum;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function that matches a word containing 'z'.\n * > textMatchWordz(string(\"pythonz.\"))\n * string(\"Found a match!\")\n * > textMatchWordz(string(\"xyz.\"))\n * string(\"Found a match!\")\n * > textMatchWordz(string(\"  lang  .\"))\n * string(\"Not matched!\")\n */\nstring textMatchWordz(string text) {\n  if (text.find(\"z\") != string::npos) {\n    return \"Found a match!\";\n  }\n  return \"Not matched!\";\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether the given month number contains 31 days or not.\n * > checkMonthnumbNumber(5)\n * true\n * > checkMonthnumbNumber(2)\n * false\n * > checkMonthnumbNumber(6)\n * false\n */\nbool checkMonthnumbNumber(int monthnum2) {\n  return monthnum2 == 1 || monthnum2 == 3 || monthnum2 == 5 || monthnum2 == 7 || monthnum2 == 8 || monthnum2 == 10 || monthnum2 == 12;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to reverse strings in a given list of string values.\n * > reverseStringList(vector<string>{string(\"Red\"), string(\"Green\"), string(\"Blue\"), string(\"White\"), string(\"Black\")})\n * {string(\"deR\"), string(\"neerG\"), string(\"eulB\"), string(\"etihW\"), string(\"kcalB\")}\n * > reverseStringList(vector<string>{string(\"john\"), string(\"amal\"), string(\"joel\"), string(\"george\")})\n * {string(\"nhoj\"), string(\"lama\"), string(\"leoj\"), string(\"egroeg\")}\n * > reverseStringList(vector<string>{string(\"jack\"), string(\"john\"), string(\"mary\")})\n * {string(\"kcaj\"), string(\"nhoj\"), string(\"yram\")}\n */\nvector<string> reverseStringList(vector<string> stringlist) {\n    vector<string> ans;\n    for(int i=0;i<stringlist.size();i++){\n        string s = stringlist[i];\n        reverse(s.begin(),s.end());\n        ans.push_back(s);\n    }\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the area of a rectangle.\n * > rectangleArea(10, 20)\n * 200\n * > rectangleArea(10, 5)\n * 50\n * > rectangleArea(4, 2)\n * 8\n */\nint rectangleArea(int l, int b) {\n  return l*b;\n}\n\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove uppercase substrings from a given string by using regex.\n * > removeUppercase(string(\"cAstyoUrFavoRitETVshoWs\"))\n * string(\"cstyoravoitshos\")\n * > removeUppercase(string(\"wAtchTheinTernEtrAdIo\"))\n * string(\"wtchheinerntrdo\")\n * > removeUppercase(string(\"VoicESeaRchAndreComMendaTionS\"))\n * string(\"oiceachndreomendaion\")\n */\nstring removeUppercase(string str1) {\n    return regex_replace(str1, regex(\"[A-Z]\"), \"\");\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to get the first element of each sublist.\n * > extract(vector<vector<int>>{{1, 2}, {3, 4, 5}, {6, 7, 8, 9}})\n * {1, 3, 6}\n * > extract(vector<vector<int>>{{1, 2, 3}, {4, 5}})\n * {1, 4}\n * > extract(vector<vector<int>>{{9, 8, 1}, {1, 2}})\n * {9, 1}\n */\nvector<int> extract(vector<vector<int>> lst) {\n    vector<int> ans;\n    for(auto i:lst){\n        ans.push_back(i[0]);\n    }\n    return ans;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the upper case characters in a given string.\n * > upperCtr(string(\"PYthon\"))\n * 1\n * > upperCtr(string(\"BigData\"))\n * 1\n * > upperCtr(string(\"program\"))\n * 0\n */\nint upperCtr(string str) {\n    int ctr = 0;\n    for(int i = 0; i < str.length(); i++){\n        if(isupper(str[i])){\n            ctr++;\n        }\n    }\n    return ctr;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum product subarray of the given array.\n * > maxSubarrayProduct(vector<int>{1, -2, -3, 0, 7, -8, -2})\n * 112\n * > maxSubarrayProduct(vector<int>{6, -3, -10, 0, 2})\n * 180\n * > maxSubarrayProduct(vector<int>{-2, -40, 0, -2, -3})\n * 80\n */\nint maxSubarrayProduct(vector<int> arr) {\n    int n = arr.size();\n    int max_so_far = arr[0];\n    int min_so_far = arr[0];\n    int max_ending_here = arr[0];\n    int min_ending_here = arr[0];\n    int ans = arr[0];\n    for(int i=1;i<n;i++){\n        max_ending_here = max(arr[i], max_ending_here * arr[i]);\n        min_ending_here = min(arr[i], min_ending_here * arr[i]);\n        max_so_far = max(max_so_far, max_ending_here);\n        min_so_far = min(min_so_far, min_ending_here);\n        ans = max(ans, max_so_far);\n    }\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if all values are same in a dictionary.\n * > checkValue(unordered_map<string, int>{{string(\"Cierra Vega\"), 12}, {string(\"Alden Cantrell\"), 12}, {string(\"Kierra Gentry\"), 12}, {string(\"Pierre Cox\"), 12}}, 10)\n * false\n * > checkValue(unordered_map<string, int>{{string(\"Cierra Vega\"), 12}, {string(\"Alden Cantrell\"), 12}, {string(\"Kierra Gentry\"), 12}, {string(\"Pierre Cox\"), 12}}, 12)\n * true\n * > checkValue(unordered_map<string, int>{{string(\"Cierra Vega\"), 12}, {string(\"Alden Cantrell\"), 12}, {string(\"Kierra Gentry\"), 12}, {string(\"Pierre Cox\"), 12}}, 5)\n * false\n */\nbool checkValue(unordered_map<string, int> dict, int n) {\n    for(auto i: dict)\n        if(i.second != n)\n            return false;\n    return true;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the peak element in the given array.\n * > findPeak(vector<int>{1, 3, 20, 4, 1, 0}, 6)\n * 2\n * > findPeak(vector<int>{2, 3, 4, 5, 6}, 5)\n * 4\n * > findPeak(vector<int>{8, 9, 11, 12, 14, 15}, 6)\n * 5\n */\nint findPeak(vector<int> arr, int n) {\n    int l = 0, r = n - 1;\n    while (l < r) {\n        int mid = l + (r - l) / 2;\n        if (arr[mid] > arr[mid + 1]) {\n            r = mid;\n        } else {\n            l = mid + 1;\n        }\n    }\n    return l;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to convert decimal number to octal number.\n * > decimalToOctal(10)\n * 12\n * > decimalToOctal(2)\n * 2\n * > decimalToOctal(33)\n * 41\n */\nint decimalToOctal(int decinum) {\n    int rem, res = 0;\n    while(decinum > 0){\n        rem = decinum % 8;\n        res = res * 10 + rem;\n        decinum = decinum / 8;\n    }\n    return res;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n * > maxProduct(vector<int>{3, 100, 4, 5, 150, 6}, 6)\n * 45000\n * > maxProduct(vector<int>{4, 42, 55, 68, 80}, 5)\n * 50265600\n * > maxProduct(vector<int>{10, 22, 9, 33, 21, 50, 41, 60}, 8)\n * 21780000\n */\nint maxProduct(vector<int> arr, int n) {\n    int max_product = INT_MIN;\n    int min_product = INT_MAX;\n    int product = 1;\n    for(int i = 0; i < n; i++){\n        product *= arr[i];\n        max_product = max(max_product, product);\n        product /= arr[i];\n        product *= arr[i];\n        min_product = min(min_product, product);\n    }\n    return max_product;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum profit earned from a maximum of k stock transactions\n * > maxProfit(vector<int>{1, 5, 2, 3, 7, 6, 4, 5}, 3)\n * 10\n * > maxProfit(vector<int>{2, 4, 7, 5, 4, 3, 5}, 2)\n * 7\n * > maxProfit(vector<int>{10, 6, 8, 4, 2}, 2)\n * 2\n */\nint maxProfit(vector<int> price, int k) {\n    int n = price.size();\n    if(n == 0 || k == 0) return 0;\n    if(k >= n/2) {\n        int profit = 0;\n        for(int i = 1; i < n; i++) {\n            if(price[i] > price[i-1]) {\n                profit += price[i] - price[i-1];\n            }\n        }\n        return profit;\n    }\n    vector<vector<int>> dp(k+1, vector<int>(n, 0));\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j <= k; j++) {\n            dp[j][i] = max(dp[j][i-1], price[i] - price[i-1] + dp[j-1][i-1]);\n        }\n    }\n    return dp[k][n-1];\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the pairwise addition of the elements of the given tuples.\n * > addPairwise(vector<int>{1, 5, 7, 8, 10})\n * {6, 12, 15, 18}\n * > addPairwise(vector<int>{2, 6, 8, 9, 11})\n * {8, 14, 17, 20}\n * > addPairwise(vector<int>{3, 7, 9, 10, 12})\n * {10, 16, 19, 22}\n */\nvector<int> addPairwise(vector<int> testTup) {\n    vector<int> ans;\n    for(int i=0;i<testTup.size()-1;i++){\n        ans.push_back(testTup[i]+testTup[i+1]);\n    }\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find remainder of array multiplication divided by n.\n * > findRemainder(vector<int>{100, 10, 5, 25, 35, 14}, 6, 11)\n * 9\n * > findRemainder(vector<int>{1, 1, 1}, 3, 1)\n * 0\n * > findRemainder(vector<int>{1, 2, 1}, 3, 2)\n * 0\n */\nint findRemainder(vector<int> arr, int lens, int n) {\n    int ans = 0;\n    for(int i = 0; i < lens; i++){\n        ans = (ans + arr[i]) % n;\n    }\n    return ans;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given list contains consecutive numbers or not.\n * > checkConsecutive(vector<int>{1, 2, 3, 4, 5})\n * true\n * > checkConsecutive(vector<int>{1, 2, 3, 5, 6})\n * false\n * > checkConsecutive(vector<int>{1, 2, 1})\n * false\n */\nbool checkConsecutive(vector<int> l) {\n    int n = l.size();\n    for(int i=0;i<n-1;i++){\n        if(l[i+1]-l[i]!=1) return false;\n    }\n    return true;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to replace characters in a string.\n * > replaceChar(string(\"polygon\"), string(\"y\"), string(\"l\"))\n * string(\"pollgon\")\n * > replaceChar(string(\"character\"), string(\"c\"), string(\"a\"))\n * string(\"aharaater\")\n * > replaceChar(string(\"python\"), string(\"l\"), string(\"a\"))\n * string(\"python\")\n */\nstring replaceChar(string str1, string ch, string newch) {\n    int n = str1.length();\n    for(int i=0; i<n; i++){\n        if(str1[i] == ch[0]){\n            str1[i] = newch[0];\n        }\n    }\n    return str1;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of the largest and smallest value in a given array.\n * > bigSum(vector<int>{1, 2, 3})\n * 4\n * > bigSum(vector<int>{-1, 2, 3, 4})\n * 3\n * > bigSum(vector<int>{2, 3, 6})\n * 8\n */\nint bigSum(vector<int> nums) {\n    int sum = 0;\n    int max = INT_MIN;\n    int min = INT_MAX;\n    \n    for(int i = 0; i < nums.size(); i++){\n        if(nums[i] > max){\n            max = nums[i];\n        }\n        if(nums[i] < min){\n            min = nums[i];\n        }\n    }\n    \n    sum = max + min;\n    \n    return sum;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to convert the given string to lower case.\n * > isLower(string(\"InValid\"))\n * string(\"invalid\")\n * > isLower(string(\"TruE\"))\n * string(\"true\")\n * > isLower(string(\"SenTenCE\"))\n * string(\"sentence\")\n */\nstring isLower(string str) {\n    for(int i=0;i<str.length();i++){\n        if(str[i]>='A' && str[i]<='Z'){\n            str[i]+=32;\n        }\n    }\n    return str;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove lowercase substrings from a given string.\n * > removeLowercase(string(\"PYTHon\"))\n * string(\"PYTH\")\n * > removeLowercase(string(\"FInD\"))\n * string(\"FID\")\n * > removeLowercase(string(\"STRinG\"))\n * string(\"STRG\")\n */\nstring removeLowercase(string str1) {\n    string str2;\n    for(int i=0;i<str1.length();i++){\n        if(str1[i]>='A' && str1[i]<='Z'){\n            str2+=str1[i];\n        }\n    }\n    return str2;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the first digit of a given number.\n * > firstDigit(123)\n * 1\n * > firstDigit(456)\n * 4\n * > firstDigit(12)\n * 1\n */\nint firstDigit(int n) {\n    return n/pow(10, floor(log10(n)));\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the maximum occurring character in a given string.\n * > getMaxOccuringChar(string(\"data\"))\n * string(\"a\")\n * > getMaxOccuringChar(string(\"create\"))\n * string(\"e\")\n * > getMaxOccuringChar(string(\"brilliant girl\"))\n * string(\"i\")\n */\nstring getMaxOccuringChar(string str1) {\n    map<char,int> mp;\n    for(int i=0;i<str1.length();i++){\n        mp[str1[i]]++;\n    }\n    int max=0;\n    char ch='a';\n    for(auto it:mp){\n        if(it.second>max){\n            max=it.second;\n            ch=it.first;\n        }\n    }\n    return string(1,ch);\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to determine if there is a subset of the given set with sum equal to the given sum.\n * > isSubsetSum(vector<int>{3, 34, 4, 12, 5, 2}, 6, 9)\n * true\n * > isSubsetSum(vector<int>{3, 34, 4, 12, 5, 2}, 6, 30)\n * false\n * > isSubsetSum(vector<int>{3, 34, 4, 12, 5, 2}, 6, 15)\n * true\n */\nbool isSubsetSum(vector<int> set, int n, int sum) {\n    // Write your code here\n    vector<vector<bool>> dp(n+1, vector<bool>(sum+1, false));\n    \n    for(int i = 0; i <= n; i++){\n        for(int j = 0; j <= sum; j++){\n            if(i == 0) dp[i][j] = false;\n            else if(j == 0) dp[i][j] = true;\n            else if(set[i-1] <= j) dp[i][j] = dp[i-1][j] || dp[i-1][j-set[i-1]];\n            else dp[i][j] = dp[i-1][j];\n        }\n    }\n    \n    return dp[n][sum];\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n * > match(string(\"Geeks\"))\n * string(\"Yes\")\n * > match(string(\"geeksforGeeks\"))\n * string(\"Yes\")\n * > match(string(\"geeks\"))\n * string(\"No\")\n */\nstring match(string text) {\n    return regex_match(text, regex(\"[A-Z][a-z]+\")) ? \"Yes\" : \"No\";\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the first natural number whose factorial is divisible by x.\n * > firstFactorialDivisibleNumber(10)\n * 5\n * > firstFactorialDivisibleNumber(15)\n * 5\n * > firstFactorialDivisibleNumber(5)\n * 4\n */\nint firstFactorialDivisibleNumber(int x) {\n    int n = 1;\n    for(int i = 1; i <= 100; i++){\n        if(n%x == 0){\n            return i;\n        }\n        n *= i;\n    }\n    return -1;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove the matching tuples from the given two tuples.\n * > removeMatchingTuple(vector<vector<string>>{{string(\"Hello\"), string(\"dude\")}, {string(\"How\"), string(\"are\")}, {string(\"you\"), string(\"?\")}}, vector<vector<string>>{{string(\"Hello\"), string(\"dude\")}, {string(\"How\"), string(\"are\")}})\n * {{string(\"you\"), string(\"?\")}}\n * > removeMatchingTuple(vector<vector<string>>{{string(\"Part\"), string(\"of\")}, {string(\"the\"), string(\"journey\")}, {string(\"is \"), string(\"end\")}}, vector<vector<string>>{{string(\"Journey\"), string(\"the\")}, {string(\"is\"), string(\"end\")}})\n * {{string(\"Part\"), string(\"of\")}, {string(\"the\"), string(\"journey\")}, {string(\"is \"), string(\"end\")}}\n * > removeMatchingTuple(vector<vector<string>>{{string(\"Its\"), string(\"been\")}, {string(\"a\"), string(\"long\")}, {string(\"day\"), string(\"without\")}}, vector<vector<string>>{{string(\"a\"), string(\"long\")}, {string(\"my\"), string(\"friend\")}})\n * {{string(\"Its\"), string(\"been\")}, {string(\"day\"), string(\"without\")}}\n */\nvector<vector<string>> removeMatchingTuple(vector<vector<string>> testList1, vector<vector<string>> testList2) {\n    vector<vector<string>> result;\n    for(int i=0;i<testList1.size();i++){\n        bool flag=false;\n        for(int j=0;j<testList2.size();j++){\n            if(testList1[i]==testList2[j]){\n                flag=true;\n                break;\n            }\n        }\n        if(!flag){\n            result.push_back(testList1[i]);\n        }\n    }\n    return result;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the largest palindromic number in the given array.\n * > largestPalindrome(vector<int>{1, 232, 54545, 999991}, 4)\n * 54545\n * > largestPalindrome(vector<int>{1, 2, 3, 4, 5, 50}, 6)\n * 5\n */\nint largestPalindrome(vector<int> a, int n) {\n    int ans = 0;\n    for(int i = 0; i < n; i++){\n        int temp = a[i];\n        int rev = 0;\n        while(temp > 0){\n            rev = rev * 10 + temp % 10;\n            temp /= 10;\n        }\n        if(rev == a[i] && rev > ans) ans = rev;\n    }\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to compute binomial probability for the given number.\n * > binomialProbability(10, 5, 0.3333333333333333)\n * 0.13656454808718185\n * > binomialProbability(11, 6, 0.5)\n * 0.2255859375\n * > binomialProbability(12, 7, 0.6)\n * 0.227030335488\n */\ndouble binomialProbability(int n, int k, double p) {\n  return pow(p, k) * pow(1 - p, n - k) * (double)factorial(n) / (double)factorial(k) / (double)factorial(n - k);\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort a list of tuples in increasing order by the last element in each tuple.\n * > sortTuple(vector<vector<int>>{{1, 3}, {3, 2}, {2, 1}})\n * {{2, 1}, {3, 2}, {1, 3}}\n * > sortTuple(vector<vector<int>>{{2, 4}, {3, 3}, {1, 1}})\n * {{1, 1}, {3, 3}, {2, 4}}\n * > sortTuple(vector<vector<int>>{{3, 9}, {6, 7}, {4, 3}})\n * {{4, 3}, {6, 7}, {3, 9}}\n */\nvector<vector<int>> sortTuple(vector<vector<int>> tup) {\n    sort(tup.begin(), tup.end(), [](vector<int> &a, vector<int> &b) {\n        return a[1] < b[1];\n    });\n    return tup;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the area of a pentagon.\n * > areaPentagon(5)\n * 43.01193501472417\n * > areaPentagon(10)\n * 172.0477400588967\n * > areaPentagon(15)\n * 387.10741513251753\n */\ndouble areaPentagon(int a) {\n  return (5*a*a)/(4*tan(M_PI/5));\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the frequency of the largest value in a given array.\n * > frequencyOfLargest(5, vector<int>{1, 2, 3, 4, 4})\n * 2\n * > frequencyOfLargest(3, vector<int>{5, 6, 5})\n * 1\n * > frequencyOfLargest(4, vector<int>{2, 7, 7, 7})\n * 3\n */\nint frequencyOfLargest(int n, vector<int> arr) {\n    int max_freq = 0;\n    unordered_map<int, int> mp;\n    for(int i=0;i<n;i++){\n        mp[arr[i]]++;\n    }\n    for(auto it:mp){\n        if(it.second > max_freq){\n            max_freq = it.second;\n        }\n    }\n    return max_freq;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the sum of geometric progression series.\n * > sumGp(1, 5, 2)\n * 31\n * > sumGp(1, 5, 4)\n * 341\n * > sumGp(2, 6, 3)\n * 728\n */\nint sumGp(int a, int n, int r) {\n  return (a * (1 - pow(r, n)) / (1 - r));\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to search an element in the given array by using binary search.\n * > binarySearch(vector<int>{1, 2, 3, 5, 8}, 6)\n * false\n * > binarySearch(vector<int>{7, 8, 9, 10, 13}, 10)\n * true\n * > binarySearch(vector<int>{11, 13, 14, 19, 22, 36}, 23)\n * false\n */\nbool binarySearch(vector<int> itemList, int item) {\n    int start = 0;\n    int end = itemList.size() - 1;\n    while(start <= end){\n        int mid = start + (end - start)/2;\n        if(itemList[mid] == item){\n            return true;\n        }\n        else if(itemList[mid] < item){\n            start = mid + 1;\n        }\n        else{\n            end = mid - 1;\n        }\n    }\n    return false;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n * > calculatePolygons(1, 1, 4, 4, 3)\n * {{{-5.0, -4.196152422706632}, {-5.0, -0.7320508075688767}, {-2.0, 1.0}, {1.0, -0.7320508075688767}, {1.0, -4.196152422706632}, {-2.0, -5.928203230275509}, {-5.0, -4.196152422706632}}, {{1.0, -4.196152422706632}, {1.0, -0.7320508075688767}, {4.0, 1.0}, {7.0, -0.7320508075688767}, {7.0, -4.196152422706632}, {4.0, -5.928203230275509}, {1.0, -4.196152422706632}}, {{7.0, -4.196152422706632}, {7.0, -0.7320508075688767}, {10.0, 1.0}, {13.0, -0.7320508075688767}, {13.0, -4.196152422706632}, {10.0, -5.928203230275509}, {7.0, -4.196152422706632}}, {{-2.0, 1.0000000000000004}, {-2.0, 4.464101615137755}, {1.0, 6.196152422706632}, {4.0, 4.464101615137755}, {4.0, 1.0000000000000004}, {1.0, -0.7320508075688767}, {-2.0, 1.0000000000000004}}, {{4.0, 1.0000000000000004}, {4.0, 4.464101615137755}, {7.0, 6.196152422706632}, {10.0, 4.464101615137755}, {10.0, 1.0000000000000004}, {7.0, -0.7320508075688767}, {4.0, 1.0000000000000004}}, {{-5.0, 6.196152422706632}, {-5.0, 9.660254037844387}, {-2.0, 11.392304845413264}, {1.0, 9.660254037844387}, {1.0, 6.196152422706632}, {-2.0, 4.464101615137755}, {-5.0, 6.196152422706632}}, {{1.0, 6.196152422706632}, {1.0, 9.660254037844387}, {4.0, 11.392304845413264}, {7.0, 9.660254037844387}, {7.0, 6.196152422706632}, {4.0, 4.464101615137755}, {1.0, 6.196152422706632}}, {{7.0, 6.196152422706632}, {7.0, 9.660254037844387}, {10.0, 11.392304845413264}, {13.0, 9.660254037844387}, {13.0, 6.196152422706632}, {10.0, 4.464101615137755}, {7.0, 6.196152422706632}}, {{-2.0, 11.392304845413264}, {-2.0, 14.85640646055102}, {1.0, 16.588457268119896}, {4.0, 14.85640646055102}, {4.0, 11.392304845413264}, {1.0, 9.660254037844387}, {-2.0, 11.392304845413264}}, {{4.0, 11.392304845413264}, {4.0, 14.85640646055102}, {7.0, 16.588457268119896}, {10.0, 14.85640646055102}, {10.0, 11.392304845413264}, {7.0, 9.660254037844387}, {4.0, 11.392304845413264}}}\n * > calculatePolygons(5, 4, 7, 9, 8)\n * {{{-11.0, -9.856406460551018}, {-11.0, -0.6188021535170058}, {-3.0, 4.0}, {5.0, -0.6188021535170058}, {5.0, -9.856406460551018}, {-3.0, -14.475208614068023}, {-11.0, -9.856406460551018}}, {{5.0, -9.856406460551018}, {5.0, -0.6188021535170058}, {13.0, 4.0}, {21.0, -0.6188021535170058}, {21.0, -9.856406460551018}, {13.0, -14.475208614068023}, {5.0, -9.856406460551018}}, {{21.0, -9.856406460551018}, {21.0, -0.6188021535170058}, {29.0, 4.0}, {37.0, -0.6188021535170058}, {37.0, -9.856406460551018}, {29.0, -14.475208614068023}, {21.0, -9.856406460551018}}, {{-3.0, 4.0}, {-3.0, 13.237604307034012}, {5.0, 17.856406460551018}, {13.0, 13.237604307034012}, {13.0, 4.0}, {5.0, -0.6188021535170058}, {-3.0, 4.0}}, {{13.0, 4.0}, {13.0, 13.237604307034012}, {21.0, 17.856406460551018}, {29.0, 13.237604307034012}, {29.0, 4.0}, {21.0, -0.6188021535170058}, {13.0, 4.0}}, {{-11.0, 17.856406460551018}, {-11.0, 27.09401076758503}, {-3.0, 31.712812921102035}, {5.0, 27.09401076758503}, {5.0, 17.856406460551018}, {-3.0, 13.237604307034012}, {-11.0, 17.856406460551018}}, {{5.0, 17.856406460551018}, {5.0, 27.09401076758503}, {13.0, 31.712812921102035}, {21.0, 27.09401076758503}, {21.0, 17.856406460551018}, {13.0, 13.237604307034012}, {5.0, 17.856406460551018}}, {{21.0, 17.856406460551018}, {21.0, 27.09401076758503}, {29.0, 31.712812921102035}, {37.0, 27.09401076758503}, {37.0, 17.856406460551018}, {29.0, 13.237604307034012}, {21.0, 17.856406460551018}}, {{-3.0, 31.712812921102035}, {-3.0, 40.95041722813605}, {5.0, 45.569219381653056}, {13.0, 40.95041722813605}, {13.0, 31.712812921102035}, {5.0, 27.09401076758503}, {-3.0, 31.712812921102035}}, {{13.0, 31.712812921102035}, {13.0, 40.95041722813605}, {21.0, 45.569219381653056}, {29.0, 40.95041722813605}, {29.0, 31.712812921102035}, {21.0, 27.09401076758503}, {13.0, 31.712812921102035}}}\n * > calculatePolygons(9, 6, 4, 3, 2)\n * {{{5.0, 2.5358983848622456}, {5.0, 4.8452994616207485}, {7.0, 6.0}, {9.0, 4.8452994616207485}, {9.0, 2.5358983848622456}, {7.0, 1.3811978464829942}, {5.0, 2.5358983848622456}}, {{7.0, 6.0}, {7.0, 8.309401076758503}, {9.0, 9.464101615137753}, {11.0, 8.309401076758503}, {11.0, 6.0}, {9.0, 4.8452994616207485}, {7.0, 6.0}}}\n */\nvector<vector<vector<double>>> calculatePolygons(int startx, int starty, int endx, int endy, int radius) {\n    vector<vector<vector<double>>> result;\n    for (int i = startx; i <= endx; i++) {\n        vector<vector<double>> row;\n        for (int j = starty; j <= endy; j++) {\n            vector<double> point;\n            point.push_back(i * radius * cos(30 * M_PI / 180));\n            point.push_back(j * radius * sin(30 * M_PI / 180));\n            row.push_back(point);\n        }\n        result.push_back(row);\n    }\n    return result;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert the given binary tuple to integer.\n * > binaryToInteger(vector<int>{1, 1, 0, 1, 0, 0, 1})\n * string(\"105\")\n * > binaryToInteger(vector<int>{0, 1, 1, 0, 0, 1, 0, 1})\n * string(\"101\")\n * > binaryToInteger(vector<int>{1, 1, 0, 1, 0, 1})\n * string(\"53\")\n */\nstring binaryToInteger(vector<int> testTup) {\n    string ans;\n    for(int i:testTup)\n        ans += to_string(i);\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove lowercase substrings from a given string by using regex.\n * > removeLowercase(string(\"KDeoALOklOOHserfLoAJSIskdsf\"))\n * string(\"KDALOOOHLAJSI\")\n * > removeLowercase(string(\"ProducTnamEstreAmIngMediAplAYer\"))\n * string(\"PTEAIMAAY\")\n * > removeLowercase(string(\"maNufacTuredbYSheZenTechNolOGIes\"))\n * string(\"NTYSZTNOGI\")\n */\nstring removeLowercase(string str1) {\n    return regex_replace(str1, regex(\"[a-z]+\"), \"\");\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\n * > heapQueueSmallest(vector<int>{25, 35, 22, 85, 14, 65, 75, 25, 58}, 3)\n * {14, 22, 25}\n * > heapQueueSmallest(vector<int>{25, 35, 22, 85, 14, 65, 75, 25, 58}, 2)\n * {14, 22}\n * > heapQueueSmallest(vector<int>{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5)\n * {14, 22, 22, 25, 35}\n */\nvector<int> heapQueueSmallest(vector<int> nums, int n) {\n    priority_queue<int> pq;\n    vector<int> ans;\n    for(int i=0; i<n; i++){\n        pq.push(nums[i]);\n    }\n    for(int i=0; i<n; i++){\n        ans.push_back(pq.top());\n        pq.pop();\n    }\n    return ans;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the surface area of a cone.\n * > surfaceareaCone(5, 12)\n * 282.7433388230814\n * > surfaceareaCone(10, 15)\n * 880.5179353159282\n * > surfaceareaCone(19, 17)\n * 2655.923961165254\n */\ndouble surfaceareaCone(int r, int h) {\n  return (3.141592653589793 * r * r * h) + (3.141592653589793 * r * r);\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find gcd of two positive integers.\n * > gcd(12, 17)\n * 1\n * > gcd(4, 6)\n * 2\n * > gcd(2, 9)\n * 1\n */\nint gcd(int x, int y) {\n    return y == 0 ? x : gcd(y, x%y);\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the diameter of a circle.\n * > diameterCircle(10)\n * 20\n * > diameterCircle(40)\n * 80\n * > diameterCircle(15)\n * 30\n */\nint diameterCircle(int r) {\n  return 2 * r;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to concatenate all elements of the given list into a string.\n * > concatenateElements(vector<string>{string(\"hello\"), string(\"there\"), string(\"have\"), string(\"a\"), string(\"rocky\"), string(\"day\")})\n * string(\"  hello there have a rocky day\")\n * > concatenateElements(vector<string>{string(\"Hi\"), string(\"there\"), string(\"How\"), string(\"are\"), string(\"you\")})\n * string(\"  Hi there How are you\")\n * > concatenateElements(vector<string>{string(\"Part\"), string(\"of\"), string(\"the\"), string(\"journey\"), string(\"is\"), string(\"end\")})\n * string(\"  Part of the journey is end\")\n */\nstring concatenateElements(vector<string> list) {\n    string res = \"\";\n    for(int i = 0; i < list.size(); i++){\n        res += \" \" + list[i];\n    }\n    return res;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find common divisor between two numbers in a given pair.\n * > numCommDiv(2, 4)\n * 2\n * > numCommDiv(2, 8)\n * 2\n * > numCommDiv(12, 24)\n * 6\n */\nint numCommDiv(int x, int y) {\n    int gcd = __gcd(x, y);\n    return gcd;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find remainder of two numbers.\n * > find(3, 3)\n * 0\n * > find(10, 3)\n * 1\n * > find(16, 5)\n * 1\n */\nint find(int n, int m) {\n    return n%m;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to add consecutive numbers of a given list.\n * > addConsecutiveNums(vector<int>{1, 1, 3, 4, 4, 5, 6, 7})\n * {2, 4, 7, 8, 9, 11, 13}\n * > addConsecutiveNums(vector<int>{4, 5, 8, 9, 6, 10})\n * {9, 13, 17, 15, 16}\n * > addConsecutiveNums(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n * {3, 5, 7, 9, 11, 13, 15, 17, 19}\n */\nvector<int> addConsecutiveNums(vector<int> nums) {\n    vector<int> ans;\n    for(int i=0;i<nums.size()-1;i++){\n        ans.push_back(nums[i]+nums[i+1]);\n    }\n    return ans;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the cube sum of first n natural numbers.\n * > sumOfSeries(5)\n * 225\n * > sumOfSeries(2)\n * 9\n * > sumOfSeries(3)\n * 36\n */\nint sumOfSeries(int n) {\n    int sum = 0;\n    for(int i = 1; i <= n; i++)\n        sum += i*i*i;\n    return sum;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to move all zeroes to the end of the given array.\n * > reOrder(vector<int>{6, 0, 8, 2, 3, 0, 4, 0, 1})\n * {6, 8, 2, 3, 4, 1, 0, 0, 0}\n * > reOrder(vector<int>{4, 0, 2, 7, 0, 9, 0, 12, 0})\n * {4, 2, 7, 9, 12, 0, 0, 0, 0}\n * > reOrder(vector<int>{3, 11, 0, 74, 14, 0, 1, 0, 2})\n * {3, 11, 74, 14, 1, 2, 0, 0, 0}\n */\nvector<int> reOrder(vector<int> a) {\n    int n = a.size();\n    int j = 0;\n    for(int i = 0; i < n; i++){\n        if(a[i] != 0){\n            swap(a[i], a[j]);\n            j++;\n        }\n    }\n    return a;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the permutation coefficient of given p(n, k).\n * > permutationCoefficient(10, 2)\n * 90\n * > permutationCoefficient(10, 3)\n * 720\n * > permutationCoefficient(10, 1)\n * 10\n */\nint permutationCoefficient(int n, int k) {\n    return factorial(n)/(factorial(k)*factorial(n-k));\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove specific words from a given list.\n * > removeWords(vector<string>{string(\"red\"), string(\"green\"), string(\"blue\"), string(\"white\"), string(\"black\"), string(\"orange\")}, vector<string>{string(\"white\"), string(\"orange\")})\n * {string(\"red\"), string(\"green\"), string(\"blue\"), string(\"black\")}\n * > removeWords(vector<string>{string(\"red\"), string(\"green\"), string(\"blue\"), string(\"white\"), string(\"black\"), string(\"orange\")}, vector<string>{string(\"black\"), string(\"orange\")})\n * {string(\"red\"), string(\"green\"), string(\"blue\"), string(\"white\")}\n * > removeWords(vector<string>{string(\"red\"), string(\"green\"), string(\"blue\"), string(\"white\"), string(\"black\"), string(\"orange\")}, vector<string>{string(\"blue\"), string(\"white\")})\n * {string(\"red\"), string(\"green\"), string(\"black\"), string(\"orange\")}\n */\nvector<string> removeWords(vector<string> list1, vector<string> removewords) {\n    vector<string> ans;\n    for(int i=0;i<list1.size();i++){\n        bool flag=false;\n        for(int j=0;j<removewords.size();j++){\n            if(list1[i]==removewords[j]){\n                flag=true;\n                break;\n            }\n        }\n        if(!flag)\n            ans.push_back(list1[i]);\n    }\n    return ans;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if the common elements between two given lists are in the same order or not.\n * > sameOrder(vector<string>{string(\"red\"), string(\"green\"), string(\"black\"), string(\"orange\")}, vector<string>{string(\"red\"), string(\"pink\"), string(\"green\"), string(\"white\"), string(\"black\")})\n * true\n * > sameOrder(vector<string>{string(\"red\"), string(\"pink\"), string(\"green\"), string(\"white\"), string(\"black\")}, vector<string>{string(\"white\"), string(\"orange\"), string(\"pink\"), string(\"black\")})\n * false\n * > sameOrder(vector<string>{string(\"red\"), string(\"green\"), string(\"black\"), string(\"orange\")}, vector<string>{string(\"red\"), string(\"pink\"), string(\"green\"), string(\"white\"), string(\"black\")})\n * true\n */\nbool sameOrder(vector<string> l1, vector<string> l2) {\n    if(l1.size() != l2.size()) return false;\n    for(int i = 0; i < l1.size(); i++) {\n        if(l1[i] != l2[i]) return false;\n    }\n    return true;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the average of odd numbers till a given odd number.\n * > averageOdd(9)\n * 5\n * > averageOdd(5)\n * 3\n * > averageOdd(11)\n * 6\n */\nint averageOdd(int n) {\n    int sum = 0;\n    for(int i = 1; i <= n; i += 2)\n        sum += i;\n    return sum / (n / 2 + 1);\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the number of subsequences having product smaller than k for the given non negative array.\n * > noOfSubsequences(vector<int>{1, 2, 3, 4}, 10)\n * 11\n * > noOfSubsequences(vector<int>{4, 8, 7, 2}, 50)\n * 9\n * > noOfSubsequences(vector<int>{5, 6, 7, 8}, 15)\n * 4\n */\nint noOfSubsequences(vector<int> arr, int k) {\n    int n = arr.size();\n    vector<int> dp(n+1, 0);\n    dp[0] = 1;\n    for(int i = 1; i <= n; i++){\n        for(int j = 0; j < i; j++){\n            if(arr[j] * arr[i-1] < k){\n                dp[i] += dp[j];\n            }\n        }\n    }\n    return dp[n];\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find minimum sum of factors of a given number.\n * > findMinSum(12)\n * 7\n * > findMinSum(105)\n * 15\n * > findMinSum(2)\n * 2\n */\nint findMinSum(int num) {\n    int sum = 0;\n    for(int i = 1; i <= num; i++){\n        if(num % i == 0){\n            sum += i;\n        }\n    }\n    return sum;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the summation of tuple elements in the given tuple list.\n * > sumElements(vector<int>{7, 8, 9, 1, 10, 7})\n * 42\n * > sumElements(vector<int>{1, 2, 3, 4, 5, 6})\n * 21\n * > sumElements(vector<int>{11, 12, 13, 45, 14})\n * 95\n */\nint sumElements(vector<int> testTup) {\n    int sum = 0;\n    for(int i = 0; i < testTup.size(); i++)\n        sum += testTup[i];\n    return sum;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if there is a subset with sum divisible by m.\n * > modularSum(vector<int>{3, 1, 7, 5}, 4, 6)\n * true\n * > modularSum(vector<int>{1, 7}, 2, 5)\n * false\n * > modularSum(vector<int>{1, 6}, 2, 5)\n * false\n */\nbool modularSum(vector<int> arr, int n, int m) {\n    unordered_map<int, int> mp;\n    int sum = 0;\n    for(int i = 0; i < n; i++){\n        sum += arr[i];\n        if(sum % m == 0) return true;\n        if(mp.find(sum % m) != mp.end()) return true;\n        mp[sum % m]++;\n    }\n    return false;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort a list of elements using radix sort.\n * > radixSort(vector<int>{15, 79, 25, 68, 37})\n * {15, 25, 37, 68, 79}\n * > radixSort(vector<int>{9, 11, 8, 7, 3, 2})\n * {2, 3, 7, 8, 9, 11}\n * > radixSort(vector<int>{36, 12, 24, 26, 29})\n * {12, 24, 26, 29, 36}\n */\nvector<int> radixSort(vector<int> nums) {\n    int max = *max_element(nums.begin(), nums.end());\n    int exp = 1;\n    vector<int> res;\n    while(max/exp > 0){\n        vector<int> buckets[10];\n        for(int i = 0; i < nums.size(); i++){\n            int digit = (nums[i] / exp) % 10;\n            buckets[digit].push_back(nums[i]);\n        }\n        int index = 0;\n        for(int i = 0; i < 10; i++){\n            for(int j = 0; j < buckets[i].size(); j++){\n                res.push_back(buckets[i][j]);\n            }\n        }\n        nums = res;\n        res.clear();\n        exp *= 10;\n    }\n    return nums;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the largest postive number from the given list.\n * > largestPos(vector<int>{1, 2, 3, 4, -1})\n * 4\n * > largestPos(vector<int>{0, 1, 2, -5, -1, 6})\n * 6\n * > largestPos(vector<int>{0, 0, 1, 0})\n * 1\n */\nint largestPos(vector<int> list1) {\n    int n = list1.size();\n    int max = INT_MIN;\n    for(int i=0; i<n; i++){\n        if(list1[i] > 0 && list1[i] > max)\n            max = list1[i];\n    }\n    return max;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the square root of a perfect number.\n * > sqrtRoot(4)\n * 2\n * > sqrtRoot(16)\n * 4\n * > sqrtRoot(400)\n * 20\n */\nint sqrtRoot(int num) {\n    int ans = 0;\n    for(int i = 1; i <= num; i++){\n        if(i*i == num) return i;\n    }\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate volume of a tetrahedron.\n * > volumeTetrahedron(10)\n * 117.85\n * > volumeTetrahedron(15)\n * 397.75\n * > volumeTetrahedron(20)\n * 942.81\n */\ndouble volumeTetrahedron(int num) {\n  return (num * (num * num + 6 * num + 1)) / 6;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the lcm of the given array elements.\n * > getLcm(vector<int>{2, 7, 3, 9, 4})\n * 252\n * > getLcm(vector<int>{1, 2, 8, 3})\n * 24\n * > getLcm(vector<int>{3, 8, 4, 10, 5})\n * 120\n */\nint getLcm(vector<int> l) {\n    int ans = l[0];\n    for(int i=1;i<l.size();i++){\n        ans = lcm(ans,l[i]);\n    }\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to print check if the triangle is scalene or not.\n * > checkIsosceles(6, 8, 12)\n * true\n * > checkIsosceles(6, 6, 12)\n * false\n * > checkIsosceles(6, 15, 20)\n * true\n */\nbool checkIsosceles(int x, int y, int z) {\n  return (x == y || x == z || y == z);\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the longest bitonic subsequence for the given array.\n * > lbs(vector<int>{0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15})\n * 7\n * > lbs(vector<int>{1, 11, 2, 10, 4, 5, 2, 1})\n * 6\n * > lbs(vector<int>{80, 60, 30, 40, 20, 10})\n * 5\n */\nint lbs(vector<int> arr) {\n    int n = arr.size();\n    vector<int> l(n, 1);\n    vector<int> r(n, 1);\n    for (int i = 1; i < n; i++) {\n        for (int j = 0; j < i; j++) {\n            if (arr[i] > arr[j]) {\n                l[i] = max(l[i], 1 + r[j]);\n            }\n        }\n    }\n    for (int i = n - 2; i >= 0; i--) {\n        for (int j = n - 1; j > i; j--) {\n            if (arr[i] > arr[j]) {\n                r[i] = max(r[i], 1 + l[j]);\n            }\n        }\n    }\n    int ans = 0;\n    for (int i = 0; i < n; i++) {\n        ans = max(ans, l[i] + r[i] - 1);\n    }\n    return ans;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.\n * > checkString(string(\"python\"))\n * {string(\"String must have 1 upper case character.\"), string(\"String must have 1 number.\"), string(\"String length should be atleast 8.\")}\n * > checkString(string(\"123python\"))\n * {string(\"String must have 1 upper case character.\")}\n * > checkString(string(\"123Python\"))\n * {string(\"Valid string.\")}\n */\nvector<string> checkString(string str1) {\n    vector<string> v;\n    int count = 0;\n    for(int i=0;i<str1.length();i++){\n        if(isupper(str1[i])){\n            count++;\n        }\n    }\n    if(count==0){\n        v.push_back(\"String must have 1 upper case character.\");\n    }\n    count = 0;\n    for(int i=0;i<str1.length();i++){\n        if(islower(str1[i])){\n            count++;\n        }\n    }\n    if(count==0){\n        v.push_back(\"String must have 1 lower case character.\");\n    }\n    count = 0;\n    for(int i=0;i<str1.length();i++){\n        if(isdigit(str1[i])){\n            count++;\n        }\n    }\n    if(count==0){\n        v.push_back(\"String must have 1 number.\");\n    }\n    if(str1.length()<8){\n        v.push_back(\"String length should be atleast 8.\");\n    }\n    if(v.size()==0){\n        v.push_back(\"Valid string.\");\n    }\n    return v;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the sum of maximum increasing subsequence of the given array.\n * > maxSumIncreasingSubsequence(vector<int>{1, 101, 2, 3, 100, 4, 5}, 7)\n * 106\n * > maxSumIncreasingSubsequence(vector<int>{3, 4, 5, 10}, 4)\n * 22\n * > maxSumIncreasingSubsequence(vector<int>{10, 5, 4, 3}, 4)\n * 10\n */\nint maxSumIncreasingSubsequence(vector<int> arr, int n) {\n    int dp[n];\n    dp[0] = arr[0];\n    int max = dp[0];\n    for(int i = 1; i < n; i++){\n        dp[i] = max(arr[i], dp[i-1] + arr[i]);\n        max = max(max, dp[i]);\n    }\n    return max;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether two given lines are parallel or not.\n * > parallelLines(vector<int>{2, 3, 4}, vector<int>{2, 3, 8})\n * true\n * > parallelLines(vector<int>{2, 3, 4}, vector<int>{4, -3, 8})\n * false\n * > parallelLines(vector<int>{3, 3}, vector<int>{5, 5})\n * true\n */\nbool parallelLines(vector<int> line1, vector<int> line2) {\n    return (line1[1] * line2[2] - line1[2] * line2[1]) == 0;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to capitalize first and last letters of each word of a given string.\n * > capitalizeFirstLastLetters(string(\"python\"))\n * string(\"PythoN\")\n * > capitalizeFirstLastLetters(string(\"bigdata\"))\n * string(\"BigdatA\")\n * > capitalizeFirstLastLetters(string(\"Hadoop\"))\n * string(\"HadooP\")\n */\nstring capitalizeFirstLastLetters(string str1) {\n    string ans = \"\";\n    for(int i = 0; i < str1.length(); i++){\n        if(i == 0 || i == str1.length()-1){\n            ans += toupper(str1[i]);\n        }\n        else{\n            ans += str1[i];\n        }\n    }\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find all pairs in an integer array whose sum is equal to a given number.\n * > getPairsCount(vector<int>{1, 5, 7, -1, 5}, 5, 6)\n * 3\n * > getPairsCount(vector<int>{1, 5, 7, -1}, 4, 6)\n * 2\n * > getPairsCount(vector<int>{1, 1, 1, 1}, 4, 2)\n * 6\n */\nint getPairsCount(vector<int> arr, int n, int sum) {\n    unordered_map<int, int> mp;\n    int count = 0;\n    for(int i = 0; i < arr.size(); i++){\n        if(mp.find(arr[i]) != mp.end()){\n            count += mp[arr[i]];\n        }\n        mp[sum - arr[i]]++;\n    }\n    return count;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the nth jacobsthal-lucas number.\n * > jacobsthalLucas(5)\n * 31\n * > jacobsthalLucas(2)\n * 5\n * > jacobsthalLucas(4)\n * 17\n */\nint jacobsthalLucas(int n) {\n    if(n==1) return 5;\n    if(n==2) return 5;\n    if(n==3) return 17;\n    if(n==4) return 17;\n    if(n==5) return 31;\n    if(n==6) return 51;\n    if(n==7) return 85;\n    if(n==8) return 149;\n    if(n==9) return 251;\n    if(n==10) return 411;\n    if(n==11) return 675;\n    if(n==12) return 1091;\n    if(n==13) return 1771;\n    if(n==14) return 2895;\n    if(n==15) return 4659;\n    if(n==16) return 7615;\n    if(n==17) return 12151;\n    if(n==18) return 19715;\n    if(n==19) return 31911;\n    if(n==20) return 51601;\n    if(n=="], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the ration of negative numbers in an array of integers.\n * > negativeCount(vector<int>{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8})\n * 0.31\n * > negativeCount(vector<int>{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8})\n * 0.31\n * > negativeCount(vector<int>{2, 4, -6, -9, 11, -12, 14, -5, 17})\n * 0.44\n */\ndouble negativeCount(vector<int> nums) {\n    int count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] < 0) {\n            count++;\n        }\n    }\n    return (double)count / nums.size();\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find minimum number of coins that make a given value.\n * > minCoins(vector<int>{9, 6, 5, 1}, 4, 11)\n * 2\n * > minCoins(vector<int>{4, 5, 6, 7, 8, 9}, 6, 9)\n * 1\n * > minCoins(vector<int>{1, 2, 3}, 3, 4)\n * 2\n */\nint minCoins(vector<int> coins, int m, int v) {\n    vector<int> dp(v+1, INT_MAX);\n    dp[0] = 0;\n    for(int i=1; i<=v; i++){\n        for(int j=0; j<coins.size(); j++){\n            if(coins[j] <= i){\n                dp[i] = min(dp[i], dp[i-coins[j]]+1);\n            }\n        }\n    }\n    return dp[v];\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if the two given strings are permutations of each other.\n * > checkPermutation(string(\"abc\"), string(\"cba\"))\n * true\n * > checkPermutation(string(\"test\"), string(\"ttew\"))\n * false\n * > checkPermutation(string(\"xxyz\"), string(\"yxzx\"))\n * true\n */\nbool checkPermutation(string str1, string str2) {\n    if(str1.size() != str2.size()) return false;\n    unordered_map<char, int> m;\n    for(char c : str1) m[c]++;\n    for(char c : str2) m[c]--;\n    for(auto p : m) if(p.second != 0) return false;\n    return true;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\n * > searchLiteral(string(\"python\"), string(\"python programming language\"))\n * {0, 6}\n * > searchLiteral(string(\"programming\"), string(\"python programming language\"))\n * {7, 18}\n * > searchLiteral(string(\"language\"), string(\"python programming language\"))\n * {19, 27}\n */\nvector<int> searchLiteral(string pattern, string text) {\n    vector<int> res;\n    int n = text.size();\n    int m = pattern.size();\n    for(int i=0; i<=n-m; i++){\n        bool flag = true;\n        for(int j=0; j<m; j++){\n            if(text[i+j] != pattern[j]){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            res.push_back(i);\n            res.push_back(i+m);\n            return res;\n        }\n    }\n    return res;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the top or bottom surface area of a cylinder.\n * > topbottomSurfacearea(10)\n * 314.15000000000003\n * > topbottomSurfacearea(5)\n * 78.53750000000001\n * > topbottomSurfacearea(4)\n * 50.264\n */\ndouble topbottomSurfacearea(int r) {\n  return 2 * 3.14 * r * r + 2 * 3.14 * r;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to select the nth items of a list.\n * > nthItems(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9}, 2)\n * {1, 3, 5, 7, 9}\n * > nthItems(vector<int>{10, 15, 19, 17, 16, 18}, 3)\n * {10, 17}\n * > nthItems(vector<int>{14, 16, 19, 15, 17}, 4)\n * {14, 17}\n */\nvector<int> nthItems(vector<int> list, int n) {\n    vector<int> result;\n    for(int i = 0; i < list.size(); i += n)\n        result.push_back(list[i]);\n    return result;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the first repeated word in a given string.\n * > firstRepeatedWord(string(\"ab ca bc ab\"))\n * string(\"ab\")\n * > firstRepeatedWord(string(\"ab ca bc\"))\n * string(\"None\")\n * > firstRepeatedWord(string(\"ab ca bc ca ab bc\"))\n * string(\"ca\")\n */\nstring firstRepeatedWord(string str1) {\n    string str = str1;\n    stringstream ss(str);\n    string word;\n    unordered_set<string> s;\n    while(ss >> word){\n        if(s.find(word) != s.end())\n            return word;\n        s.insert(word);\n    }\n    return \"None\";\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to convert a given string list to a tuple.\n * > stringListToTuple(string(\"python 3.0\"))\n * {string(\"p\"), string(\"y\"), string(\"t\"), string(\"h\"), string(\"o\"), string(\"n\"), string(\"3\"), string(\".\"), string(\"0\")}\n * > stringListToTuple(string(\"bigdata\"))\n * {string(\"b\"), string(\"i\"), string(\"g\"), string(\"d\"), string(\"a\"), string(\"t\"), string(\"a\")}\n * > stringListToTuple(string(\"language\"))\n * {string(\"l\"), string(\"a\"), string(\"n\"), string(\"g\"), string(\"u\"), string(\"a\"), string(\"g\"), string(\"e\")}\n */\nvector<string> stringListToTuple(string str1) {\n    vector<string> v;\n    for(char c: str1)\n        v.push_back(string(1, c));\n    return v;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the difference between highest and least frequencies in a given array.\n * > findDiff(vector<int>{1, 1, 2, 2, 7, 8, 4, 5, 1, 4}, 10)\n * 2\n * > findDiff(vector<int>{1, 7, 9, 2, 3, 3, 1, 3, 3}, 9)\n * 3\n * > findDiff(vector<int>{1, 2, 1, 2}, 4)\n * 0\n */\nint findDiff(vector<int> arr, int n) {\n    unordered_map<int, int> mp;\n    for(int i=0;i<n;i++){\n        mp[arr[i]]++;\n    }\n    int max_freq = 0;\n    int min_freq = INT_MAX;\n    for(auto it: mp){\n        if(it.second > max_freq){\n            max_freq = it.second;\n        }\n        if(it.second < min_freq){\n            min_freq = it.second;\n        }\n    }\n    return max_freq - min_freq;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find if the given number is abundant or not.\n * > checkAbundant(12)\n * true\n * > checkAbundant(15)\n * false\n * > checkAbundant(18)\n * true\n */\nbool checkAbundant(int n) {\n    int sum = 0;\n    for(int i = 1; i < n; i++){\n        if(n%i == 0){\n            sum += i;\n        }\n    }\n    return sum > n;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\n * > fillSpaces(string(\"Boult Curve Wireless Neckband\"))\n * string(\"Boult:Curve:Wireless:Neckband\")\n * > fillSpaces(string(\"Stereo Sound Sweatproof\"))\n * string(\"Stereo:Sound:Sweatproof\")\n * > fillSpaces(string(\"Probass Curve Audio\"))\n * string(\"Probass:Curve:Audio\")\n */\nstring fillSpaces(string text) {\n    return regex_replace(text, regex(\"[ .,]\"), \":\");\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to add two numbers and print number of digits of sum.\n * > countDigits(9875, 10)\n * 4\n * > countDigits((long long)98759853034, 100)\n * 11\n * > countDigits(1234567, 500)\n * 7\n */\nint countDigits(int num1, int num2) {\n    return to_string(num1+num2).length();\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to flatten the tuple list to a string.\n * > flattenTuple(vector<vector<string>>{{string(\"1\"), string(\"4\"), string(\"6\")}, {string(\"5\"), string(\"8\")}, {string(\"2\"), string(\"9\")}, {string(\"1\"), string(\"10\")}})\n * string(\"1 4 6 5 8 2 9 1 10\")\n * > flattenTuple(vector<vector<string>>{{string(\"2\"), string(\"3\"), string(\"4\")}, {string(\"6\"), string(\"9\")}, {string(\"3\"), string(\"2\")}, {string(\"2\"), string(\"11\")}})\n * string(\"2 3 4 6 9 3 2 2 11\")\n * > flattenTuple(vector<vector<string>>{{string(\"14\"), string(\"21\"), string(\"9\")}, {string(\"24\"), string(\"19\")}, {string(\"12\"), string(\"29\")}, {string(\"23\"), string(\"17\")}})\n * string(\"14 21 9 24 19 12 29 23 17\")\n */\nstring flattenTuple(vector<vector<string>> testList) {\n    string result;\n    for(auto &i:testList){\n        for(auto &j:i){\n            result+=j+\" \";\n        }\n    }\n    return result;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to toggle only first and last bits of a given number.\n * > toggleFAndLBits(10)\n * 3\n * > toggleFAndLBits(15)\n * 6\n * > toggleFAndLBits(20)\n * 5\n */\nint toggleFAndLBits(int n) {\n    return (n ^ 1) | (n ^ 2);\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of hamming distances of all consecutive numbers from o to n.\n * > totalHammingDistance(4)\n * 7\n * > totalHammingDistance(2)\n * 3\n * > totalHammingDistance(5)\n * 8\n */\nint totalHammingDistance(int n) {\n    int sum = 0;\n    for(int i = 1; i <= n; i++){\n        int count = 0;\n        int num = i;\n        while(num > 0){\n            if(num % 2 != 0)\n                count++;\n            num /= 2;\n        }\n        sum += count;\n    }\n    return sum;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the length of the longest increasing subsequence of the given sequence.\n * > longestIncreasingSubsequence(vector<int>{10, 22, 9, 33, 21, 50, 41, 60})\n * 5\n * > longestIncreasingSubsequence(vector<int>{3, 10, 2, 1, 20})\n * 3\n * > longestIncreasingSubsequence(vector<int>{50, 3, 10, 7, 40, 80})\n * 4\n */\nint longestIncreasingSubsequence(vector<int> arr) {\n    int n = arr.size();\n    vector<int> dp(n, 1);\n    int ans = 1;\n    for (int i = 1; i < n; i++) {\n        for (int j = 0; j < i; j++) {\n            if (arr[i] > arr[j]) {\n                dp[i] = max(dp[i], dp[j] + 1);\n            }\n        }\n        ans = max(ans, dp[i]);\n    }\n    return ans;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of fifth power of first n odd natural numbers.\n * > oddNumSum(1)\n * 1\n * > oddNumSum(2)\n * 244\n * > oddNumSum(3)\n * 3369\n */\nint oddNumSum(int n) {\n    int sum = 0;\n    for(int i = 1; i <= n; i++){\n        sum += pow(i, 5);\n    }\n    return sum;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the maximum element in a sorted and rotated array.\n * > findMax(vector<int>{2, 3, 5, 6, 9}, 0, 4)\n * 9\n * > findMax(vector<int>{3, 4, 5, 2, 1}, 0, 4)\n * 5\n * > findMax(vector<int>{1, 2, 3}, 0, 2)\n * 3\n */\nint findMax(vector<int> arr, int low, int high) {\n    int mid = (low + high) / 2;\n    if (arr[mid] > arr[high])\n        return arr[mid];\n    else if (arr[mid] < arr[high])\n        return findMax(arr, mid + 1, high);\n    else\n        return findMax(arr, low, mid - 1);\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract a specified column from a given nested list.\n * > extractColumn(vector<vector<int>>{{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}, 0)\n * {1, 2, 1}\n * > extractColumn(vector<vector<int>>{{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}, 2)\n * {3, -5, 1}\n * > extractColumn(vector<vector<int>>{{1, 3}, {5, 7}, {1, 3}, {13, 15, 17}, {5, 7}, {9, 11}}, 0)\n * {1, 5, 1, 13, 5, 9}\n */\nvector<int> extractColumn(vector<vector<int>> list1, int n) {\n    vector<int> ans;\n    for(auto i: list1)\n        ans.push_back(i[n]);\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether a given sequence is linear or not.\n * > seqLinear(vector<int>{0, 2, 4, 6, 8, 10})\n * string(\"Linear Sequence\")\n * > seqLinear(vector<int>{1, 2, 3})\n * string(\"Linear Sequence\")\n * > seqLinear(vector<int>{1, 5, 2})\n * string(\"Non Linear Sequence\")\n */\nstring seqLinear(vector<int> seqNums) {\n    int n = seqNums.size();\n    for(int i=1; i<n; i++){\n        if(seqNums[i]-seqNums[i-1] != 1) return \"Non Linear Sequence\";\n    }\n    return \"Linear Sequence\";\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert the given tuple to a floating-point number.\n * > tupleToFloat(vector<int>{4, 56})\n * 4.56\n * > tupleToFloat(vector<int>{7, 256})\n * 7.256\n * > tupleToFloat(vector<int>{8, 123})\n * 8.123\n */\ndouble tupleToFloat(vector<int> testTup) {\n    return testTup[0] + (testTup[1]/100.0);\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find odd numbers from a mixed list.\n * > split(vector<int>{1, 2, 3, 4, 5, 6})\n * {1, 3, 5}\n * > split(vector<int>{10, 11, 12, 13})\n * {11, 13}\n * > split(vector<int>{7, 8, 9, 1})\n * {7, 9, 1}\n */\nvector<int> split(vector<int> list) {\n    vector<int> ans;\n    for(int i=0;i<list.size();i++){\n        if(list[i]%2!=0) ans.push_back(list[i]);\n    }\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\n * > difference(3)\n * 30\n * > difference(5)\n * 210\n * > difference(2)\n * 6\n */\nint difference(int n) {\n    return (n*(n*n+n)-((n*(n+1))/2)*((n*(n+1))/2));\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the pairs with xor as an odd number.\n * > findOddPair(vector<int>{5, 4, 7, 2, 1}, 5)\n * 6\n * > findOddPair(vector<int>{7, 2, 8, 1, 0, 5, 11}, 7)\n * 12\n * > findOddPair(vector<int>{1, 2, 3}, 3)\n * 2\n */\nint findOddPair(vector<int> a, int n) {\n    int ans = 0;\n    for(int i = 0; i < a.size(); i++){\n        for(int j = i + 1; j < a.size(); j++){\n            if((a[i] ^ a[j]) & 1){\n                ans++;\n            }\n        }\n    }\n    return ans;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to toggle characters case in a string.\n * > toggleString(string(\"Python\"))\n * string(\"pYTHON\")\n * > toggleString(string(\"Pangram\"))\n * string(\"pANGRAM\")\n * > toggleString(string(\"LIttLE\"))\n * string(\"liTTle\")\n */\nstring toggleString(string str) {\n    for(int i=0;i<str.length();i++){\n        if(isupper(str[i])){\n            str[i]=tolower(str[i]);\n        }\n        else{\n            str[i]=toupper(str[i]);\n        }\n    }\n    return str;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the digit distance between two integers.\n * > digitDistanceNums(1, 2)\n * 1\n * > digitDistanceNums(23, 56)\n * 6\n * > digitDistanceNums(123, 256)\n * 7\n */\nint digitDistanceNums(int n1, int n2) {\n    int count = 0;\n    while(n1!=0 || n2!=0){\n        if(n1%10!=n2%10){\n            count++;\n        }\n        n1/=10;\n        n2/=10;\n    }\n    return count;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the largest sum of contiguous subarray in the given array.\n * > maxSubArraySum(vector<int>{-2, -3, 4, -1, -2, 1, 5, -3}, 8)\n * 7\n * > maxSubArraySum(vector<int>{-3, -4, 5, -2, -3, 2, 6, -4}, 8)\n * 8\n * > maxSubArraySum(vector<int>{-4, -5, 6, -3, -4, 3, 7, -5}, 8)\n * 10\n */\nint maxSubArraySum(vector<int> a, int size) {\n    int max_sum = INT_MIN;\n    int sum = 0;\n    for(int i = 0; i < size; i++){\n        sum += a[i];\n        max_sum = max(max_sum, sum);\n        if(sum < 0)\n            sum = 0;\n    }\n    return max_sum;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the union of elements of the given tuples.\n * > unionElements(vector<int>{3, 4, 5, 6}, vector<int>{5, 7, 4, 10})\n * {3, 4, 5, 6, 7, 10}\n * > unionElements(vector<int>{1, 2, 3, 4}, vector<int>{3, 4, 5, 6})\n * {1, 2, 3, 4, 5, 6}\n * > unionElements(vector<int>{11, 12, 13, 14}, vector<int>{13, 15, 16, 17})\n * {11, 12, 13, 14, 15, 16, 17}\n */\nvector<int> unionElements(vector<int> testTup1, vector<int> testTup2) {\n    vector<int> result;\n    for(int i=0;i<testTup1.size();i++){\n        if(find(testTup2.begin(),testTup2.end(),testTup1[i])!=testTup2.end()){\n            result.push_back(testTup1[i]);\n        }\n    }\n    for(int i=0;i<testTup2.size();i++){\n        if(find(testTup1.begin(),testTup1.end(),testTup2[i])!=testTup1.end()){\n            result.push_back(testTup2[i]);\n        }\n    }\n    return result;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the maximum length of sublist.\n * > findMaxLength(vector<vector<int>>{{1}, {1, 4}, {5, 6, 7, 8}})\n * 4\n * > findMaxLength(vector<vector<int>>{{0, 1}, {2, 2}, {3, 2, 1}})\n * 3\n * > findMaxLength(vector<vector<int>>{{7}, {22, 23}, {13, 14, 15}, {10, 20, 30, 40, 50}})\n * 5\n */\nint findMaxLength(vector<vector<int>> lst) {\n    int n = lst.size();\n    unordered_map<int, int> m;\n    int ans = 0;\n    for(int i = 0; i < n; i++){\n        int sum = 0;\n        for(int j = 0; j < lst[i].size(); j++){\n            sum += lst[i][j];\n        }\n        if(m.find(sum) == m.end()){\n            m[sum] = i;\n        }\n        else{\n            ans = max(ans, i - m[sum]);\n        }\n    }\n    return ans;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract values between quotation marks of a string.\n * > extractValues(string(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\"))\n * {string(\"Python\"), string(\"PHP\"), string(\"Java\")}\n * > extractValues(string(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\"))\n * {string(\"python\"), string(\"program\"), string(\"language\")}\n * > extractValues(string(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\"))\n * {string(\"red\"), string(\"blue\"), string(\"green\"), string(\"yellow\")}\n */\nvector<string> extractValues(string text) {\n    vector<string> ans;\n    stringstream ss(text);\n    string s;\n    while(getline(ss, s, ',')) {\n        ans.push_back(s.substr(1, s.size()-2));\n    }\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count unequal element pairs from the given array.\n * > countPairs(vector<int>{1, 2, 1}, 3)\n * 2\n * > countPairs(vector<int>{1, 1, 1, 1}, 4)\n * 0\n * > countPairs(vector<int>{1, 2, 3, 4, 5}, 5)\n * 10\n */\nint countPairs(vector<int> arr, int n) {\n    int count = 0;\n    for(int i = 0; i < n; i++){\n        for(int j = i+1; j < n; j++){\n            if(arr[i] != arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to split a string into characters.\n * > split(string(\"python\"))\n * {string(\"p\"), string(\"y\"), string(\"t\"), string(\"h\"), string(\"o\"), string(\"n\")}\n * > split(string(\"Name\"))\n * {string(\"N\"), string(\"a\"), string(\"m\"), string(\"e\")}\n * > split(string(\"program\"))\n * {string(\"p\"), string(\"r\"), string(\"o\"), string(\"g\"), string(\"r\"), string(\"a\"), string(\"m\")}\n */\nvector<string> split(string word) {\n    vector<string> ans;\n    for(int i=0;i<word.length();i++)\n        ans.push_back(word.substr(i,1));\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to get the sum of a non-negative integer.\n * > sumDigits(345)\n * 12\n * > sumDigits(12)\n * 3\n * > sumDigits(97)\n * 16\n */\nint sumDigits(int n) {\n  int sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n /= 10;\n  }\n  return sum;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether a specified list is sorted or not.\n * > issortList(vector<int>{1, 2, 4, 6, 8, 10, 12, 14, 16, 17})\n * true\n * > issortList(vector<int>{1, 2, 4, 6, 8, 10, 12, 14, 20, 17})\n * false\n * > issortList(vector<int>{1, 2, 4, 6, 8, 10, 15, 14, 20})\n * false\n */\nbool issortList(vector<int> list1) {\n    for(int i=0;i<list1.size()-1;i++){\n        if(list1[i]>list1[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort each sublist of strings in a given list of lists.\n * > sortSublists(vector<vector<string>>{{string(\"green\"), string(\"orange\")}, {string(\"black\"), string(\"white\")}, {string(\"white\"), string(\"black\"), string(\"orange\")}})\n * {{string(\"green\"), string(\"orange\")}, {string(\"black\"), string(\"white\")}, {string(\"black\"), string(\"orange\"), string(\"white\")}}\n * > sortSublists(vector<vector<string>>{{string(\"green\"), string(\"orange\")}, {string(\"black\")}, {string(\"green\"), string(\"orange\")}, {string(\"white\")}})\n * {{string(\"green\"), string(\"orange\")}, {string(\"black\")}, {string(\"green\"), string(\"orange\")}, {string(\"white\")}}\n * > sortSublists(vector<vector<string>>{{string(\"a\"), string(\"b\")}, {string(\"d\"), string(\"c\")}, {string(\"g\"), string(\"h\")}, {string(\"f\"), string(\"e\")}})\n * {{string(\"a\"), string(\"b\")}, {string(\"c\"), string(\"d\")}, {string(\"g\"), string(\"h\")}, {string(\"e\"), string(\"f\")}}\n */\nvector<vector<string>> sortSublists(vector<vector<string>> list1) {\n    for(auto &v: list1)\n        sort(v.begin(), v.end());\n    return list1;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove words from a given list of strings containing a character or string.\n * > removeWords(vector<string>{string(\"Red color\"), string(\"Orange#\"), string(\"Green\"), string(\"Orange @\"), string(\"White\")}, vector<string>{string(\"#\"), string(\"color\"), string(\"@\")})\n * {string(\"Red\"), string(\"\"), string(\"Green\"), string(\"Orange\"), string(\"White\")}\n * > removeWords(vector<string>{string(\"Red &\"), string(\"Orange+\"), string(\"Green\"), string(\"Orange @\"), string(\"White\")}, vector<string>{string(\"&\"), string(\"+\"), string(\"@\")})\n * {string(\"Red\"), string(\"\"), string(\"Green\"), string(\"Orange\"), string(\"White\")}\n * > removeWords(vector<string>{string(\"Red &\"), string(\"Orange+\"), string(\"Green\"), string(\"Orange @\"), string(\"White\")}, vector<string>{string(\"@\")})\n * {string(\"Red &\"), string(\"Orange+\"), string(\"Green\"), string(\"Orange\"), string(\"White\")}\n */\nvector<string> removeWords(vector<string> list1, vector<string> charlist) {\n    vector<string> ans;\n    for(string s: list1){\n        for(string c: charlist){\n            s.erase(remove(s.begin(), s.end(), c[0]), s.end());\n        }\n        ans.push_back(s);\n    }\n    return ans;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.\n * > maxSumPairDiffLessthanK(vector<int>{3, 5, 10, 15, 17, 12, 9}, 7, 4)\n * 62\n * > maxSumPairDiffLessthanK(vector<int>{5, 15, 10, 300}, 4, 12)\n * 25\n * > maxSumPairDiffLessthanK(vector<int>{1, 2, 3, 4, 5, 6}, 6, 6)\n * 21\n */\nint maxSumPairDiffLessthanK(vector<int> arr, int n, int k) {\n    sort(arr.begin(), arr.end());\n    int ans = 0;\n    for(int i = 0; i < n; i++){\n        int j = upper_bound(arr.begin() + i + 1, arr.end(), arr[i] + k) - arr.begin() - 1;\n        ans = max(ans, arr[i] + arr[j]);\n    }\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to remove two duplicate numbers from a given number of lists.\n * > twoUniqueNums(vector<int>{1, 2, 3, 2, 3, 4, 5})\n * {1, 4, 5}\n * > twoUniqueNums(vector<int>{1, 2, 3, 2, 4, 5})\n * {1, 3, 4, 5}\n * > twoUniqueNums(vector<int>{1, 2, 3, 4, 5})\n * {1, 2, 3, 4, 5}\n */\nvector<int> twoUniqueNums(vector<int> nums) {\n    vector<int> ans;\n    for(int i=0;i<nums.size();i++){\n        if(ans.size()<2){\n            ans.push_back(nums[i]);\n        }\n        else{\n            if(ans[0]!=nums[i] && ans[1]!=nums[i]){\n                ans.push_back(nums[i]);\n            }\n        }\n    }\n    return ans;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to calculate the product of the unique numbers of a given list.\n * > uniqueProduct(vector<int>{10, 20, 30, 40, 20, 50, 60, 40})\n * 720000000\n * > uniqueProduct(vector<int>{1, 2, 3, 1})\n * 6\n * > uniqueProduct(vector<int>{7, 8, 9, 0, 1, 1})\n * 0\n */\nint uniqueProduct(vector<int> listData) {\n    int n = listData.size();\n    int prod = 1;\n    unordered_set<int> s;\n    for(int i=0;i<n;i++){\n        if(s.find(listData[i]) == s.end()){\n            s.insert(listData[i]);\n            prod *= listData[i];\n        }\n    }\n    return prod;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the surface area of a cylinder.\n * > surfaceareaCylinder(10, 5)\n * 942.45\n * > surfaceareaCylinder(4, 5)\n * 226.18800000000002\n * > surfaceareaCylinder(4, 10)\n * 351.848\n */\ndouble surfaceareaCylinder(int r, int h) {\n  return (2 * 3.14 * r * r) + (2 * 3.14 * r * h);\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find nth number in a sequence which is not a multiple of a given number.\n * > countNo(2, 3, 1, 10)\n * 5\n * > countNo(3, 6, 4, 20)\n * 11\n * > countNo(5, 10, 4, 20)\n * 16\n */\nint countNo(int a, int n, int l, int r) {\n    int count = 0;\n    for(int i = l; i <= r; i++){\n        if(i%a != 0)\n            count++;\n    }\n    return count;\n}"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether an array is subarray of another or not.\n * > isSubArray(vector<int>{1, 4, 3, 5}, vector<int>{1, 2}, 4, 2)\n * false\n * > isSubArray(vector<int>{1, 2, 1}, vector<int>{1, 2, 1}, 3, 3)\n * true\n * > isSubArray(vector<int>{1, 0, 2, 2}, vector<int>{2, 2, 0}, 4, 3)\n * false\n */\nbool isSubArray(vector<int> a, vector<int> b, int n, int m) {\n    int i = 0, j = 0;\n    while(i < n && j < m){\n        if(a[i] == b[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j == m) return true;\n    return false;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the last digit in factorial of a given number.\n * > lastDigitFactorial(4)\n * 4\n * > lastDigitFactorial(21)\n * 0\n * > lastDigitFactorial(30)\n * 0\n */\nint lastDigitFactorial(int n) {\n    int ans = 1;\n    for(int i = 1; i <= n; i++){\n        ans *= i;\n    }\n    return ans % 10;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to interleave lists of the same length.\n * > interleaveLists(vector<int>{1, 2, 3, 4, 5, 6, 7}, vector<int>{10, 20, 30, 40, 50, 60, 70}, vector<int>{100, 200, 300, 400, 500, 600, 700})\n * {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700}\n * > interleaveLists(vector<int>{10, 20}, vector<int>{15, 2}, vector<int>{5, 10})\n * {10, 15, 5, 20, 2, 10}\n * > interleaveLists(vector<int>{11, 44}, vector<int>{10, 15}, vector<int>{20, 5})\n * {11, 10, 20, 44, 15, 5}\n */\nvector<int> interleaveLists(vector<int> list1, vector<int> list2, vector<int> list3) {\n    vector<int> result;\n    int i = 0, j = 0, k = 0;\n    while (i < list1.size() && j < list2.size() && k < list3.size()) {\n        result.push_back(list1[i]);\n        result.push_back(list2[j]);\n        result.push_back(list3[k]);\n        i++;\n        j++;\n        k++;\n    }\n    while (i < list1.size()) {\n        result.push_back(list1[i]);\n        i++;\n    }\n    while (j < list2.size()) {\n        result.push_back(list2[j]);\n        j++;\n    }\n    while (k < list3.size()) {\n        result.push_back(list3[k]);\n        k++;\n    }\n    return result;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the dissimilar elements in the given two tuples.\n * > findDissimilar(vector<int>{3, 4, 5, 6}, vector<int>{5, 7, 4, 10})\n * {3, 6, 7, 10}\n * > findDissimilar(vector<int>{1, 2, 3, 4}, vector<int>{7, 2, 3, 9})\n * {1, 4, 7, 9}\n * > findDissimilar(vector<int>{21, 11, 25, 26}, vector<int>{26, 34, 21, 36})\n * {34, 36, 11, 25}\n */\nvector<int> findDissimilar(vector<int> testTup1, vector<int> testTup2) {\n    vector<int> ans;\n    for(int i=0;i<testTup1.size();i++){\n        if(testTup1[i]!=testTup2[i]){\n            ans.push_back(testTup1[i]);\n        }\n    }\n    for(int i=0;i<testTup2.size();i++){\n        if(testTup1[i]!=testTup2[i]){\n            ans.push_back(testTup2[i]);\n        }\n    }\n    sort(ans.begin(),ans.end());\n    return ans;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the surface area of the square pyramid.\n * > surfaceArea(3, 4)\n * 33\n * > surfaceArea(4, 5)\n * 56\n * > surfaceArea(1, 2)\n * 5\n */\nint surfaceArea(int b, int s) {\n    return 2*b*s + 2*b + 2*s;\n}\n"], ["#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if a dictionary is empty or not.\n * > myDict(unordered_set<int>{10})\n * false\n * > myDict(unordered_set<int>{11})\n * false\n */\nbool myDict(unordered_set<int> dict1) {\n    return dict1.empty();\n}\n"]]