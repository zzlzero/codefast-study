{"task_id": "MBCPP/11", "language": "cpp", "completion": "    int n = s.size();\n    int m = ch.size();\n    if (n == 0 || m == 0) return s;\n    int i = 0, j = 0;\n    while (i < n && j < m) {\n        if (s[i] == ch[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == m) {\n        s.erase(i - j, j);\n        return s;\n    }\n    i = n - 1;\n    j = m - 1;\n    while (i >= 0 && j >= 0) {\n        if (s[i] == ch[j]) {\n            i--;\n            j--;\n        } else {\n            i--;\n        }\n    }\n    if (j == -1) {\n        s.erase(i + 1, n - i - 1);\n        return s;\n    }\n    return s;\n}\n"}
{"task_id": "MBCPP/12", "language": "cpp", "completion": "    int n = m.size();\n    vector<pair<int, int>> v;\n    for (int i = 0; i < n; i++) {\n        int sum = 0;\n        for (int j = 0; j < n; j++) {\n            sum += m[i][j];\n        }\n        v.push_back({sum, i});\n    }\n    sort(v.begin(), v.end());\n    vector<vector<int>> res(n, vector<int>(n));\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            res[i][j] = m[v[i].second][j];\n        }\n    }\n    return res;\n}\n"}
{"task_id": "MBCPP/14", "language": "cpp", "completion": "    return l * b * h;\n}"}
{"task_id": "MBCPP/15", "language": "cpp", "completion": "    vector<string> result;\n    string temp;\n    for (int i = 0; i < text.length(); i++) {\n        if (islower(text[i])) {\n            result.push_back(temp);\n            temp = \"\";\n        }\n        temp += text[i];\n    }\n    result.push_back(temp);\n    return result;\n}\n"}
{"task_id": "MBCPP/16", "language": "cpp", "completion": "    int n = text.size();\n    int i = 0;\n    while (i < n) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            int j = i + 1;\n            while (j < n && text[j] >= 'a' && text[j] <= 'z') {\n                j++;\n            }\n            if (j - i > 1 && text[i + 1] == '_') {\n                return \"Not matched!\";\n            }\n            i = j;\n        } else {\n            i++;\n        }\n    }\n    return \"Found a match!\";\n}\n"}
{"task_id": "MBCPP/17", "language": "cpp", "completion": "    return 4 * a;\n}\n\n"}
{"task_id": "MBCPP/18", "language": "cpp", "completion": "    string result = \"\";\n    for (int i = 0; i < str.length(); i++) {\n        if (secondString.find(str[i]) == string::npos) {\n            result += str[i];\n        }\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/19", "language": "cpp", "completion": "    unordered_set<int> set;\n    for (int i = 0; i < arraynums.size(); i++) {\n        if (set.find(arraynums[i]) != set.end()) {\n            return true;\n        }\n        set.insert(arraynums[i]);\n    }\n    return false;\n}\n\n"}
{"task_id": "MBCPP/20", "language": "cpp", "completion": "    int sum = 0;\n    while (x > 0) {\n        int lastDigit = x % 10;\n        if (lastDigit == 0) {\n            return false;\n        }\n        sum += lastDigit;\n        x /= 10;\n    }\n    return sum == 10;\n}\n"}
{"task_id": "MBCPP/21", "language": "cpp", "completion": "    vector<int> result;\n    for (int i = 0; i < m; i++) {\n        result.push_back(n * (i + 1));\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/22", "language": "cpp", "completion": "    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int j = nums[i] - 1;\n        if (nums[j] == nums[i]) {\n            return nums[i];\n        }\n        swap(nums[i], nums[j]);\n    }\n    return -1;\n}\n"}
{"task_id": "MBCPP/23", "language": "cpp", "completion": "    int maxSum = INT_MIN;\n    for (int i = 0; i < list1.size(); i++) {\n        int sum = 0;\n        for (int j = 0; j < list1[i].size(); j++) {\n            sum += list1[i][j];\n        }\n        maxSum = max(maxSum, sum);\n    }\n    return maxSum;\n}"}
{"task_id": "MBCPP/24", "language": "cpp", "completion": "    int decimal = 0;\n    int base = 1;\n    while (binary > 0) {\n        int rem = binary % 10;\n        decimal += rem * base;\n        base *= 2;\n        binary /= 10;\n    }\n    return decimal;\n}\n"}
{"task_id": "MBCPP/25", "language": "cpp", "completion": "    int res = 1;\n    unordered_map<int, int> mp;\n    for (int i = 0; i < n; i++) {\n        if (mp[arr[i]] == 0) {\n            res *= arr[i];\n            mp[arr[i]]++;\n        }\n    }\n    return res;\n}\n"}
{"task_id": "MBCPP/26", "language": "cpp", "completion": "    unordered_map<int, int> map;\n    for (auto &v : testList) {\n        for (auto &i : v) {\n            map[i]++;\n        }\n    }\n    for (auto &i : map) {\n        if (i.second < k) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "MBCPP/27", "language": "cpp", "completion": "    vector<string> result;\n    for (string s : list) {\n        string res = \"\";\n        for (char c : s) {\n            if (isalpha(c)) {\n                res += c;\n            }\n        }\n        result.push_back(res);\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/28", "language": "cpp", "completion": "    int res = 1;\n    for (int i = 0; i < k; i++) {\n        res *= (n - i);\n        res /= (i + 1);\n    }\n    return res;\n}\n"}
{"task_id": "MBCPP/29", "language": "cpp", "completion": "    unordered_map<int, int> map;\n    for (int i = 0; i < arrSize; i++) {\n        map[arr[i]]++;\n    }\n    for (auto it = map.begin(); it != map.end(); it++) {\n        if (it->second % 2 != 0) {\n            return it->first;\n        }\n    }\n    return -1;\n}\n"}
{"task_id": "MBCPP/30", "language": "cpp", "completion": "    int n = s.size();\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (s[i] == s[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "MBCPP/31", "language": "cpp", "completion": "    priority_queue<pair<int, int>> pq;\n    unordered_map<int, int> mp;\n    for (auto &nums_i : nums) {\n        for (auto &num : nums_i) {\n            mp[num]++;\n        }\n    }\n    for (auto &[num, cnt] : mp) {\n        pq.push({cnt, num});\n    }\n    vector<int> res;\n    while (k--) {\n        res.push_back(pq.top().second);\n        pq.pop();\n    }\n    return res;\n}\n"}
{"task_id": "MBCPP/32", "language": "cpp", "completion": "    int max = 0;\n    for (int i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            max = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n        }\n    }\n    return max;\n}\n"}
{"task_id": "MBCPP/33", "language": "cpp", "completion": "    if (n == 0) return 0;\n    int ans = 0;\n    while (n > 0) {\n        ans = ans * 10 + n % 2;\n        n /= 2;\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/34", "language": "cpp", "completion": "    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += ar[i];\n    }\n    int expectedSum = (n * (n + 1)) / 2;\n    return expectedSum - sum;\n}"}
{"task_id": "MBCPP/35", "language": "cpp", "completion": "    return n * (n + 1) * (2 * n + 1) / 6;\n}\n"}
{"task_id": "MBCPP/36", "language": "cpp", "completion": "    int count = 0;\n    int num = 0;\n    int digit = 0;\n    while (count < n) {\n        num = p / q;\n        digit = num % 10;\n        count += digit;\n        p = q;\n        q = num;\n    }\n    return digit;\n}"}
{"task_id": "MBCPP/38", "language": "cpp", "completion": "    int even = 0, odd = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even += list1[i];\n        } else {\n            odd += list1[i];\n        }\n    }\n    return even / odd;\n}\n"}
{"task_id": "MBCPP/39", "language": "cpp", "completion": "    unordered_map<char, int> m;\n    for (char c : s) {\n        m[c]++;\n    }\n    string ans;\n    for (char c : s) {\n        if (m[c] > 0) {\n            ans += c;\n            m[c]--;\n        }\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/40", "language": "cpp", "completion": "    unordered_map<int, int> freq;\n    for (auto &num : nums) {\n        for (auto &n : num) {\n            freq[n]++;\n        }\n    }\n    return freq;\n}\n"}
{"task_id": "MBCPP/41", "language": "cpp", "completion": "    vector<int> result;\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] % 2 == 0) {\n            result.push_back(nums[i]);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "MBCPP/42", "language": "cpp", "completion": "    int sum = 0;\n    unordered_map<int, int> mp;\n    for (int i = 0; i < arr.size(); i++) {\n        if (mp.find(arr[i]) != mp.end()) {\n            sum += mp[arr[i]];\n        }\n        mp[arr[i]]++;\n    }\n    return sum;\n}\n"}
{"task_id": "MBCPP/43", "language": "cpp", "completion": "    regex pattern(\"[a-z]+_[a-z]+\");\n    smatch match;\n    if (regex_search(text, match, pattern)) {\n        return \"Found a match!\";\n    }\n    return \"Not matched!\";\n}\n"}
{"task_id": "MBCPP/44", "language": "cpp", "completion": "    if (text.substr(0, 6) == \"python\") {\n        return \"Found a match!\";\n    }\n    return \"Not matched!\";\n}\n\n"}
{"task_id": "MBCPP/45", "language": "cpp", "completion": "    int gcd = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        gcd = gcd(l[i], gcd);\n    }\n    return gcd;\n}\n"}
{"task_id": "MBCPP/46", "language": "cpp", "completion": "    unordered_set<int> s;\n    for (int i = 0; i < data.size(); i++) {\n        if (s.find(data[i]) != s.end()) {\n            return false;\n        }\n        s.insert(data[i]);\n    }\n    return true;\n}\n\n"}
{"task_id": "MBCPP/47", "language": "cpp", "completion": "    int aFactorial = 1;\n    int bFactorial = 1;\n    int lastDigit = 0;\n    while (a > 0) {\n        aFactorial *= a;\n        a--;\n    }\n    while (b > 0) {\n        bFactorial *= b;\n        b--;\n    }\n    while (aFactorial > 0) {\n        lastDigit = aFactorial % 10;\n        aFactorial /= 10;\n    }\n    while (bFactorial > 0) {\n        lastDigit = bFactorial % 10;\n        bFactorial /= 10;\n    }\n    return lastDigit;\n}"}
{"task_id": "MBCPP/48", "language": "cpp", "completion": "    int ans = 0;\n    for (int i = 0; i < 32; i++) {\n        if (n & (1 << i)) {\n            ans |= (1 << i);\n        }\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/49", "language": "cpp", "completion": "    vector<int> result;\n    for (int i = 0; i < nums.size(); i++) {\n        result.push_back(nums[i][n]);\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/51", "language": "cpp", "completion": "    if(x == y && y == z)\n        return true;\n    else\n        return false;\n}\n"}
{"task_id": "MBCPP/52", "language": "cpp", "completion": "    return b * h;\n}\n\n"}
{"task_id": "MBCPP/53", "language": "cpp", "completion": "    if (str.size() < 2) {\n        return \"Not Equal\";\n    }\n    if (str[0] == str[str.size() - 1]) {\n        return \"Equal\";\n    }\n    return \"Not Equal\";\n}"}
{"task_id": "MBCPP/54", "language": "cpp", "completion": "    vector<int> result;\n    int max = *max_element(myList.begin(), myList.end());\n    vector<int> count(max + 1, 0);\n    for (int i = 0; i < myList.size(); i++) {\n        count[myList[i]]++;\n    }\n    for (int i = 1; i < count.size(); i++) {\n        count[i] += count[i - 1];\n    }\n    for (int i = myList.size() - 1; i >= 0; i--) {\n        result[count[myList[i]] - 1] = myList[i];\n        count[myList[i]]--;\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/55", "language": "cpp", "completion": "    return a * pow(r, n - 1);\n}\n"}
{"task_id": "MBCPP/56", "language": "cpp", "completion": "    int rev = 0;\n    while (n > 0) {\n        rev = rev * 10 + n % 10;\n        n /= 10;\n    }\n    return n == rev - 1;\n}"}
{"task_id": "MBCPP/57", "language": "cpp", "completion": "    int ans = 0;\n    for (int i = 0; i < n; i++) {\n        int num = 0;\n        for (int j = i; j < n; j++) {\n            num = num * 10 + arr[j];\n        }\n        ans = max(ans, num);\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/58", "language": "cpp", "completion": "    return (x > 0 && y < 0) || (x < 0 && y > 0);\n}\n"}
{"task_id": "MBCPP/59", "language": "cpp", "completion": "    int i = 1;\n    while (true) {\n        int x = i * (3 * i - 1) / 2;\n        if (x == n) {\n            return x;\n        }\n        if (x > n) {\n            return -1;\n        }\n        i++;\n    }\n}\n"}
{"task_id": "MBCPP/60", "language": "cpp", "completion": "    int maxLen = 0;\n    unordered_map<int, int> mp;\n    for (int i = 0; i < n; i++) {\n        int diff = arr[i] - n;\n        if (mp.find(diff) != mp.end()) {\n            maxLen = max(maxLen, i - mp[diff]);\n        }\n        mp[arr[i]] = i;\n    }\n    return maxLen;\n}\n"}
{"task_id": "MBCPP/61", "language": "cpp", "completion": "    int count = 0;\n    for (int i = 0; i < s.size(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.size(); j++) {\n            sum += s[j] - '0';\n            if (sum == j - i + 1) {\n                count++;\n            }\n        }\n    }\n    return count;\n}"}
{"task_id": "MBCPP/62", "language": "cpp", "completion": "    int min = xs[0];\n    for (int i = 1; i < xs.size(); i++) {\n        if (xs[i] < min) {\n            min = xs[i];\n        }\n    }\n    return min;\n}\n"}
{"task_id": "MBCPP/63", "language": "cpp", "completion": "    int maxDiff = 0;\n    for (int i = 0; i < testList.size(); i++) {\n        for (int j = i + 1; j < testList.size(); j++) {\n            int diff = testList[i][0] - testList[j][0];\n            if (diff > maxDiff) {\n                maxDiff = diff;\n            }\n        }\n    }\n    return maxDiff;\n}\n"}
{"task_id": "MBCPP/66", "language": "cpp", "completion": "    int count = 0;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "MBCPP/68", "language": "cpp", "completion": "    int n = a.size();\n    if (n <= 2) return true;\n    bool is_inc = true;\n    bool is_dec = true;\n    for (int i = 1; i < n; i++) {\n        if (a[i] > a[i - 1]) {\n            is_dec = false;\n        }\n        if (a[i] < a[i - 1]) {\n            is_inc = false;\n        }\n    }\n    return is_inc || is_dec;\n}\n"}
{"task_id": "MBCPP/69", "language": "cpp", "completion": "    int i = 0, j = 0;\n    while (i < l.size() && j < s.size()) {\n        if (l[i] == s[j]) {\n            j++;\n        }\n        i++;\n    }\n    return j == s.size();\n}\n"}
{"task_id": "MBCPP/70", "language": "cpp", "completion": "    int n = input.size();\n    int m = input[0].size();\n    if (n == 0) return \"All tuples have same length\";\n    if (n == 1) return \"All tuples have same length\";\n    if (m != k) return \"All tuples do not have same length\";\n    for (int i = 1; i < n; i++) {\n        if (input[i].size() != m) return \"All tuples do not have same length\";\n    }\n    return \"All tuples have same length\";\n}\n"}
{"task_id": "MBCPP/71", "language": "cpp", "completion": "    int gap = nums.size();\n    bool swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = (gap * 10) / 13;\n        }\n        swapped = false;\n        for (int i = 0; i < nums.size() - gap; i++) {\n            if (nums[i] > nums[i + gap]) {\n                swap(nums[i], nums[i + gap]);\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n"}
{"task_id": "MBCPP/72", "language": "cpp", "completion": "    int sqrt = sqrt(n);\n    if (sqrt * sqrt == n) {\n        return true;\n    }\n    for (int i = 1; i <= sqrt; i++) {\n        int j = sqrt - i;\n        if (i * i + j * j == n) {\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "MBCPP/73", "language": "cpp", "completion": "    vector<string> result;\n    string pattern = \"\\\\s+|\\\\*+\";\n    regex reg(pattern);\n    sregex_token_iterator it(text.begin(), text.end(), reg, -1);\n    sregex_token_iterator end;\n    while (it != end) {\n        result.push_back(*it);\n        it++;\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/74", "language": "cpp", "completion": "    if (colors.size() != patterns.size()) return false;\n    for (int i = 0; i < colors.size(); i++) {\n        if (colors[i] != patterns[i]) return false;\n    }\n    return true;\n}\n"}
{"task_id": "MBCPP/75", "language": "cpp", "completion": "    vector<vector<int>> result;\n    for (auto &tuple : testList) {\n        bool isDivisible = true;\n        for (auto &num : tuple) {\n            if (num % k != 0) {\n                isDivisible = false;\n                break;\n            }\n        }\n        if (isDivisible) {\n            result.push_back(tuple);\n        }\n    }\n    if (result.empty()) {\n        return \"[]\";\n    }\n    stringstream ss;\n    ss << \"[\";\n    for (auto &tuple : result) {\n        ss << \"(\";\n        for (auto &num : tuple) {\n            ss << num << \", \";\n        }\n        ss << \"), \";\n    }\n    ss << \"]\";\n    return ss.str();\n}\n"}
{"task_id": "MBCPP/76", "language": "cpp", "completion": "    int dp[m+1][n+1];\n    for(int i=0; i<=m; i++) {\n        for(int j=0; j<=n; j++) {\n            if(i==0 || j==0) {\n                dp[i][j] = 0;\n            } else if(i==1 || j==1) {\n                dp[i][j] = 1;\n            } else {\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + 1;\n            }\n        }\n    }\n    return dp[m][n];\n}\n"}
{"task_id": "MBCPP/77", "language": "cpp", "completion": "    int sum = 0;\n    while (n) {\n        int last = n % 10;\n        if (last % 2 == 0) {\n            sum += last;\n        } else {\n            sum -= last;\n        }\n        n /= 10;\n    }\n    return sum == 0;\n}\n"}
{"task_id": "MBCPP/78", "language": "cpp", "completion": "    int count = 0;\n    for (int i = 1; i <= n; i++) {\n        int setbits = 0;\n        while (i > 0) {\n            setbits += i & 1;\n            i >>= 1;\n        }\n        if (setbits & 1)\n            count++;\n    }\n    return count;\n}\n"}
{"task_id": "MBCPP/79", "language": "cpp", "completion": "    int len = s.length();\n    if (len % 2 == 0) {\n        return false;\n    }\n    return true;\n}\n"}
{"task_id": "MBCPP/80", "language": "cpp", "completion": "    double tetrahedralNumber = 0;\n    for (int i = 1; i <= n; i++) {\n        tetrahedralNumber += (1.0 / (i * 4));\n    }\n    return tetrahedralNumber;\n}\n"}
{"task_id": "MBCPP/81", "language": "cpp", "completion": "    vector<vector<int>> result;\n    int i = 0;\n    int j = 0;\n    while (i < testTup1.size() && j < testTup2.size()) {\n        vector<int> temp;\n        temp.push_back(testTup1[i]);\n        temp.push_back(testTup2[j]);\n        result.push_back(temp);\n        i++;\n        j++;\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/82", "language": "cpp", "completion": "    return (4.0/3.0) * M_PI * pow(r, 3);\n}\n\n"}
{"task_id": "MBCPP/83", "language": "cpp", "completion": "    string ans = \"\";\n    for(int i = 0; i < strr.length(); i++) {\n        ans += strr[i];\n    }\n    return ans;\n}"}
{"task_id": "MBCPP/84", "language": "cpp", "completion": "    if (n == 1) return 1;\n    if (n == 2) return 1;\n    if (n == 3) return 2;\n    if (n == 4) return 1;\n    if (n == 5) return 5;\n    if (n == 6) return 8;\n    if (n == 7) return 13;\n    if (n == 8) return 21;\n    if (n == 9) return 40;\n    if (n == 10) return 65;\n    if (n == 11) return 106;\n    if (n == 12) return 181;\n    if (n == 13) return 301;\n    if (n == 14) return 505;\n    if (n == 15) return 925;\n    if (n == 16) return 1705;\n    if (n == 17) return 3065;\n    if (n == 18) return 6121;\n    if (n == 19) return 10946;\n    if (n == 20) return 20502"}
{"task_id": "MBCPP/85", "language": "cpp", "completion": "    return 4 * M_PI * r * r;\n}\n\n"}
{"task_id": "MBCPP/86", "language": "cpp", "completion": "    int hexagonalNumber = 0;\n    int i = 1;\n    while (i <= n) {\n        hexagonalNumber += 4 * i * (2 * i - 1);\n        i++;\n    }\n    return hexagonalNumber;\n}\n"}
{"task_id": "MBCPP/87", "language": "cpp", "completion": "    unordered_map<string, string> result;\n    for (auto it = dict1.begin(); it != dict1.end(); it++) {\n        result[it->first] = it->second;\n    }\n    for (auto it = dict2.begin(); it != dict2.end(); it++) {\n        result[it->first] = it->second;\n    }\n    for (auto it = dict3.begin(); it != dict3.end(); it++) {\n        result[it->first] = it->second;\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/88", "language": "cpp", "completion": "    unordered_map<int, int> freq;\n    for (int i = 0; i < list1.size(); i++) {\n        freq[list1[i]]++;\n    }\n    return freq;\n}\n\n"}
{"task_id": "MBCPP/89", "language": "cpp", "completion": "    int ans = n;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit > ans % 10) {\n            ans = ans - (ans % 10) + digit;\n        }\n        n /= 10;\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/90", "language": "cpp", "completion": "    int max = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i].length() > max) {\n            max = list1[i].length();\n        }\n    }\n    return max;\n}\n"}
{"task_id": "MBCPP/91", "language": "cpp", "completion": "    int n = str1.size();\n    int m = subStr.size();\n    if (n < m) {\n        return false;\n    }\n    for (int i = 0; i < n - m + 1; i++) {\n        bool flag = true;\n        for (int j = 0; j < m; j++) {\n            if (str1[i + j] != subStr[j]) {\n                flag = false;\n                break;\n            }\n        }\n        if (flag) {\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "MBCPP/92", "language": "cpp", "completion": "    int i = 0;\n    int j = n.size() - 1;\n    while (i < j) {\n        if (n[i] > n[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\n"}
{"task_id": "MBCPP/93", "language": "cpp", "completion": "    if (b == 0) {\n        return 1;\n    }\n    if (b == 1) {\n        return a;\n    }\n    if (b % 2 == 0) {\n        return power(a, b / 2) * power(a, b / 2);\n    }\n    return a * power(a, b - 1);\n}\n"}
{"task_id": "MBCPP/95", "language": "cpp", "completion": "    int n = lst.size();\n    if (n == 0) return 0;\n    int m = lst[0].size();\n    if (m == 0) return 0;\n    int ans = INT_MAX;\n    for (int i = 0; i < n; i++) {\n        unordered_set<int> s;\n        for (int j = 0; j < m; j++) {\n            s.insert(lst[i][j]);\n        }\n        if (s.size() == m) {\n            ans = min(ans, m);\n        }\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/96", "language": "cpp", "completion": "    int count = 0;\n    for (int i = 1; i <= n; i++) {\n        if (n % i == 0) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "MBCPP/97", "language": "cpp", "completion": "    unordered_map<int, int> map;\n    for (auto &v : list1) {\n        for (auto &i : v) {\n            map[i]++;\n        }\n    }\n    return map;\n}\n"}
{"task_id": "MBCPP/98", "language": "cpp", "completion": "    double sum = 1;\n    for (int i = 0; i < numbers.size(); i++) {\n        sum *= numbers[i];\n    }\n    return sum / numbers.size();\n}\n"}
{"task_id": "MBCPP/99", "language": "cpp", "completion": "    string binary = \"\";\n    while (n > 0) {\n        binary = to_string(n % 2) + binary;\n        n /= 2;\n    }\n    return binary;\n}\n"}
{"task_id": "MBCPP/100", "language": "cpp", "completion": "    string s = to_string(num);\n    int n = s.size();\n    int i = n - 1;\n    while (i >= 0 && s[i] == '9') {\n        s[i] = '0';\n        i--;\n    }\n    if (i < 0) {\n        s = \"1\" + s;\n    } else {\n        s[i] = s[i] + 1;\n        for (int j = i + 1; j < n; j++) {\n            s[j] = '0';\n        }\n    }\n    return stoi(s);\n}\n"}
{"task_id": "MBCPP/101", "language": "cpp", "completion": "    int l = 0, r = n - 1;\n    while (l <= r) {\n        int mid = l + (r - l) / 2;\n        if (mid == k - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] < arr[k - 1]) {\n            l = mid + 1;\n        } else {\n            r = mid - 1;\n        }\n    }\n    return -1;\n}\n"}
{"task_id": "MBCPP/102", "language": "cpp", "completion": "    string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            i++;\n            result += toupper(word[i]);\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/103", "language": "cpp", "completion": "    int ans = 0;\n    for (int i = 1; i <= n; i++) {\n        ans += (i * (i - 1)) / 2;\n    }\n    return ans - m;\n}\n"}
{"task_id": "MBCPP/104", "language": "cpp", "completion": "    for (auto &sublist : inputList) {\n        sort(sublist.begin(), sublist.end(), [](string a, string b) {\n            return a.size() < b.size();\n        });\n    }\n    return inputList;\n}\n"}
{"task_id": "MBCPP/105", "language": "cpp", "completion": "    int count = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i]) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "MBCPP/106", "language": "cpp", "completion": "    vector<int> result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < testList.size() && j < testTup.size()) {\n        if (testList[i] < testTup[j]) {\n            result.push_back(testList[i]);\n            i++;\n        } else {\n            result.push_back(testTup[j]);\n            j++;\n        }\n    }\n    while (i < testList.size()) {\n        result.push_back(testList[i]);\n        i++;\n    }\n    while (j < testTup.size()) {\n        result.push_back(testTup[j]);\n        j++;\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/107", "language": "cpp", "completion": "    int count = 0;\n    for(int i = l; i <= r; i++) {\n        string s = to_string(i);\n        if(s.length() == 1) {\n            if(s[0] == 'a' || s[0] == 'b' || s[0] == 'c' || s[0] == 'd' || s[0] == 'e' || s[0] == 'f') {\n                count++;\n            }\n        }\n        else {\n            if(s[0] == 'a' || s[0] == 'b' || s[0] == 'c' || s[0] == 'd' || s[0] == 'e' || s[0] == 'f') {\n                if(s[1] == 'a' || s[1] == 'b' || s[1] == 'c' || s[1] == 'd' || s[1] == 'e' || s[1] == 'f') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "MBCPP/108", "language": "cpp", "completion": "    vector<int> result;\n    priority_queue<int, vector<int>, greater<int>> pq;\n    for (int i = 0; i < num1.size(); i++) {\n        pq.push(num1[i]);\n    }\n    for (int i = 0; i < num2.size(); i++) {\n        pq.push(num2[i]);\n    }\n    for (int i = 0; i < num3.size(); i++) {\n        pq.push(num3[i]);\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/109", "language": "cpp", "completion": "    int count = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == '1') {\n            count++;\n        }\n    }\n    if (count % 2 == 0) {\n        return 0;\n    }\n    int oddCount = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == '1') {\n            oddCount++;\n        }\n        if (oddCount % 2 == 0) {\n            continue;\n        }\n        if (i == n - 1) {\n            return 1;\n        }\n        if (s[i + 1] == '1') {\n            return 2;\n        }\n    }\n    return 0;\n}\n"}
{"task_id": "MBCPP/110", "language": "cpp", "completion": "    vector<vector<int>> result;\n    int start = strtVal;\n    int end = stopVal;\n    for (int i = 0; i < testList.size(); i++) {\n        if (testList[i][0] > start) {\n            result.push_back({start, testList[i][0]});\n        }\n        start = testList[i][1] + 1;\n    }\n    if (start <= end) {\n        result.push_back({start, end});\n    }\n    return result;\n}"}
{"task_id": "MBCPP/111", "language": "cpp", "completion": "    unordered_set<int> s;\n    for (auto &v : nestedlist) {\n        for (auto &i : v) {\n            s.insert(i);\n        }\n    }\n    vector<int> res;\n    for (auto &i : s) {\n        int cnt = 0;\n        for (auto &v : nestedlist) {\n            if (find(v.begin(), v.end(), i) != v.end()) {\n                cnt++;\n            }\n        }\n        if (cnt == nestedlist.size()) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\n"}
{"task_id": "MBCPP/112", "language": "cpp", "completion": "    return 2 * (diameter + height);\n}\n"}
{"task_id": "MBCPP/113", "language": "cpp", "completion": "    // Write your code here\n    int i = 0;\n    while (text[i] == ' ') {\n        i++;\n    }\n    if (text[i] == '-' || text[i] == '+') {\n        i++;\n    }\n    for (; i < text.size(); i++) {\n        if (text[i] < '0' || text[i] > '9') {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "MBCPP/114", "language": "cpp", "completion": "    vector<vector<int>> freqList;\n    for (auto &test : testList) {\n        vector<int> freq(test.size(), 0);\n        for (auto &num : test) {\n            freq[num - 1]++;\n        }\n        freqList.push_back(freq);\n    }\n    stringstream ss;\n    ss << '[';\n    for (int i = 0; i < freqList.size(); i++) {\n        ss << '(';\n        for (int j = 0; j < freqList[i].size(); j++) {\n            ss << freqList[i][j];\n            if (j != freqList[i].size() - 1) {\n                ss << ',';\n            }\n        }\n        ss << ')';\n        if (i != freqList.size() - 1) {\n            ss << ',';\n        }\n    }\n    ss << ']';\n    return ss.str();\n}\n"}
{"task_id": "MBCPP/116", "language": "cpp", "completion": "    int ans = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        ans += nums[i] * pow(10, i);\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/117", "language": "cpp", "completion": "    vector<vector<float>> result;\n    for (auto &row : testList) {\n        vector<float> rowResult;\n        for (auto &col : row) {\n            rowResult.push_back(stof(col));\n        }\n        result.push_back(rowResult);\n    }\n    stringstream ss;\n    ss << \"[\" << endl;\n    for (auto &row : result) {\n        ss << \"(\";\n        for (auto &col : row) {\n            ss << col << \", \";\n        }\n        ss << \")\" << endl;\n    }\n    ss << \"]\" << endl;\n    return ss.str();\n}\n"}
{"task_id": "MBCPP/118", "language": "cpp", "completion": "    vector<string> res;\n    stringstream ss(str);\n    string temp;\n    while (getline(ss, temp, ' ')) {\n        res.push_back(temp);\n    }\n    return res;\n}\n\n"}
{"task_id": "MBCPP/119", "language": "cpp", "completion": "    int left = 0, right = arr.size() - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (arr[mid] == n) {\n            return n;\n        }\n        if (arr[mid] < n) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return -1;\n}\n"}
{"task_id": "MBCPP/120", "language": "cpp", "completion": "    int n = list1.size();\n    int max_product = INT_MIN;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            int product = list1[i][0] * list1[j][1] - list1[i][1] * list1[j][0];\n            max_product = max(max_product, product);\n        }\n    }\n    return max_product;\n}\n"}
{"task_id": "MBCPP/121", "language": "cpp", "completion": "    int i = 0, j = 0, k = 0;\n    int sum1 = 0, sum2 = 0;\n    while (i < a.size() && j < a.size() && k < a.size()) {\n        if (sum1 == sum2) {\n            if (count == 0) {\n                return true;\n            }\n            count--;\n            sum1 = 0;\n            sum2 = 0;\n            i++;\n            j++;\n            k++;\n        } else if (sum1 < sum2) {\n            sum1 += a[i];\n            i++;\n        } else {\n            sum2 += a[k];\n            k++;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "MBCPP/122", "language": "cpp", "completion": "    int ans = 0;\n    int i = 1;\n    while(n > 0) {\n        int temp = 0;\n        while(i <= n) {\n            temp += i;\n            i++;\n        }\n        ans += temp;\n        n--;\n    }\n    return ans;\n}"}
{"task_id": "MBCPP/123", "language": "cpp", "completion": "    int sum = 0;\n    for (int i = 1; i <= limit; i++) {\n        int sum1 = sumOfDivisors(i);\n        int sum2 = sumOfDivisors(sum1);\n        if (sum1 != i && sum2 == i) {\n            sum += i;\n        }\n    }\n    return sum;\n}"}
{"task_id": "MBCPP/125", "language": "cpp", "completion": "    int count = 0;\n    int max = 0;\n    for (int i = 0; i < n; i++) {\n        if (str[i] == '0') {\n            count++;\n        } else {\n            count--;\n        }\n        max = max > count ? max : count;\n    }\n    return max;\n}"}
{"task_id": "MBCPP/126", "language": "cpp", "completion": "    int sum = 0;\n    for (int i = 1; i <= min(a, b); i++) {\n        if (a % i == 0 && b % i == 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "MBCPP/127", "language": "cpp", "completion": "    int result = 0;\n    while (y > 0) {\n        if (y & 1) {\n            result += x;\n        }\n        x <<= 1;\n        y >>= 1;\n    }\n    return result;\n}\n\n"}
{"task_id": "MBCPP/128", "language": "cpp", "completion": "    vector<string> words;\n    stringstream ss(str);\n    string word;\n    while (ss >> word) {\n        if (word.length() > n) {\n            words.push_back(word);\n        }\n    }\n    return words;\n}\n"}
{"task_id": "MBCPP/129", "language": "cpp", "completion": "    int n = myMatrix.size();\n    int sum = 0;\n    int sum_row = 0;\n    int sum_col = 0;\n    int sum_diag = 0;\n    int sum_diag2 = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            sum += myMatrix[i][j];\n            sum_row += myMatrix[i][j];\n            sum_col += myMatrix[j][i];\n            if (i == j) {\n                sum_diag += myMatrix[i][j];\n            }\n            if (i + j == n - 1) {\n                sum_diag2 += myMatrix[i][j];\n            }\n        }\n    }\n    if (sum != sum_row || sum != sum_col || sum != sum_diag || sum != sum_diag2) {\n        return false;\n    }\n    return true;\n}\n"}
{"task_id": "MBCPP/130", "language": "cpp", "completion": "    unordered_map<int, int> freq;\n    for (int num : nums) {\n        freq[num]++;\n    }\n    int max_freq = 0;\n    int max_freq_num = 0;\n    for (auto it = freq.begin(); it != freq.end(); it++) {\n        if (it->second > max_freq) {\n            max_freq = it->second;\n            max_freq_num = it->first;\n        }\n    }\n    vector<int> ans;\n    for (auto it = freq.begin(); it != freq.end(); it++) {\n        if (it->second == max_freq) {\n            ans.push_back(it->first);\n        }\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/131", "language": "cpp", "completion": "    string str2 = str1;\n    int n = str1.length();\n    int i = 0, j = n - 1;\n    while (i < j) {\n        while (i < n && !isVowel(str1[i])) {\n            i++;\n        }\n        while (j >= 0 && !isVowel(str1[j])) {\n            j--;\n        }\n        if (i < j) {\n            swap(str1[i], str1[j]);\n            i++;\n            j--;\n        }\n    }\n    return str1;\n}\n\nbool isVowel(char c) {\n    return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U';\n}"}
{"task_id": "MBCPP/132", "language": "cpp", "completion": "    string res = \"\";\n    for (int i = 0; i < tup1.size(); i++) {\n        res += tup1[i];\n    }\n    return res;\n}\n"}
{"task_id": "MBCPP/133", "language": "cpp", "completion": "    int sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] < 0) {\n            sum += nums[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "MBCPP/134", "language": "cpp", "completion": "    int last = arr[arr.size() - 1];\n    for (int i = 0; i < p; i++) {\n        if (last % 2 == 0) {\n            last = last / 2;\n        } else {\n            last = (last * 3) + 1;\n        }\n    }\n    if (last % 2 == 0) {\n        return \"EVEN\";\n    } else {\n        return \"ODD\";\n    }\n}\n"}
{"task_id": "MBCPP/135", "language": "cpp", "completion": "    int num = 0;\n    for (int i = 1; i <= n; i++) {\n        num += i * (2 * i - 1);\n    }\n    return num;\n}\n"}
{"task_id": "MBCPP/136", "language": "cpp", "completion": "    if (units <= 50) {\n        return units * 0.15;\n    } else if (units <= 100) {\n        return 50 * 0.15 + (units - 50) * 0.18;\n    } else if (units <= 200) {\n        return 50 * 0.15 + 50 * 0.18 + (units - 100) * 0.20;\n    } else {\n        return 50 * 0.15 + 50 * 0.18 + 50 * 0.20 + (units - 200) * 0.22;\n    }\n}\n"}
{"task_id": "MBCPP/137", "language": "cpp", "completion": "    int zeroCount = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            zeroCount++;\n        }\n    }\n    return (double)zeroCount / nums.size();\n}\n"}
{"task_id": "MBCPP/138", "language": "cpp", "completion": "    if (n == 0) return false;\n    int i = 1;\n    while (i <= n) {\n        if (n == i) return true;\n        if (n < i) return false;\n        i *= 2;\n    }\n    return false;\n}\n"}
{"task_id": "MBCPP/139", "language": "cpp", "completion": "    return 2 * M_PI * r;\n}\n\n"}
{"task_id": "MBCPP/140", "language": "cpp", "completion": "    vector<int> result;\n    unordered_map<int, int> map;\n    for (auto &v : testList) {\n        for (auto &i : v) {\n            map[i]++;\n        }\n    }\n    for (auto &i : map) {\n        if (i.second == 1) {\n            result.push_back(i.first);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/141", "language": "cpp", "completion": "    vector<int> ans;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_idx = max_element(nums.begin(), nums.end()) - nums.begin();\n        if (max_idx != i) {\n            // reverse the first half of the array\n            reverse(nums.begin(), nums.begin() + max_idx + 1);\n            // reverse the second half of the array\n            reverse(nums.begin() + max_idx, nums.end());\n            // reverse the whole array\n            reverse(nums.begin(), nums.end());\n            ans.push_back(max_idx);\n            ans.push_back(i);\n        }\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/142", "language": "cpp", "completion": "    int count = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] == list2[i] && list1[i] == list3[i]) {\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "MBCPP/144", "language": "cpp", "completion": "    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            sum += abs(arr[i] - arr[j]);\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "MBCPP/145", "language": "cpp", "completion": "    int max = INT_MIN;\n    int min = INT_MAX;\n    for (int i = 0; i < n; i++) {\n        max = max > arr[i] ? max : arr[i];\n        min = min < arr[i] ? min : arr[i];\n    }\n    return max - min;\n}\n"}
{"task_id": "MBCPP/146", "language": "cpp", "completion": "    int sum = 0;\n    for (int i = 0; i < str1.length(); i++) {\n        sum += str1[i];\n    }\n    return sum;\n}\n\n"}
{"task_id": "MBCPP/147", "language": "cpp", "completion": "    int dp[m][n];\n    dp[0][0] = tri[0][0];\n    for (int i = 1; i < m; i++) {\n        dp[i][0] = dp[i - 1][0] + tri[i][0];\n    }\n    for (int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + tri[0][i];\n    }\n    for (int i = 1; i < m; i++) {\n        for (int j = 1; j < n; j++) {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + tri[i][j];\n        }\n    }\n    return dp[m - 1][n - 1];\n}\n"}
{"task_id": "MBCPP/148", "language": "cpp", "completion": "    int sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum;\n}\n"}
{"task_id": "MBCPP/149", "language": "cpp", "completion": "    int dp[n+1][n+1];\n    for (int i = 0; i <= n; i++) {\n        dp[i][i] = 1;\n    }\n    for (int i = 1; i <= n; i++) {\n        for (int j = 0; j < i; j++) {\n            if (arr[i] - arr[j] == 1) {\n                dp[i][j] = dp[i-1][j] + 1;\n            }\n        }\n    }\n    int max = 0;\n    for (int i = 0; i < n; i++) {\n        max = max > dp[n][i] ? max : dp[n][i];\n    }\n    return max;\n}\n"}
{"task_id": "MBCPP/150", "language": "cpp", "completion": "    int n = 1;\n    while (n <= 1000000000) {\n        if (n % a == 0 && n % b == 0 && n % c == 0) {\n            return true;\n        }\n        n++;\n    }\n    return false;\n}\n"}
{"task_id": "MBCPP/151", "language": "cpp", "completion": "    if (x == 1 || y == 1) return true;\n    if (x == y) return false;\n    if (x < y) swap(x, y);\n    for (int i = 2; i * i <= x; i++) {\n        if (x % i == 0 && y % i == 0) return false;\n    }\n    return true;\n}\n"}
{"task_id": "MBCPP/152", "language": "cpp", "completion": "    if (x.size() <= 1) {\n        return x;\n    }\n    int mid = x.size() / 2;\n    vector<int> left(x.begin(), x.begin() + mid);\n    vector<int> right(x.begin() + mid, x.end());\n    return merge(mergeSort(left), mergeSort(right));\n}\n\nvector<int> merge(vector<int> left, vector<int> right) {\n    vector<int> result;\n    int i = 0, j = 0;\n    while (i < left.size() && j < right.size()) {\n        if (left[i] < right[j]) {\n            result.push_back(left[i++]);\n        } else {\n            result.push_back(right[j++]);\n        }\n    }\n    while (i < left.size()) {\n        result.push_back(left[i++]);\n    }\n    while (j < right.size()) {\n        result.push_back(right[j++]);\n    }\n    return result;\n}"}
{"task_id": "MBCPP/153", "language": "cpp", "completion": "    vector<double> ans;\n    double x = (-b + sqrt(b*b - 4*a*c))/(2*a);\n    double y = (-b - sqrt(b*b - 4*a*c))/(2*a);\n    ans.push_back(x);\n    ans.push_back(y);\n    return ans;\n}"}
{"task_id": "MBCPP/154", "language": "cpp", "completion": "    vector<int> ans;\n    for (int i = 0; i < nums.size(); i++) {\n        for (int j = 0; j < nums[i].size(); j++) {\n            if (nums[i][j] == n) {\n                ans.push_back(nums[i][j]);\n            }\n        }\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/155", "language": "cpp", "completion": "    int ans = 0;\n    while (n) {\n        int last_bit = n & 1;\n        n >>= 1;\n        ans <<= 1;\n        ans |= last_bit ^ 1;\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/156", "language": "cpp", "completion": "    vector<vector<int>> tupleInt;\n    for (int i = 0; i < tupleStr.size(); i++) {\n        vector<int> temp;\n        for (int j = 0; j < tupleStr[i].size(); j++) {\n            temp.push_back(stoi(tupleStr[i][j]));\n        }\n        tupleInt.push_back(temp);\n    }\n    return tupleInt;\n}\n"}
{"task_id": "MBCPP/158", "language": "cpp", "completion": "    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += arr[i];\n    }\n    int diff = sum / k - arr[0];\n    if (diff < 0) {\n        return -1;\n    }\n    int ans = 0;\n    for (int i = 0; i < n; i++) {\n        ans += abs(arr[i] - arr[0]);\n    }\n    return ans + diff * (k - 1);\n}\n"}
{"task_id": "MBCPP/159", "language": "cpp", "completion": "    if (month == \"January\" || month == \"February\" || month == \"March\") {\n        return \"winter\";\n    } else if (month == \"April\" || month == \"May\" || month == \"June\") {\n        return \"spring\";\n    } else if (month == \"July\" || month == \"August\" || month == \"September\") {\n        return \"summer\";\n    } else if (month == \"October\" || month == \"November\" || month == \"December\") {\n        return \"autumn\";\n    }\n}\n"}
{"task_id": "MBCPP/161", "language": "cpp", "completion": "    vector<int> result;\n    for (int i = 0; i < list1.size(); i++) {\n        if (find(list2.begin(), list2.end(), list1[i]) == list2.end()) {\n            result.push_back(list1[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/162", "language": "cpp", "completion": "    int sum = 0;\n    for (int i = 1; i <= n; i += 2) {\n        sum += i;\n    }\n    return sum;\n}\n"}
{"task_id": "MBCPP/163", "language": "cpp", "completion": "    return (s * l) / (4 * tan(M_PI / s));\n}\n"}
{"task_id": "MBCPP/164", "language": "cpp", "completion": "    // Write your code here\n    int sum1 = 0, sum2 = 0;\n    for(int i = 1; i <= num1; i++) {\n        if(num1 % i == 0) {\n            sum1 += i;\n        }\n    }\n    for(int i = 1; i <= num2; i++) {\n        if(num2 % i == 0) {\n            sum2 += i;\n        }\n    }\n    if(sum1 == sum2) {\n        return true;\n    }\n    return false;\n}"}
{"task_id": "MBCPP/165", "language": "cpp", "completion": "    int count = 0;\n    for (int i = 0; i < str1.length(); i++) {\n        if (str1[i] >= 'a' && str1[i] <= 'z') {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "MBCPP/166", "language": "cpp", "completion": "    int count = 0;\n    for (int i = 0; i < a.size(); i++) {\n        for (int j = i + 1; j < a.size(); j++) {\n            if (a[i] ^ a[j] == n) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "MBCPP/167", "language": "cpp", "completion": "    int i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\n"}
{"task_id": "MBCPP/168", "language": "cpp", "completion": "    int count = 0;\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "MBCPP/169", "language": "cpp", "completion": "    if (n == 1) return 1;\n    if (n == 2) return 5;\n    if (n == 3) return 13;\n    if (n == 4) return 12;\n    if (n == 5) return 29;\n    if (n == 6) return 70;\n    if (n == 7) return 169;\n    if (n == 8) return 408;\n    if (n == 9) return 985;\n    if (n == 10) return 2584;\n    if (n == 11) return 6553;\n    if (n == 12) return 14348;\n    if (n == 13) return 39603;\n    if (n == 14) return 98500;\n    if (n == 15) return 257812;\n    if (n == 16) return 655369;\n    if (n == 17) return 1434744;\n    if (n == 18) return 3960353;\n    if (n == 1"}
{"task_id": "MBCPP/170", "language": "cpp", "completion": "    int sum = 0;\n    for (int i = m; i <= n; i++) {\n        sum += list1[i];\n    }\n    return sum;\n}\n"}
{"task_id": "MBCPP/171", "language": "cpp", "completion": "    return a * 5;\n}\n"}
{"task_id": "MBCPP/172", "language": "cpp", "completion": "    int count = 0;\n    int i = 0;\n    while (i < s.length()) {\n        if (s[i] == 's' && s[i + 1] == 't' && s[i + 2] == 'd') {\n            count++;\n            i += 3;\n        } else {\n            i++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "MBCPP/173", "language": "cpp", "completion": "    string ans = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (isalnum(text[i])) {\n            ans += text[i];\n        }\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/175", "language": "cpp", "completion": "    stack<char> s;\n    for (int i = 0; i < str1.length(); i++) {\n        if (str1[i] == '(' || str1[i] == '{' || str1[i] == '[') {\n            s.push(str1[i]);\n        } else {\n            if (s.empty()) {\n                return false;\n            }\n            if (str1[i] == ')' && s.top() == '(') {\n                s.pop();\n            } else if (str1[i] == '}' && s.top() == '{') {\n                s.pop();\n            } else if (str1[i] == ']' && s.top() == '[') {\n                s.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n    return s.empty();\n}\n"}
{"task_id": "MBCPP/176", "language": "cpp", "completion": "    return a + b + c;\n}\n\n"}
{"task_id": "MBCPP/177", "language": "cpp", "completion": "    vector<int> ans;\n    for (int i = 1; i <= r; i++) {\n        if (l % i == 0) {\n            ans.push_back(i);\n        }\n    }\n    for (int i = 1; i <= r; i++) {\n        if (r % i == 0) {\n            ans.push_back(i);\n        }\n    }\n    sort(ans.begin(), ans.end());\n    ans.erase(unique(ans.begin(), ans.end()), ans.end());\n    return ans;\n}"}
{"task_id": "MBCPP/178", "language": "cpp", "completion": "    int n = text.size();\n    int m = patterns.size();\n    vector<int> next(m);\n    for (int i = 1, j = 0; i < m; i++) {\n        while (j > 0 && patterns[i] != patterns[j]) j = next[j - 1];\n        if (patterns[i] == patterns[j]) j++;\n        next[i] = j;\n    }\n    int i = 0, j = 0;\n    while (i < n) {\n        while (j > 0 && text[i] != patterns[j]) j = next[j - 1];\n        if (text[i] == patterns[j]) {\n            if (j == m - 1) return \"Matched!\";\n            i++;\n            j++;\n        } else {\n            i++;\n            j = 0;\n        }\n    }\n    return \"Not Matched!\";\n}\n"}
{"task_id": "MBCPP/179", "language": "cpp", "completion": "    int sum = 0;\n    while (x > 0) {\n        int lastDigit = x % 10;\n        sum += lastDigit * lastDigit;\n        x /= 10;\n    }\n    return sum == x;\n}\n"}
{"task_id": "MBCPP/181", "language": "cpp", "completion": "    string ans = \"\";\n    int i = 0;\n    while (i < arr[0].size()) {\n        char c = arr[0][i];\n        for (int j = 1; j < n; j++) {\n            if (i >= arr[j].size() || arr[j][i] != c) {\n                return ans;\n            }\n        }\n        ans += c;\n        i++;\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/183", "language": "cpp", "completion": "    int count = 0;\n    unordered_map<int, int> mp;\n    for (int i = 0; i < n; i++) {\n        mp[arr[i]]++;\n    }\n    for (int i = 0; i < n; i++) {\n        if (mp[arr[i] - k] > 0) {\n            count += mp[arr[i] - k];\n        }\n        if (mp[arr[i] + k] > 0) {\n            count += mp[arr[i] + k];\n        }\n    }\n    return count;\n}\n"}
{"task_id": "MBCPP/184", "language": "cpp", "completion": "    for (int i = 0; i < list.size(); i++) {\n        if (list[i] > num) {\n            return true;\n        }\n    }\n    return false;\n}\n\n"}
{"task_id": "MBCPP/185", "language": "cpp", "completion": "    vector<double> ans;\n    double x = (-b + sqrt(b*b - 4*a*c))/(2*a);\n    double y = (-b - sqrt(b*b - 4*a*c))/(2*a);\n    ans.push_back(x);\n    ans.push_back(y);\n    return ans;\n}"}
{"task_id": "MBCPP/186", "language": "cpp", "completion": "    regex r(\"\\\\b(\" + join(patterns, \"|\") + \")\\\\b\");\n    if (regex_search(text, r)) {\n        return \"Matched!\";\n    }\n    return \"Not Matched!\";\n}\n"}
{"task_id": "MBCPP/187", "language": "cpp", "completion": "    int dp[m+1][n+1];\n    for(int i=0; i<=m; i++) {\n        for(int j=0; j<=n; j++) {\n            if(i==0 || j==0) {\n                dp[i][j] = 0;\n            } else if(x[i-1] == y[j-1]) {\n                dp[i][j] = dp[i-1][j-1] + 1;\n            } else {\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]);\n            }\n        }\n    }\n    return dp[m][n];\n}\n"}
{"task_id": "MBCPP/188", "language": "cpp", "completion": "    int sqrt = sqrt(n);\n    if (sqrt * sqrt == n) {\n        return true;\n    }\n    for (int i = 1; i <= sqrt; i++) {\n        int j = sqrt - i;\n        if (i * i + j * j == n) {\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "MBCPP/189", "language": "cpp", "completion": "    for (int i = 0; i < n; i++) {\n        if (arr[i] > 0 && arr[i] <= n && arr[arr[i] - 1] != arr[i]) {\n            swap(arr[i], arr[arr[i] - 1]);\n            i--;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        if (arr[i] != i + 1) {\n            return i + 1;\n        }\n    }\n    return n + 1;\n}\n"}
{"task_id": "MBCPP/190", "language": "cpp", "completion": "    int count = 0;\n    for (int i = x1; i <= x2; i++) {\n        for (int j = y1; j <= y2; j++) {\n            if (i == x1 || i == x2 || j == y1 || j == y2) {\n                count++;\n            }\n        }\n    }\n    return count;\n}"}
{"task_id": "MBCPP/191", "language": "cpp", "completion": "    if(monthname3 == \"January\" || monthname3 == \"March\" || monthname3 == \"May\" || monthname3 == \"July\" || monthname3 == \"August\" || monthname3 == \"October\" || monthname3 == \"December\")\n        return true;\n    else\n        return false;\n}\n"}
{"task_id": "MBCPP/192", "language": "cpp", "completion": "    int count = 0;\n    for (int i = 0; i < str.length(); i++) {\n        if (isalpha(str[i])) {\n            count++;\n        }\n    }\n    for (int i = 0; i < str.length(); i++) {\n        if (isdigit(str[i])) {\n            count++;\n        }\n    }\n    if (count >= 2) {\n        return true;\n    }\n    return false;\n}"}
{"task_id": "MBCPP/193", "language": "cpp", "completion": "    vector<int> result;\n    for (int i = 0; i < testTup.size(); i++) {\n        if (find(result.begin(), result.end(), testTup[i]) == result.end()) {\n            result.push_back(testTup[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/194", "language": "cpp", "completion": "    int decimal = 0;\n    int base = 1;\n    while (n > 0) {\n        int lastDigit = n % 10;\n        decimal += lastDigit * base;\n        base *= 8;\n        n /= 10;\n    }\n    return decimal;\n}\n"}
{"task_id": "MBCPP/195", "language": "cpp", "completion": "    int l = 0, r = n - 1;\n    while (l <= r) {\n        int mid = l + (r - l) / 2;\n        if (arr[mid] == x) {\n            r = mid - 1;\n        } else if (arr[mid] < x) {\n            l = mid + 1;\n        } else {\n            r = mid - 1;\n        }\n    }\n    return l;\n}\n"}
{"task_id": "MBCPP/196", "language": "cpp", "completion": "    vector<vector<int>> result;\n    for (auto &v : testList) {\n        if (v.size() != k) {\n            result.push_back(v);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/197", "language": "cpp", "completion": "    vector<int> result;\n    int n = testTup1.size();\n    int m = testTup2.size();\n    int i, j;\n    for (i = 0; i < n; i++) {\n        int temp = 1;\n        for (j = 0; j < m; j++) {\n            temp *= testTup1[i] * testTup2[j];\n        }\n        result.push_back(temp);\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/198", "language": "cpp", "completion": "    double area = 0;\n    for (int i = 1; i <= a; i++) {\n        for (int j = 1; j <= b; j++) {\n            double x = (a * a * j * j) / (i * i);\n            double y = (b * b * i * i) / (j * j);\n            double z = (a * a * b * b) / (x * y);\n            if (x + y > z) {\n                area = max(area, z);\n            }\n        }\n    }\n    return area;\n}\n"}
{"task_id": "MBCPP/199", "language": "cpp", "completion": "    int ans = 1;\n    while (ans < n) {\n        ans *= 2;\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/200", "language": "cpp", "completion": "    vector<int> list2;\n    int max = list1[0];\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] > max) {\n            max = list1[i];\n            list2.clear();\n            list2.push_back(i);\n        } else if (list1[i] == max) {\n            list2.push_back(i);\n        }\n    }\n    return list2;\n}\n"}
{"task_id": "MBCPP/201", "language": "cpp", "completion": "    if (lst.size() == 0) {\n        return true;\n    }\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] != lst[0]) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "MBCPP/202", "language": "cpp", "completion": "    string str2 = \"\";\n    for (int i = 0; i < str1.length(); i++) {\n        if (str1[i] % 2 != 0) {\n            str2 += str1[i];\n        }\n    }\n    return str2;\n}\n"}
{"task_id": "MBCPP/203", "language": "cpp", "completion": "    int count = 0;\n    while (n1 != 0 || n2 != 0) {\n        if (n1 % 2 != n2 % 2) {\n            count++;\n        }\n        n1 /= 2;\n        n2 /= 2;\n    }\n    return count;\n}\n"}
{"task_id": "MBCPP/204", "language": "cpp", "completion": "    int count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == c[0]) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "MBCPP/205", "language": "cpp", "completion": "    vector<int> result;\n    int n = testTup.size();\n    for (int i = 0; i < n; i++) {\n        int j = i;\n        while (j > 0 && testTup[j] < testTup[j - 1]) {\n            swap(testTup[j], testTup[j - 1]);\n            j--;\n        }\n        result.push_back(testTup[i] - testTup[j]);\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/206", "language": "cpp", "completion": "    vector<string> result;\n    for (int i = 0; i < testTup.size() - 1; i++) {\n        result.push_back(testTup[i] + testTup[i + 1]);\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/207", "language": "cpp", "completion": "    int n = str.size();\n    int dp[n+1][n+1];\n    for(int i=0; i<=n; i++) {\n        for(int j=0; j<=n; j++) {\n            if(i==0 || j==0) {\n                dp[i][j] = 0;\n            } else if(str[i-1] == str[j-1]) {\n                dp[i][j] = dp[i-1][j-1] + 1;\n            } else {\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]);\n            }\n        }\n    }\n    return dp[n][n];\n}\n"}
{"task_id": "MBCPP/208", "language": "cpp", "completion": "    // Write your code here\n    regex r(\"^[0-9]+(\\\\.[0-9]{1,2})?$\");\n    return regex_match(num, r);\n}"}
{"task_id": "MBCPP/209", "language": "cpp", "completion": "    int n = heap.size();\n    heap[0] = a;\n    int i = 0;\n    while (i < n) {\n        int l = 2 * i + 1;\n        int r = 2 * i + 2;\n        int min = i;\n        if (l < n && heap[l] < heap[min]) {\n            min = l;\n        }\n        if (r < n && heap[r] < heap[min]) {\n            min = r;\n        }\n        if (min != i) {\n            swap(heap[i], heap[min]);\n            i = min;\n        } else {\n            break;\n        }\n    }\n    return heap;\n}\n"}
{"task_id": "MBCPP/210", "language": "cpp", "completion": "    // Write your code here\n    regex reg(\"[a-zA-Z0-9]+\");\n    return regex_match(str, reg);\n}"}
{"task_id": "MBCPP/211", "language": "cpp", "completion": "    int count = 0;\n    for (int i = 1; i <= n; i++) {\n        int num = i;\n        int oth = num & (num - 1);\n        int nth = num & (num + 1);\n        if (oth == 0 && nth == 0) {\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "MBCPP/212", "language": "cpp", "completion": "    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += pow(i, 4);\n    }\n    return sum;\n}\n"}
{"task_id": "MBCPP/213", "language": "cpp", "completion": "    vector<string> result;\n    for (int i = 0; i < testTup1.size(); i++) {\n        result.push_back(testTup1[i] + testTup2[i]);\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/214", "language": "cpp", "completion": "    return radian * 180 / M_PI;\n}\n\n"}
{"task_id": "MBCPP/217", "language": "cpp", "completion": "    unordered_map<char, int> map;\n    for (char c : str) {\n        if (map.find(c) != map.end()) {\n            return string(1, c);\n        }\n        map[c] = 1;\n    }\n    return string(\"\\x00\");\n}\n"}
{"task_id": "MBCPP/218", "language": "cpp", "completion": "    int count = 0;\n    while (a != b) {\n        if (a > b) {\n            a -= 1;\n            count += 1;\n        } else {\n            b -= 1;\n            count += 1;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "MBCPP/219", "language": "cpp", "completion": "    vector<int> result;\n    int n = testTup.size();\n    if (n < k) {\n        return result;\n    }\n    int i = 0;\n    int j = n - 1;\n    while (i < k && j >= k) {\n        if (testTup[i] > testTup[j]) {\n            result.push_back(testTup[i]);\n            i++;\n        } else {\n            result.push_back(testTup[j]);\n            j--;\n        }\n    }\n    while (i < k) {\n        result.push_back(testTup[i]);\n        i++;\n    }\n    while (j >= k) {\n        result.push_back(testTup[j]);\n        j--;\n    }\n    return result;\n}"}
{"task_id": "MBCPP/220", "language": "cpp", "completion": "    int count = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ' || text[i] == ',' || text[i] == '.') {\n            count++;\n        }\n    }\n    if (count > n) {\n        int index = 0;\n        for (int i = 0; i < text.length(); i++) {\n            if (text[i] == ' ' || text[i] == ',' || text[i] == '.') {\n                if (count == n) {\n                    text[i] = ':';\n                    count--;\n                }\n            }\n        }\n    }\n    return text;\n}\n"}
{"task_id": "MBCPP/221", "language": "cpp", "completion": "    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] % 2 == 0) {\n            return nums[i];\n        }\n    }\n    return -1;\n}\n"}
{"task_id": "MBCPP/222", "language": "cpp", "completion": "    // Write your code here\n    if (testTuple.size() == 0) {\n        return true;\n    }\n    int type = testTuple[0];\n    for (int i = 1; i < testTuple.size(); i++) {\n        if (type != testTuple[i]) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "MBCPP/223", "language": "cpp", "completion": "    int count = 0;\n    for (int i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    return count > n/2;\n}\n"}
{"task_id": "MBCPP/224", "language": "cpp", "completion": "    int count = 0;\n    while (n) {\n        n = n & (n - 1);\n        count++;\n    }\n    return count;\n}\n"}
{"task_id": "MBCPP/225", "language": "cpp", "completion": "    if (low > high) {\n        return -1;\n    }\n    int mid = (low + high) / 2;\n    if (arr[mid] > arr[high]) {\n        return arr[low];\n    }\n    if (arr[mid] < arr[high]) {\n        return arr[mid];\n    }\n    if (arr[low] < arr[mid]) {\n        return findMin(arr, low, mid - 1);\n    }\n    if (arr[low] > arr[mid]) {\n        return findMin(arr, mid + 1, high);\n    }\n    return -1;\n}"}
{"task_id": "MBCPP/226", "language": "cpp", "completion": "    string res = \"\";\n    for (int i = 0; i < str.length(); i++) {\n        if (i % 2 == 0) {\n            res += str[i];\n        }\n    }\n    return res;\n}\n"}
{"task_id": "MBCPP/227", "language": "cpp", "completion": "    return min(a, min(b, c));\n}\n\n"}
{"task_id": "MBCPP/228", "language": "cpp", "completion": "    int mask = 0;\n    for (int i = l; i <= r; i++) {\n        mask |= (1 << i);\n    }\n    return (n & mask) == mask;\n}\n"}
{"task_id": "MBCPP/229", "language": "cpp", "completion": "    vector<int> res;\n    int i = 0, j = n - 1;\n    while (i <= j) {\n        if (arr[i] < 0 && arr[j] > 0) {\n            swap(arr[i], arr[j]);\n            i++;\n            j--;\n        } else if (arr[i] < 0) {\n            i++;\n        } else if (arr[j] > 0) {\n            j--;\n        }\n    }\n    return arr;\n}\n"}
{"task_id": "MBCPP/230", "language": "cpp", "completion": "    int len = str1.length();\n    int count = 0;\n    for (int i = 0; i < len; i++) {\n        if (str1[i] == ' ') {\n            count++;\n        }\n    }\n    int newLen = len + count * (chr.length() - 1);\n    string str2 = str1;\n    for (int i = len - 1; i >= 0; i--) {\n        if (str1[i] == ' ') {\n            str2.insert(i, chr);\n            newLen += chr.length() - 1;\n        }\n    }\n    return str2;\n}\n"}
{"task_id": "MBCPP/231", "language": "cpp", "completion": "    int dp[n+1][n+1];\n    for(int i=0; i<=n; i++) {\n        for(int j=0; j<=i; j++) {\n            if(i == 0 || j == 0) {\n                dp[i][j] = tri[i][j];\n            } else {\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + tri[i][j];\n            }\n        }\n    }\n    return dp[n][n];\n}\n"}
{"task_id": "MBCPP/232", "language": "cpp", "completion": "    vector<int> list2;\n    for (int i = 0; i < n; i++) {\n        int max = 0;\n        for (int j = 0; j < list1.size(); j++) {\n            if (list1[j] > max) {\n                max = list1[j];\n            }\n        }\n        list2.push_back(max);\n        list1.erase(remove(list1.begin(), list1.end(), max), list1.end());\n    }\n    return list2;\n}\n"}
{"task_id": "MBCPP/233", "language": "cpp", "completion": "    return 2 * M_PI * r * r + 2 * M_PI * r * h;\n}\n"}
{"task_id": "MBCPP/234", "language": "cpp", "completion": "    return l * l * l;\n}\n\n"}
{"task_id": "MBCPP/235", "language": "cpp", "completion": "    int mask = 0xAAAAAAAA;\n    return n | mask;\n}\n"}
{"task_id": "MBCPP/236", "language": "cpp", "completion": "    if(n < k) return -1;\n    if(n == k) return 1;\n    if(n == 1) return 0;\n    return (n - 1) * (n - 2) / 2 + noOfTriangle(n - 1, k);\n}"}
{"task_id": "MBCPP/238", "language": "cpp", "completion": "    int n = str.size();\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i; j < n; j++) {\n            if (str[i] != str[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "MBCPP/239", "language": "cpp", "completion": "    int dp[n+1];\n    dp[0] = 1;\n    for(int i=1; i<=n; i++){\n        dp[i] = 0;\n        for(int j=1; j<=m; j++){\n            if(j >= 2*i)\n                dp[i] += dp[i-1];\n        }\n    }\n    return dp[n];\n}"}
{"task_id": "MBCPP/241", "language": "cpp", "completion": "    vector<vector<vector<string>>> arr(m, vector<vector<string>>(n, vector<string>(o, \"*\""}
{"task_id": "MBCPP/242", "language": "cpp", "completion": "    int count = 0;\n    for (int i = 0; i < str1.length(); i++) {\n        if (str1[i] != ' ') {\n            count++;\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "MBCPP/244", "language": "cpp", "completion": "    int sqrt = sqrt(n);\n    if (sqrt * sqrt == n) {\n        return sqrt * sqrt + 1;\n    }\n    return sqrt * sqrt + 1;\n}"}
{"task_id": "MBCPP/245", "language": "cpp", "completion": "    int maxSum = 0;\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += arr[i];\n        maxSum = max(maxSum, sum);\n        if (sum < 0) {\n            sum = 0;\n        }\n    }\n    return maxSum;\n}\n"}
{"task_id": "MBCPP/246", "language": "cpp", "completion": "    double x = number;\n    double y = (x + (number / x)) / 2;\n    while (abs(x - y) > 0.000000000000001) {\n        x = y;\n        y = (x + (number / x)) / 2;\n    }\n    return y;\n}\n"}
{"task_id": "MBCPP/247", "language": "cpp", "completion": "    int n = str.size();\n    vector<vector<int>> dp(n, vector<int>(n, 0));\n    int max_len = 0;\n    for (int i = 0; i < n; i++) {\n        dp[i][i] = 1;\n        max_len = max(max_len, dp[i][i]);\n    }\n    for (int i = 0; i < n - 1; i++) {\n        dp[i][i + 1] = (str[i] == str[i + 1]) ? 2 : 1;\n        max_len = max(max_len, dp[i][i + 1]);\n    }\n    for (int i = 2; i < n; i++) {\n        for (int j = 0; j < n - i; j++) {\n            if (str[j] == str[j + i]) {\n                dp[j][j + i] = dp[j + 1][j + i - 1] + 2;\n            } else {\n                dp[j][j + i] = max(dp[j][j + i - 1], dp[j + 1][j + i]);\n            }\n           "}
{"task_id": "MBCPP/248", "language": "cpp", "completion": "    double sum = 0;\n    for (int i = 1; i < n; i++) {\n        sum += 1.0 / i;\n    }\n    return sum;\n}\n"}
{"task_id": "MBCPP/249", "language": "cpp", "completion": "    vector<int> result;\n    int i = 0, j = 0;\n    while (i < arrayNums1.size() && j < arrayNums2.size()) {\n        if (arrayNums1[i] == arrayNums2[j]) {\n            result.push_back(arrayNums1[i]);\n            i++;\n            j++;\n        } else if (arrayNums1[i] < arrayNums2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/250", "language": "cpp", "completion": "    int count = 0;\n    for (int i = 0; i < tup.size(); i++) {\n        if (tup[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "MBCPP/251", "language": "cpp", "completion": "    vector<string> result;\n    for (int i = 0; i < list.size(); i++) {\n        result.push_back(element);\n        result.push_back(list[i]);\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/252", "language": "cpp", "completion": "    vector<double> result;\n    result.push_back(numbers);\n    result.push_back(0);\n    return result;\n}\n"}
{"task_id": "MBCPP/253", "language": "cpp", "completion": "    int count = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] == 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "MBCPP/254", "language": "cpp", "completion": "    vector<string> res;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == 'a' || text[i] == 'e') {\n            int j = i;\n            while (j < text.size() && text[j] != ' ') {\n                j++;\n            }\n            res.push_back(text.substr(i, j - i));\n            i = j - 1;\n        }\n    }\n    return res;\n}\n"}
{"task_id": "MBCPP/255", "language": "cpp", "completion": "    vector<vector<string>> res;\n    vector<string> temp;\n    if (n == 0) {\n        res.push_back(temp);\n        return res;\n    }\n    for (int i = 0; i < l.size(); i++) {\n        temp.push_back(l[i]);\n        vector<vector<string>> tempRes = combinationsColors(l, n - 1);\n        for (int j = 0; j < tempRes.size(); j++) {\n            res.push_back(temp);\n            res.push_back(tempRes[j]);\n        }\n        temp.pop_back();\n    }\n    return res;\n}\n"}
{"task_id": "MBCPP/256", "language": "cpp", "completion": "    if (n <= 2) return 0;\n    vector<bool> isPrime(n, true);\n    isPrime[0] = false;\n    isPrime[1] = false;\n    for (int i = 2; i < n; i++) {\n        if (isPrime[i]) {\n            for (int j = i * i; j < n; j += i) {\n                isPrime[j] = false;\n            }\n        }\n    }\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        if (isPrime[i]) count++;\n    }\n    return count;\n}\n"}
{"task_id": "MBCPP/257", "language": "cpp", "completion": "    vector<int> result;\n    result.push_back(b);\n    result.push_back(a);\n    return result;\n}\n\n"}
{"task_id": "MBCPP/258", "language": "cpp", "completion": "    return count_if(arrayNums.begin(), arrayNums.end(), [](int num) {\n        return num % 2 != 0;\n    });\n}\n"}
{"task_id": "MBCPP/259", "language": "cpp", "completion": "    vector<vector<int>> result;\n    int n = testTup1.size();\n    for (int i = 0; i < n; i++) {\n        vector<int> temp;\n        temp.push_back(max(testTup1[i][0], testTup2[i][0]));\n        temp.push_back(max(testTup1[i][1], testTup2[i][1]));\n        result.push_back(temp);\n    }\n    return result;\n}"}
{"task_id": "MBCPP/260", "language": "cpp", "completion": "    int a = 1, b = 1, c = 1, d = 1;\n    int p = 1;\n    int i = 1;\n    while (i < n) {\n        p = a * b * c * d;\n        a = b;\n        b = c;\n        c = d;\n        d = p;\n        i++;\n    }\n    return p;\n}"}
{"task_id": "MBCPP/261", "language": "cpp", "completion": "    vector<int> result;\n    for (int i = 0; i < testTup1.size(); i++) {\n        result.push_back(testTup1[i] / testTup2[i]);\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/263", "language": "cpp", "completion": "    unordered_map<string, int> result;\n    for (auto it = d1.begin(); it != d1.end(); it++) {\n        result[it->first] = it->second;\n    }\n    for (auto it = d2.begin(); it != d2.end(); it++) {\n        result[it->first] = it->second;\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/264", "language": "cpp", "completion": "    return hAge * 7;\n}\n"}
{"task_id": "MBCPP/266", "language": "cpp", "completion": "    return 6 * l * l;\n}\n\n"}
{"task_id": "MBCPP/267", "language": "cpp", "completion": "    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += i * i;\n    }\n    return sum;\n}"}
{"task_id": "MBCPP/268", "language": "cpp", "completion": "    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n"}
{"task_id": "MBCPP/269", "language": "cpp", "completion": "    return k[0];\n}\n\n"}
{"task_id": "MBCPP/270", "language": "cpp", "completion": "    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        if (i % 2 == 0 && arr[i] % 2 == 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "MBCPP/271", "language": "cpp", "completion": "    int sum = 0;\n    for (int i = 2; i <= n; i++) {\n        sum += pow(i, 5);\n    }\n    return sum;\n}"}
{"task_id": "MBCPP/273", "language": "cpp", "completion": "    vector<int> result;\n    for (int i = 0; i < testTup1.size(); i++) {\n        result.push_back(testTup1[i] - testTup2[i]);\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/274", "language": "cpp", "completion": "    int sum = 0;\n    for (int i = 0; i <= n; i += 2) {\n        sum += binomialCoeff(n, i);\n    }\n    return sum;\n}"}
{"task_id": "MBCPP/275", "language": "cpp", "completion": "    int i = 0;\n    int j = n - 1;\n    while (i <= j) {\n        int mid = (i + j) / 2;\n        if (a[mid] == m) {\n            return mid;\n        } else if (a[mid] < m) {\n            i = mid + 1;\n        } else {\n            j = mid - 1;\n        }\n    }\n    return -1;\n}\n"}
{"task_id": "MBCPP/276", "language": "cpp", "completion": "    return (double)r * r * h;\n}\n"}
{"task_id": "MBCPP/277", "language": "cpp", "completion": "    unordered_map<string, int> result;\n    for (auto it = dict.begin(); it != dict.end(); it++) {\n        if (it->second >= n) {\n            result.insert(*it);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/279", "language": "cpp", "completion": "    int num = 0;\n    for (int i = 1; i <= n; i++) {\n        num += 10 * i * (2 * i - 1);\n    }\n    return num;\n}\n"}
{"task_id": "MBCPP/281", "language": "cpp", "completion": "    // Write your code here\n    unordered_set<int> s;\n    for (int i = 0; i < testList.size(); i++) {\n        if (s.find(testList[i]) != s.end()) {\n            return false;\n        }\n        s.insert(testList[i]);\n    }\n    return true;\n}"}
{"task_id": "MBCPP/282", "language": "cpp", "completion": "    vector<int> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] - nums2[i]);\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/283", "language": "cpp", "completion": "    int arr[10] = {0};\n    while(n) {\n        arr[n%10]++;\n        n /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(arr[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "MBCPP/285", "language": "cpp", "completion": "    if (text.length() < 2) {\n        return \"Not matched!\";\n    }\n    if (text[0] == 'a' && text[1] == 'b' && text.length() >= 3) {\n        if (text[2] == 'b') {\n            if (text.length() == 3) {\n                return \"Found a match!\";\n            }\n            if (text[3] == 'b') {\n                if (text.length() == 4) {\n                    return \"Found a match!\";\n                }\n                if (text[4] == 'b') {\n                    if (text.length() == 5) {\n                        return \"Found a match!\";\n                    }\n                }\n            }\n        }\n    }\n    return \"Not matched!\";\n}\n\n"}
{"task_id": "MBCPP/286", "language": "cpp", "completion": "    int sum = 0;\n    int maxSum = INT_MIN;\n    for (int i = 0; i < n; i++) {\n        sum += a[i];\n        if (i >= k) {\n            sum -= a[i - k];\n        }\n        maxSum = max(maxSum, sum);\n    }\n    return maxSum;\n}\n"}
{"task_id": "MBCPP/287", "language": "cpp", "completion": "    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += (i * i);\n    }\n    return sum;\n}\n"}
{"task_id": "MBCPP/288", "language": "cpp", "completion": "    int ans = 0;\n    for (int i = 0; i < n; i++) {\n        if (arr[i] % p == 1) {\n            ans++;\n        }\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/289", "language": "cpp", "completion": "    int ans = 0;\n    for (int i = 1; i <= n; i++) {\n        if (i % 2 == 1) {\n            ans++;\n        }\n    }\n    return ans;\n}"}
{"task_id": "MBCPP/291", "language": "cpp", "completion": "    int dp[n+1][k+1];\n    for(int i=0; i<=n; i++) {\n        dp[i][0] = 1;\n    }\n    for(int i=1; i<=k; i++) {\n        dp[1][i] = 1;\n    }\n    for(int i=2; i<=n; i++) {\n        for(int j=1; j<=k; j++) {\n            dp[i][j] = dp[i-1][j-1] + dp[i-1][j];\n        }\n    }\n    return dp[n][k];\n}"}
{"task_id": "MBCPP/292", "language": "cpp", "completion": "    return n / m;\n}\n"}
{"task_id": "MBCPP/295", "language": "cpp", "completion": "    int sum = 0;\n    for (int i = 1; i <= number; i++) {\n        if (number % i == 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "MBCPP/296", "language": "cpp", "completion": "    int invCount = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (arr[i] > arr[j]) {\n                invCount++;\n            }\n        }\n    }\n    return invCount;\n}\n"}
{"task_id": "MBCPP/297", "language": "cpp", "completion": "    vector<int> list2;\n    for (auto &i : list1) {\n        for (auto &j : i) {\n            list2.push_back(j);\n        }\n    }\n    return list2;\n}\n"}
{"task_id": "MBCPP/300", "language": "cpp", "completion": "    double ans = 0;\n    for (int i = 0; i < n; i++) {\n        ans += pow(2, i);\n    }\n    return ans * ans;\n}\n"}
{"task_id": "MBCPP/302", "language": "cpp", "completion": "    int count = 0;\n    while (n > 0) {\n        if (n & 1) {\n            count++;\n            n = n >> 1;\n        } else {\n            n = n >> 1;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "MBCPP/303", "language": "cpp", "completion": "    int count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (a[i] > a[j]) {\n                count++;\n            }\n        }\n    }\n    return count % 2 == 0;\n}\n"}
{"task_id": "MBCPP/304", "language": "cpp", "completion": "    int n = arr.size();\n    int start = ranges[0][0], end = ranges[0][1];\n    int mid = (start + end) / 2;\n    int ans = -1;\n    while (start <= end) {\n        mid = (start + end) / 2;\n        if (mid == arr[mid]) {\n            ans = mid;\n            break;\n        }\n        if (mid < arr[mid]) {\n            end = mid - 1;\n        } else {\n            start = mid + 1;\n        }\n    }\n    if (ans == -1) {\n        return -1;\n    }\n    int rotatedIndex = (index + rotations) % n;\n    if (rotatedIndex < ans) {\n        return arr[rotatedIndex];\n    }\n    return findElement(arr, ranges, rotations + 1, rotatedIndex);\n}"}
{"task_id": "MBCPP/305", "language": "cpp", "completion": "    vector<string> result;\n    for (string word : words) {\n        if (word.size() > 0 && word[0] == 'p') {\n            result.push_back(word);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/306", "language": "cpp", "completion": "    int dp[n+1][n+1];\n    int maxSum = INT_MIN;\n    for(int i = 1; i <= n; i++) {\n        dp[i][i] = a[i-1];\n        for(int j = i+1; j <= n; j++) {\n            if(a[i-1] < a[j-1]) {\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j] + a[i-1]);\n            } else {\n                dp[i][j] = dp[i][j-1];\n            }\n        }\n    }\n    for(int i = 1; i <= n; i++) {\n        if(i <= index) {\n            maxSum = max(maxSum, dp[i][index]);\n        } else if(i > index && i <= k) {\n            maxSum = max(maxSum, dp[i][k]);\n        }\n    }\n    return maxSum;\n}\n"}
{"task_id": "MBCPP/308", "language": "cpp", "completion": "    vector<int> result;\n    int i = 0, j = 0;\n    while (i < nums1.size() && j < nums2.size()) {\n        if (nums1[i] * nums2[j] > nums1[i] * nums2[i]) {\n            result.push_back(nums1[i] * nums2[j]);\n            if (result.size() == n) {\n                return result;\n            }\n            j++;\n        } else {\n            i++;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/309", "language": "cpp", "completion": "    return (a > b) ? a : b;\n}\n\n"}
{"task_id": "MBCPP/310", "language": "cpp", "completion": "    vector<string> v;\n    stringstream ss(str1);\n    string s;\n    while (getline(ss, s, '.')) {\n        v.push_back(s);\n    }\n    return v;\n}\n"}
{"task_id": "MBCPP/311", "language": "cpp", "completion": "    return n | (n + 1);\n}\n"}
{"task_id": "MBCPP/312", "language": "cpp", "completion": "    return (1.0/3.0) * M_PI * r * r * h;\n}\n"}
{"task_id": "MBCPP/314", "language": "cpp", "completion": "    int m = grid.size();\n    int dp[m][n];\n    int maxSum = INT_MIN;\n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < n; j++) {\n            if (i == 0 || j == 0) {\n                dp[i][j] = grid[i][j];\n            } else {\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n            maxSum = max(maxSum, dp[i][j]);\n        }\n    }\n    return maxSum;\n}\n"}
{"task_id": "MBCPP/315", "language": "cpp", "completion": "    int max_len = 0;\n    string ans = \"\";\n    for (int i = 0; i < str.length(); i++) {\n        int len = 0;\n        while (i < str.length() && str[i] % 2 == 0) {\n            len++;\n            i++;\n        }\n        if (len > max_len) {\n            max_len = len;\n            ans = str.substr(i - len, len);\n        }\n    }\n    if (max_len == 0) {\n        return \"-1\";\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/316", "language": "cpp", "completion": "    int n = a.size();\n    int l = 0, r = n - 1;\n    while (l <= r) {\n        int mid = l + (r - l) / 2;\n        if (a[mid] == x) {\n            r = mid - 1;\n        } else if (a[mid] < x) {\n            l = mid + 1;\n        } else {\n            r = mid - 1;\n        }\n    }\n    return l;\n}\n"}
{"task_id": "MBCPP/318", "language": "cpp", "completion": "    int ans = 0;\n    for (int i = 1; i <= s; i++) {\n        for (int j = 1; j <= s; j++) {\n            for (int k = 1; k <= s; k++) {\n                if (i + j + k == s) {\n                    ans = max(ans, i * j * k);\n                }\n            }\n        }\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/319", "language": "cpp", "completion": "    vector<string> result;\n    regex reg(\"\\\\w{5}\");\n    smatch match;\n    while (regex_search(text, match, reg)) {\n        result.push_back(match.str());\n        text = match.suffix().str();\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/320", "language": "cpp", "completion": "    int sum = 0;\n    int sumSquare = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += i;\n        sumSquare += i * i;\n    }\n    return sum * sum - sumSquare;\n}"}
{"task_id": "MBCPP/321", "language": "cpp", "completion": "    string ans = \"\";\n    int n = s.size();\n    for (int i = 0; i < n; i++) {\n        if (s[i] == '1') {\n            ans += '1';\n        } else {\n            ans += '2';\n        }\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/322", "language": "cpp", "completion": "    vector<int> list2;\n    int min = list1[0];\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] < min) {\n            min = list1[i];\n            list2.clear();\n            list2.push_back(i);\n        } else if (list1[i] == min) {\n            list2.push_back(i);\n        }\n    }\n    return list2;\n}\n"}
{"task_id": "MBCPP/323", "language": "cpp", "completion": "    vector<int> res;\n    int i = 0;\n    while (i < n) {\n        if (arr[i] < 0) {\n            res.push_back(arr[i]);\n            i++;\n        } else {\n            res.push_back(arr[i]);\n            i++;\n            if (i < n) {\n                res.push_back(arr[i]);\n                i++;\n            }\n        }\n    }\n    return res;\n}"}
{"task_id": "MBCPP/324", "language": "cpp", "completion": "    vector<int> result;\n    int sum = 0;\n    for (int i = 0; i < testTuple.size(); i++) {\n        if (i % 2 == 0) {\n            sum += testTuple[i];\n        }\n    }\n    result.push_back(sum);\n    sum = 0;\n    for (int i = 1; i < testTuple.size(); i++) {\n        if (i % 2 == 0) {\n            sum += testTuple[i];\n        }\n    }\n    result.push_back(sum);\n    return result;\n}\n"}
{"task_id": "MBCPP/325", "language": "cpp", "completion": "    int dp[n+1];\n    dp[0] = 0;\n    for(int i=1; i<=n; i++) {\n        dp[i] = INT_MAX;\n        for(int j=1; j*j<=i; j++) {\n            dp[i] = min(dp[i], dp[i-j*j]+1);\n        }\n    }\n    return dp[n];\n}\n"}
{"task_id": "MBCPP/326", "language": "cpp", "completion": "    unordered_map<string, int> wordCount;\n    for (string word : testList) {\n        stringstream ss(word);\n        string token;\n        while (ss >> token) {\n            wordCount[token]++;\n        }\n    }\n    int maxCount = 0;\n    string mostOccurringWord;\n    for (auto word : wordCount) {\n        if (word.second > maxCount) {\n            maxCount = word.second;\n            mostOccurringWord = word.first;\n        }\n    }\n    return mostOccurringWord;\n}\n"}
{"task_id": "MBCPP/327", "language": "cpp", "completion": "    if(x == y && y == z)\n        return true;\n    else\n        return false;\n}\n"}
{"task_id": "MBCPP/328", "language": "cpp", "completion": "    vector<int> list2;\n    for (int i = m; i < m + n; i++) {\n        list2.push_back(list1[i]);\n    }\n    for (int i = 0; i < m; i++) {\n        list2.push_back(list1[i]);\n    }\n    return list2;\n}\n"}
{"task_id": "MBCPP/329", "language": "cpp", "completion": "    int count = 0;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] < 0) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "MBCPP/330", "language": "cpp", "completion": "    vector<string> ans;\n    regex r(\"[a-zA-Z]{3,5}\");\n    sregex_iterator it(text.begin(), text.end(), r);\n    sregex_iterator end;\n    while (it != end) {\n        ans.push_back(it->str());\n        it++;\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/331", "language": "cpp", "completion": "    int count = 0;\n    while (n) {\n        if (n & 1) {\n            count++;\n        }\n        n >>= 1;\n    }\n    return count;\n}\n"}
{"task_id": "MBCPP/332", "language": "cpp", "completion": "    unordered_map<string, int> char_freq;\n    for (char c : str1) {\n        string s = string(1, c);\n        if (char_freq.find(s) == char_freq.end()) {\n            char_freq[s] = 1;\n        } else {\n            char_freq[s] += 1;\n        }\n    }\n    return char_freq;\n}\n"}
{"task_id": "MBCPP/334", "language": "cpp", "completion": "    if (a + b > c && a + c > b && b + c > a) {\n        return true;\n    }\n    return false;\n}\n"}
{"task_id": "MBCPP/335", "language": "cpp", "completion": "    return (n * (2 * a + (n - 1) * d)) / 2;\n}\n"}
{"task_id": "MBCPP/336", "language": "cpp", "completion": "    if (monthname1 == \"February\") {\n        return true;\n    }\n    else if (monthname1 == \"January\" || monthname1 == \"March\" || monthname1 == \"May\" || monthname1 == \"July\" || monthname1 == \"August\" || monthname1 == \"October\" || monthname1 == \"December\") {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\n"}
{"task_id": "MBCPP/337", "language": "cpp", "completion": "    // your code here\n    int n = text.size();\n    int i = 0;\n    while(i < n && text[i] == ' ')\n        i++;\n    int j = i;\n    while(j < n && text[j] != ' ')\n        j++;\n    if(j == n)\n        return \"Not matched!\";\n    string word = text.substr(i, j - i);\n    if(word == \"python\")\n        return \"Found a match!\";\n    return \"Not matched!\";\n}\n\n\n// main function"}
{"task_id": "MBCPP/338", "language": "cpp", "completion": "    int n = s.size();\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        int j = i;\n        while (j < n && s[i] == s[j]) {\n            j++;\n        }\n        count += (j - i - 1);\n        i = j - 1;\n    }\n    return count;\n}\n"}
{"task_id": "MBCPP/339", "language": "cpp", "completion": "    int max = 0;\n    for (int i = x; i <= y; i++) {\n        int count = 0;\n        for (int j = 1; j <= i; j++) {\n            if (i % j == 0) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n        }\n    }\n    return max;\n}\n"}
{"task_id": "MBCPP/340", "language": "cpp", "completion": "    int sum = 0;\n    int n = lst.size();\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int min1 = INT_MAX;\n    int min2 = INT_MAX;\n    int min3 = INT_MAX;\n    while (i < n && j < n && k < n) {\n        if (lst[i] < min1) {\n            min3 = min2;\n            min2 = min1;\n            min1 = lst[i];\n            i++;\n        } else if (lst[j] < min2) {\n            min3 = min2;\n            min2 = lst[j];\n            j++;\n        } else if (lst[k] < min3) {\n            min3 = lst[k];\n            k++;\n        }\n        sum += min3;\n    }\n    return sum;\n}\n"}
{"task_id": "MBCPP/341", "language": "cpp", "completion": "    vector<int> v;\n    for (auto it = s.begin(); it != s.end(); it++) {\n        v.push_back(*it);\n    }\n    return v;\n}\n\n"}
{"task_id": "MBCPP/342", "language": "cpp", "completion": "    int n = list.size();\n    if (n == 0) return {};\n    int m = list[0].size();\n    if (m == 0) return {};\n\n    vector<int> min_range(2, INT_MAX);\n    vector<int> max_range(2, INT_MIN);\n\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n            min_range[0] = min(min_range[0], list[i][j]);\n            max_range[1] = max(max_range[1], list[i][j]);\n        }\n    }\n\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n            min_range[1] = min(min_range[1], list[i][j]);\n            max_range[0] = max(max_range[0], list[i][j]);\n        }\n    }\n\n    return min_range;\n}\n"}
{"task_id": "MBCPP/343", "language": "cpp", "completion": "    int n = s.size();\n    int count = 0;\n    int count2 = 0;\n    for(int i = 0; i < n; i++) {\n        if(isdigit(s[i])) {\n            count++;\n        }\n        else if(isalpha(s[i])) {\n            count2++;\n        }\n    }\n    vector<int> v;\n    v.push_back(count);\n    v.push_back(count2);\n    return v;\n}\n"}
{"task_id": "MBCPP/344", "language": "cpp", "completion": "    int count = 0;\n    for (int i = n; i <= m; i++) {\n        if (i % 2 == 1) {\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "MBCPP/345", "language": "cpp", "completion": "    vector<int> diff;\n    int n = nums.size();\n    if (n == 0) return diff;\n    int prev = nums[0];\n    for (int i = 1; i < n; i++) {\n        diff.push_back(nums[i] - prev);\n        prev = nums[i];\n    }\n    return diff;\n}\n"}
{"task_id": "MBCPP/346", "language": "cpp", "completion": "    if (n == 1) return 1;\n    if (k == 1) return n;\n    int ans = 0;\n    for (int i = 1; i <= n; i++) {\n        int left = i - 1;\n        int right = n - i;\n        if (left > 0) {\n            ans += left;\n        }\n        if (right > 0) {\n            ans += right;\n        }\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/347", "language": "cpp", "completion": "    int dp[m+1][n+1];\n    for(int i=0; i<=m; i++) {\n        for(int j=0; j<=n; j++) {\n            if(i==0 || j==0) {\n                dp[i][j] = 0;\n            } else if(i==1 || j==1) {\n                dp[i][j] = 1;\n            } else {\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + 1;\n            }\n        }\n    }\n    return dp[m][n];\n}\n"}
{"task_id": "MBCPP/348", "language": "cpp", "completion": "    int n = 1;\n    int ways = 0;\n    while (n <= m) {\n        ways += n;\n        n++;\n    }\n    return ways;\n}"}
{"task_id": "MBCPP/349", "language": "cpp", "completion": "    int n = str.length();\n    for (int i = 0; i < n; i++) {\n        if (str[i] != '0' && str[i] != '1') {\n            return \"No\";\n        }\n    }\n    return \"Yes\";\n}"}
{"task_id": "MBCPP/350", "language": "cpp", "completion": "    int n = s.size();\n    if (n == 1) return 1;\n    int ans = INT_MAX;\n    unordered_map<char, int> mp;\n    for (int i = 0; i < n; i++) {\n        mp[s[i]]++;\n    }\n    for (auto it = mp.begin(); it != mp.end(); it++) {\n        if (it->second == 1) {\n            ans = min(ans, n - it->second);\n        }\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/351", "language": "cpp", "completion": "    unordered_map<int, int> m;\n    for (int i = 0; i < n; i++) {\n        m[arr[i]]++;\n    }\n    for (int i = 0; i < n; i++) {\n        if (m[arr[i]] == k) {\n            return arr[i];\n        }\n    }\n    return -1;\n}\n"}
{"task_id": "MBCPP/352", "language": "cpp", "completion": "    unordered_set<char> s;\n    for (char c : str) {\n        if (s.find(c) != s.end()) {\n            return false;\n        }\n        s.insert(c);\n    }\n    return true;\n}\n"}
{"task_id": "MBCPP/353", "language": "cpp", "completion": "    vector<vector<int>> list2;\n    for (int i = 0; i < list1.size(); i++) {\n        vector<int> temp;\n        for (int j = 0; j < list1[i].size(); j++) {\n            if (j != n) {\n                temp.push_back(list1[i][j]);\n            }\n        }\n        list2.push_back(temp);\n    }\n    return list2;\n}\n"}
{"task_id": "MBCPP/354", "language": "cpp", "completion": "    return a + (n - 1) * d;\n}\n"}
{"task_id": "MBCPP/355", "language": "cpp", "completion": "    if (radius <= 0) return 0;\n    int count = 0;\n    for (int i = 1; i <= radius; i++) {\n        count += 2 * i;\n    }\n    return count;\n}"}
{"task_id": "MBCPP/356", "language": "cpp", "completion": "    return 180 - a - b;\n}\n"}
{"task_id": "MBCPP/357", "language": "cpp", "completion": "    int max = INT_MIN;\n    for (auto &i : testList) {\n        if (i[1] > max) {\n            max = i[1];\n        }\n    }\n    return max;\n}\n"}
{"task_id": "MBCPP/358", "language": "cpp", "completion": "    vector<int> ans;\n    map<int, int> m;\n    for(int i=0; i<nums1.size(); i++) {\n        m[nums1[i]] = nums2[i];\n    }\n    for(int i=0; i<nums2.size(); i++) {\n        ans.push_back(m[nums2[i]]);\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/359", "language": "cpp", "completion": "    if (a == 0) {\n        return \"No\";\n    }\n    int d = b * b - 4 * a * c;\n    if (d < 0) {\n        return \"No\";\n    }\n    if (d == 0) {\n        return \"Yes\";\n    }\n    if (d > 0) {\n        int x1 = (-b + sqrt(d)) / (2 * a);\n        int x2 = (-b - sqrt(d)) / (2 * a);\n        if (x1 == 2 * x2) {\n            return \"Yes\";\n        }\n        return \"No\";\n    }\n}\n"}
{"task_id": "MBCPP/360", "language": "cpp", "completion": "    int a = 1, b = 1, c = 1;\n    for (int i = 1; i < n; i++) {\n        int temp = a + b + c;\n        a = b;\n        b = c;\n        c = temp;\n    }\n    return c;\n}"}
{"task_id": "MBCPP/363", "language": "cpp", "completion": "    vector<vector<int>> result;\n    for (auto &v : testList) {\n        vector<int> temp;\n        for (auto &i : v) {\n            temp.push_back(i + k);\n        }\n        result.push_back(temp);\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/364", "language": "cpp", "completion": "    int flips = 0;\n    int n = str.size();\n    int i = 0;\n    while (i < n) {\n        if (str[i] == '0') {\n            while (i < n && str[i] == '0') {\n                i++;\n            }\n            flips++;\n        } else {\n            while (i < n && str[i] == '1') {\n                i++;\n            }\n            flips++;\n        }\n    }\n    return flips;\n}\n"}
{"task_id": "MBCPP/365", "language": "cpp", "completion": "    int count = 0;\n    while (n) {\n        n /= 10;\n        count++;\n    }\n    return count;\n}\n"}
{"task_id": "MBCPP/366", "language": "cpp", "completion": "    int maxProduct = 0;\n    for (int i = 0; i < listNums.size() - 1; i++) {\n        int product = listNums[i] * listNums[i + 1];\n        if (product > maxProduct) {\n            maxProduct = product;\n        }\n    }\n    return maxProduct;\n}\n"}
{"task_id": "MBCPP/368", "language": "cpp", "completion": "    vector<vector<int>> result;\n    for (int i = 0; i < n; i++) {\n        result.push_back(testTup);\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/369", "language": "cpp", "completion": "    return 2*(l*w + l*h + w*h);\n}\n"}
{"task_id": "MBCPP/370", "language": "cpp", "completion": "    vector<vector<string>> result;\n    vector<string> temp;\n    vector<string> temp2;\n    vector<string> temp3;\n    vector<string> temp4;\n    vector<string> temp5;\n    vector<string> temp6;\n    vector<string> temp7;\n    vector<string> temp8;\n    vector<string> temp9;\n    vector<string> temp10;\n    vector<string> temp11;\n    vector<string> temp12;\n    vector<string> temp13;\n    vector<string> temp14;\n    vector<string> temp15;\n    vector<string> temp16;\n    vector<string> temp17;\n    vector<string> temp18;\n    vector<string> temp19;\n    vector<string> temp20;\n    vector<string> temp21;\n    vector<string> temp22;\n    vector<string> temp23;\n    vector<string> temp24;\n    vector<string> temp25;\n    vector<string> temp26;\n    vector<string> temp27;\n    vector<string> temp28;\n    vector<string> temp29;\n    vector<string> temp30;\n"}
{"task_id": "MBCPP/371", "language": "cpp", "completion": "    int left = leftElement;\n    int right = rightElement;\n    int mid = (left + right) / 2;\n    while (left <= right) {\n        if (a[mid] == mid) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n        mid = (left + right) / 2;\n    }\n    return left;\n}\n"}
{"task_id": "MBCPP/372", "language": "cpp", "completion": "    // Write your code here\n    int n = nums.size();\n    for (int i = n / 2 - 1; i >= 0; i--) {\n        heapify(nums, n, i);\n    }\n    for (int i = n - 1; i >= 0; i--) {\n        swap(nums[0], nums[i]);\n        heapify(nums, i, 0);\n    }\n    return nums;\n}\n\nvoid heapify(vector<int> &nums, int n, int i) {\n    int largest = i;\n    int left = 2 * i + 1;\n    int right = 2 * i + 2;\n    if (left < n && nums[left] > nums[largest]) {\n        largest = left;\n    }\n    if (right < n && nums[right] > nums[largest]) {\n        largest = right;\n    }\n    if (largest != i) {\n        swap(nums[i], nums[largest]);\n        heapify(nums, n, largest);\n    }\n}"}
{"task_id": "MBCPP/373", "language": "cpp", "completion": "    return l * w * h;\n}\n"}
{"task_id": "MBCPP/374", "language": "cpp", "completion": "    vector<string> res;\n    if (str.empty()) return res;\n    vector<bool> used(str.size(), false);\n    do {\n        res.push_back(str);\n    } while (next_permutation(str.begin(), str.end(), [&](char a, char b) { return used[a - 'a'] || used[b - 'a']; }));\n    return res;\n}\n"}
{"task_id": "MBCPP/375", "language": "cpp", "completion": "    return n - (n % m);\n}\n"}
{"task_id": "MBCPP/377", "language": "cpp", "completion": "    string res = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] != c[0]) {\n            res += s[i];\n        }\n    }\n    return res;\n}\n"}
{"task_id": "MBCPP/378", "language": "cpp", "completion": "    int n = testList.size();\n    int last = testList[n-1];\n    for (int i = n-1; i > 0; i--) {\n        testList[i] = testList[i-1];\n    }\n    testList[0] = last;\n    return testList;\n}\n"}
{"task_id": "MBCPP/379", "language": "cpp", "completion": "    return 2 * (l * w + l * h + w * h) + l * w * h;\n}\n"}
{"task_id": "MBCPP/380", "language": "cpp", "completion": "    vector<vector<int>> res;\n    for (int i = 0; i < rownum; i++) {\n        vector<int> tmp;\n        for (int j = 0; j < colnum; j++) {\n            tmp.push_back(i * colnum + j);\n        }\n        res.push_back(tmp);\n    }\n    return res;\n}\n"}
{"task_id": "MBCPP/382", "language": "cpp", "completion": "    int n = a.size();\n    int l = 0, r = n - 1;\n    while (l <= r) {\n        int mid = l + (r - l) / 2;\n        if (a[mid] > a[mid + 1]) {\n            return mid + 1;\n        }\n        if (a[mid] < a[mid - 1]) {\n            return n - mid;\n        }\n        if (a[l] <= a[mid]) {\n            l = mid + 1;\n        } else {\n            r = mid - 1;\n        }\n    }\n    return 0;\n}\n"}
{"task_id": "MBCPP/383", "language": "cpp", "completion": "    int ans = 0;\n    while (n) {\n        if (n & 1) {\n            ans ^= 1;\n        }\n        n >>= 1;\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/384", "language": "cpp", "completion": "    int min = arr[0];\n    int count = 1;\n    for (int i = 1; i < n; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n            count = 1;\n        } else if (arr[i] == min) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "MBCPP/385", "language": "cpp", "completion": "    if (n == 1) {\n        return 1;\n    }\n    if (n == 2) {\n        return 2;\n    }\n    return getPerrin(n - 1) + getPerrin(n - 2);\n}\n"}
{"task_id": "MBCPP/386", "language": "cpp", "completion": "    int n = s.size();\n    int count = 0;\n    stack<char> st;\n    for(int i=0; i<n; i++){\n        if(s[i] == '['){\n            st.push(s[i]);\n        }\n        else if(s[i] == ']'){\n            if(st.empty()){\n                count++;\n            }\n            else{\n                st.pop();\n            }\n        }\n    }\n    return count;\n}"}
{"task_id": "MBCPP/387", "language": "cpp", "completion": "    int sum = 0;\n    for (int i = 0; i < n.length(); i++) {\n        if (n[i] >= '0' && n[i] <= '9') {\n            sum += (n[i] - '0');\n        } else if (n[i] >= 'A' && n[i] <= 'F') {\n            sum += (n[i] - 'A' + 10);\n        } else if (n[i] >= 'a' && n[i] <= 'f') {\n            sum += (n[i] - 'a' + 10);\n        }\n    }\n    if (sum % 2 == 0) {\n        return \"Even\";\n    } else {\n        return \"Odd\";\n    }\n}\n"}
{"task_id": "MBCPP/388", "language": "cpp", "completion": "    int power = 1;\n    while (power < n) {\n        power *= 2;\n    }\n    return power;\n}\n"}
{"task_id": "MBCPP/389", "language": "cpp", "completion": "    if (n == 1) return 2;\n    if (n == 2) return 1;\n    if (n == 3) return 4;\n    if (n == 4) return 7;\n    if (n == 5) return 13;\n    if (n == 6) return 24;\n    if (n == 7) return 44;\n    if (n == 8) return 75;\n    if (n == 9) return 120;\n    if (n == 10) return 196;\n    if (n == 11) return 320;\n    if (n == 12) return 495;\n    if (n == 13) return 792;\n    if (n == 14) return 1287;\n    if (n == 15) return 2080;\n    if (n == 16) return 3401;\n    if (n == 17) return 5120;\n    if (n == 18) return 7804;\n    if (n == 19) return 12155;\n    if (n == 20) return"}
{"task_id": "MBCPP/391", "language": "cpp", "completion": "    vector<unordered_map<string, unordered_map<string, int>>> result;\n    for (int i = 0; i < l1.size(); i++) {\n        unordered_map<string, unordered_map<string, int>> temp;\n        temp[l1[i]][l2[i]] = l3[i];\n        result.push_back(temp);\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/392", "language": "cpp", "completion": "    if (n <= 0) return 0;\n    if (n == 1) return 1;\n    int f[n+1];\n    f[1] = 1;\n    for (int i = 2; i <= n; i++) {\n        f[i] = max(f[i/2] + f[i/3] + f[i/4] + f[i/5], i);\n    }\n    return f[n];\n}\n"}
{"task_id": "MBCPP/394", "language": "cpp", "completion": "    // Write your code here\n    sort(testTup.begin(), testTup.end());\n    for (int i = 1; i < testTup.size(); i++) {\n        if (testTup[i] == testTup[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "MBCPP/396", "language": "cpp", "completion": "    if (str.length() == 1) {\n        return \"Valid\";\n    }\n    if (str.length() == 2) {\n        if (str[0] == str[1]) {\n            return \"Valid\";\n        }\n        return \"Invalid\";\n    }\n    if (str[0] == str[str.length() - 1]) {\n        return \"Valid\";\n    }\n    return \"Invalid\";\n}\n"}
{"task_id": "MBCPP/397", "language": "cpp", "completion": "    double median;\n    if (a > b) {\n        if (a > c) {\n            if (b > c) {\n                median = (a + b + c) / 3.0;\n            } else {\n                median = (a + b) / 2.0;\n            }\n        } else {\n            median = (a + c) / 2.0;\n        }\n    } else {\n        if (b > c) {\n            if (a > c) {\n                median = (a + b + c) / 3.0;\n            } else {\n                median = (b + c) / 2.0;\n            }\n        } else {\n            median = (a + b) / 2.0;\n        }\n    }\n    return median;\n}\n"}
{"task_id": "MBCPP/398", "language": "cpp", "completion": "    int sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        int temp = nums[i];\n        while (temp > 0) {\n            sum += temp % 10;\n            temp /= 10;\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "MBCPP/399", "language": "cpp", "completion": "    vector<int> result;\n    int n = testTup1.size();\n    for (int i = 0; i < n; i++) {\n        result.push_back(testTup1[i] ^ testTup2[i]);\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/400", "language": "cpp", "completion": "    unordered_map<vector<int>, int> freq;\n    for (auto &v : testList) {\n        sort(v.begin(), v.end());\n        freq[v]++;\n    }\n    int maxFreq = 0;\n    for (auto &p : freq) {\n        maxFreq = max(maxFreq, p.second);\n    }\n    return maxFreq;\n}\n"}
{"task_id": "MBCPP/401", "language": "cpp", "completion": "    vector<vector<int>> result;\n    for (int i = 0; i < testTup1.size(); i++) {\n        vector<int> temp;\n        for (int j = 0; j < testTup1[i].size(); j++) {\n            temp.push_back(testTup1[i][j] + testTup2[i][j]);\n        }\n        result.push_back(temp);\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/402", "language": "cpp", "completion": "    if (r > n) return 0;\n    if (r == 0) return 1;\n    if (r == n) return 1;\n    if (r == 1) return n;\n    if (n == r) return 1;\n    if (n == 1) return 1;\n    if (n == 2) return 1;\n    if (r == 2) return n - 1;\n    if (n == 3) return 2;\n    if (r == 3) return n - 2;\n    if (n == 4) return 6;\n    if (r == 4) return n - 3;\n    if (n == 5) return 10;\n    if (r == 5) return n - 4;\n    if (n == 6) return 20;\n    if (r == 6) return n - 5;\n    if (n == 7) return 35;\n    if (r == 7) return n - 6;\n    if (n == 8) return 70;\n    if (r == 8) return n - 7;\n    if (n == 9) return 126;\n    if (r == 9) return n -"}
{"task_id": "MBCPP/403", "language": "cpp", "completion": "    // Write your code here\n    regex r(\"^https?://([a-z0-9]+\\\\.)+[a-z0-9]+/?$\");\n    return regex_match(str, r);\n}"}
{"task_id": "MBCPP/404", "language": "cpp", "completion": "    return a < b ? a : b;\n}\n\n"}
{"task_id": "MBCPP/406", "language": "cpp", "completion": "    if (x % 2 == 0) {\n        return \"Even Parity\";\n    } else {\n        return \"Odd Parity\";\n    }\n}\n"}
{"task_id": "MBCPP/408", "language": "cpp", "completion": "    vector<vector<int>> result;\n    if (nums1.size() == 0 || nums2.size() == 0 || k == 0) return result;\n    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\n    for (int i = 0; i < nums1.size(); i++) {\n        pq.push(make_pair(nums1[i], nums2[0]));\n    }\n    while (k-- > 0 && !pq.empty()) {\n        pair<int, int> top = pq.top();\n        result.push_back(vector<int>{top.first, top.second});\n        pq.pop();\n        if (pq.size() > 0) {\n            pq.push(make_pair(top.first, nums2[pq.top().second]));\n        }\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/409", "language": "cpp", "completion": "    int n = list1.size();\n    int min = INT_MAX;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            int prod = list1[i][0] * list1[j][1];\n            if (prod < min) {\n                min = prod;\n            }\n        }\n    }\n    return min;\n}\n"}
{"task_id": "MBCPP/411", "language": "cpp", "completion": "    string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/412", "language": "cpp", "completion": "    vector<int> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] % 2 == 0) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\n"}
{"task_id": "MBCPP/414", "language": "cpp", "completion": "    int n = list1.size();\n    int m = list2.size();\n    int i = 0, j = 0;\n    while (i < n && j < m) {\n        if (list1[i] < list2[j]) {\n            i++;\n        } else if (list1[i] > list2[j]) {\n            j++;\n        } else {\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "MBCPP/415", "language": "cpp", "completion": "    int n = arr.size();\n    int max_so_far = INT_MIN;\n    int max_ending_here = 1;\n    int min_so_far = INT_MAX;\n    int min_ending_here = 1;\n    int i;\n    for (i = 0; i < n; i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = min(min_ending_here * arr[i], 1);\n        } else {\n            int temp = max_ending_here;\n            max_ending_here = max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n        max_so_far = max(max_so_far, max_ending_here);\n        min_so_far = min(min_so_far, min_ending_here);\n    }\n    vector<int> ans;\n    ans.push_back(min_so_far);\n    ans.push_back(max_so_far);\n    return ans;\n}"}
{"task_id": "MBCPP/416", "language": "cpp", "completion": "    if (n < 3) {\n        return n;\n    }\n    return max(n % 3, breaksum(n - 1) + breaksum(n - 2) + breaksum(n - 3));\n}\n"}
{"task_id": "MBCPP/417", "language": "cpp", "completion": "    vector<vector<string>> result;\n    unordered_map<string, vector<string>> map;\n    for (auto &tuple : input) {\n        map[tuple[0]].push_back(tuple[1]);\n    }\n    for (auto &pair : map) {\n        vector<string> tuple;\n        tuple.push_back(pair.first);\n        for (auto &str : pair.second) {\n            tuple.push_back(str);\n        }\n        result.push_back(tuple);\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/419", "language": "cpp", "completion": "    int sum = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        sum += round(list1[i]);\n    }\n    return sum;\n}\n"}
{"task_id": "MBCPP/420", "language": "cpp", "completion": "    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += pow(i, 3);\n    }\n    return sum;\n}\n"}
{"task_id": "MBCPP/423", "language": "cpp", "completion": "    int dp[m][n];\n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < n; j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = gold[i][j];\n            } else if (i == 0) {\n                dp[i][j] = dp[i][j - 1] + gold[i][j];\n            } else if (j == 0) {\n                dp[i][j] = dp[i - 1][j] + gold[i][j];\n            } else {\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + gold[i][j];\n            }\n        }\n    }\n    return dp[m - 1][n - 1];\n}\n"}
{"task_id": "MBCPP/424", "language": "cpp", "completion": "    vector<string> result;\n    for (int i = 0; i < testTuple.size(); i++) {\n        result.push_back(testTuple[i][testTuple[i].size() - 1]);\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/426", "language": "cpp", "completion": "    vector<int> result;\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] % 2 != 0) {\n            result.push_back(nums[i]);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "MBCPP/427", "language": "cpp", "completion": "    // Write your code here\n    regex r(\"(\\\\d{4})-(\\\\d{2})-(\\\\d{2})\");\n    smatch m;\n    if (regex_match(dt, m, r)) {\n        return m[3] + \"-\" + m[2] + \"-\" + m[1];\n    }\n    return \"Invalid Date\";\n}"}
{"task_id": "MBCPP/428", "language": "cpp", "completion": "    int n = myList.size();\n    for (int gap = n/2; gap > 0; gap /= 2) {\n        for (int i = gap; i < n; i++) {\n            int temp = myList[i];\n            int j;\n            for (j = i; j >= gap && myList[j - gap] > temp; j -= gap) {\n                myList[j] = myList[j - gap];\n            }\n            myList[j] = temp;\n        }\n    }\n    return myList;\n}\n"}
{"task_id": "MBCPP/429", "language": "cpp", "completion": "    vector<int> result;\n    int n = testTup1.size();\n    for (int i = 0; i < n; i++) {\n        if (testTup1[i] & testTup2[i]) {\n            result.push_back(1);\n        } else {\n            result.push_back(0);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/430", "language": "cpp", "completion": "    return -b/(2*a);\n}\n"}
{"task_id": "MBCPP/433", "language": "cpp", "completion": "    for (int i = 0; i < arr.size(); i++) {\n        if (number > arr[i]) {\n            return \"Yes, the entered number is greater than those in the array\";\n        }\n    }\n    return \"No, entered number is less than those in the array\";\n}\n"}
{"task_id": "MBCPP/434", "language": "cpp", "completion": "    if (text.size() < 2) {\n        return \"Not matched!\";\n    }\n    if (text[0] == 'a' && text[1] == 'b') {\n        return \"Found a match!\";\n    }\n    return \"Not matched!\";\n}\n\n"}
{"task_id": "MBCPP/435", "language": "cpp", "completion": "    return n % 10;\n}\n"}
{"task_id": "MBCPP/436", "language": "cpp", "completion": "    vector<int> ans;\n    for(int i=0; i<list1.size(); i++){\n        if(list1[i]<0){\n            ans.push_back(list1[i]);\n        }\n    }\n    return ans;\n}"}
{"task_id": "MBCPP/437", "language": "cpp", "completion": "    string str2 = \"\";\n    for (int i = 0; i < str1.length(); i++) {\n        if (str1[i] % 2 == 0) {\n            str2 += str1[i];\n        }\n    }\n    return str2;\n}\n"}
{"task_id": "MBCPP/438", "language": "cpp", "completion": "    int count = 0;\n    for (int i = 0; i < testList.size(); i++) {\n        for (int j = i + 1; j < testList.size(); j++) {\n            if (testList[i][0] == testList[j][1] && testList[i][1] == testList[j][0]) {\n                count++;\n            }\n        }\n    }\n    return to_string(count);\n}\n"}
{"task_id": "MBCPP/439", "language": "cpp", "completion": "    int res = 0;\n    for (int i = 0; i < l.size(); i++) {\n        res += l[i] * pow(10, i);\n    }\n    return res;\n}\n"}
{"task_id": "MBCPP/441", "language": "cpp", "completion": "    return 6*l*l;\n}\n\n"}
{"task_id": "MBCPP/442", "language": "cpp", "completion": "    int positive = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] > 0) {\n            positive++;\n        }\n    }\n    return (double)positive / nums.size();\n}\n"}
{"task_id": "MBCPP/443", "language": "cpp", "completion": "    int max = INT_MIN;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] < 0 && list1[i] > max) {\n            max = list1[i];\n        }\n    }\n    return max;\n}\n"}
{"task_id": "MBCPP/444", "language": "cpp", "completion": "    string result = \"[(\";\n    for (int i = 0; i < testList.size(); i++) {\n        vector<int> tuple = testList[i];\n        for (int j = 0; j < tuple.size(); j++) {\n            if (j == tuple.size() - 1) {\n                result += to_string(tuple[j]);\n            } else {\n                result += to_string(tuple[j]) + \", \";\n            }\n        }\n        if (i == testList.size() - 1) {\n            result += \")]\";\n        } else {\n            result += \"), (\";\n        }\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/445", "language": "cpp", "completion": "    vector<vector<int>> result;\n    for (int i = 0; i < testTup1.size(); i++) {\n        vector<int> temp;\n        for (int j = 0; j < testTup1[i].size(); j++) {\n            temp.push_back(testTup1[i][j] * testTup2[i][j]);\n        }\n        result.push_back(temp);\n    }\n    return result;\n}"}
{"task_id": "MBCPP/447", "language": "cpp", "completion": "    vector<int> result;\n    for (int i = 0; i < nums.size(); i++) {\n        result.push_back(pow(nums[i], 3));\n    }\n    return result;\n}\n\n"}
{"task_id": "MBCPP/448", "language": "cpp", "completion": "    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += i * (i + 1) / 2;\n    }\n    return sum;\n}\n"}
{"task_id": "MBCPP/449", "language": "cpp", "completion": "    int a = abs(x1 - x2);\n    int b = abs(y1 - y2);\n    int c = abs(x1 - x3);\n    int d = abs(y1 - y3);\n    int e = abs(x2 - x3);\n    int f = abs(y2 - y3);\n    if (a + b > c && a + c > b && b + c > a && a + d > e && a + e > d && b + e > d && c + e > d && d + e > c && e + f > d) {\n        return \"Yes\";\n    }\n    return \"No\";\n}\n"}
{"task_id": "MBCPP/450", "language": "cpp", "completion": "    vector<string> res;\n    int n = str.size();\n    int i = 0;\n    while(i < n && l > 0) {\n        res.push_back(str[i]);\n        l -= str[i].size();\n        i++;\n    }\n    return res;\n}\n"}
{"task_id": "MBCPP/451", "language": "cpp", "completion": "    string text2 = regex_replace(text1, regex(\"\\\\s+\"), \"\");\n    return text2;\n}\n\n"}
{"task_id": "MBCPP/453", "language": "cpp", "completion": "    int sum = 0;\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            sum += i;\n            if (i != sqrt(n)) {\n                sum += n / i;\n            }\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "MBCPP/454", "language": "cpp", "completion": "    // Write your code here\n    int n = text.size();\n    for(int i=0;i<n;i++){\n        if(text[i]=='z'){\n            return \"Found a match!\";\n        }\n    }\n    return \"Not matched!\";\n}\n\n\n// main function"}
{"task_id": "MBCPP/455", "language": "cpp", "completion": "    if (monthnum2 == 1 || monthnum2 == 3 || monthnum2 == 5 || monthnum2 == 7 || monthnum2 == 8 || monthnum2 == 10 || monthnum2 == 12) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n"}
{"task_id": "MBCPP/456", "language": "cpp", "completion": "    vector<string> reversedList;\n    for (int i = stringlist.size() - 1; i >= 0; i--) {\n        reversedList.push_back(stringlist[i]);\n    }\n    return reversedList;\n}\n"}
{"task_id": "MBCPP/458", "language": "cpp", "completion": "    return l * b;\n}\n\n"}
{"task_id": "MBCPP/459", "language": "cpp", "completion": "    string str2 = \"\";\n    for (int i = 0; i < str1.length(); i++) {\n        if (str1[i] >= 'a' && str1[i] <= 'z') {\n            str2 += str1[i];\n        }\n    }\n    return str2;\n}\n"}
{"task_id": "MBCPP/460", "language": "cpp", "completion": "    vector<int> res;\n    for (auto &v : lst) {\n        res.push_back(v[0]);\n    }\n    return res;\n}\n"}
{"task_id": "MBCPP/461", "language": "cpp", "completion": "    int ctr = 0;\n    for (int i = 0; i < str.length(); i++) {\n        if (str[i] >= 'A' && str[i] <= 'Z') {\n            ctr++;\n        }\n    }\n    return ctr;\n}\n"}
{"task_id": "MBCPP/463", "language": "cpp", "completion": "    int n = arr.size();\n    int max_so_far = arr[0];\n    int min_so_far = arr[0];\n    int max_ending_here = arr[0];\n    int min_ending_here = arr[0];\n    int max_product = arr[0];\n\n    for (int i = 1; i < n; i++) {\n        max_ending_here = max(arr[i], max_ending_here * arr[i]);\n        min_ending_here = min(arr[i], min_ending_here * arr[i]);\n        max_so_far = max(max_so_far, max_ending_here);\n        min_so_far = min(min_so_far, min_ending_here);\n        max_product = max(max_product, max_so_far);\n    }\n\n    return max_product;\n}\n"}
{"task_id": "MBCPP/464", "language": "cpp", "completion": "    for (auto it = dict.begin(); it != dict.end(); it++) {\n        if (it->second != n) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "MBCPP/466", "language": "cpp", "completion": "    int l = 0, r = n - 1;\n    while (l < r) {\n        int mid = l + (r - l) / 2;\n        if (arr[mid] > arr[mid + 1]) {\n            r = mid;\n        } else {\n            l = mid + 1;\n        }\n    }\n    return l;\n}\n"}
{"task_id": "MBCPP/467", "language": "cpp", "completion": "    int octalnum = 0;\n    int rem;\n    while (decinum > 0) {\n        rem = decinum % 8;\n        octalnum = octalnum * 10 + rem;\n        decinum = decinum / 8;\n    }\n    return octalnum;\n}\n"}
{"task_id": "MBCPP/468", "language": "cpp", "completion": "    int max_so_far = INT_MIN;\n    int max_ending_here = 1;\n    for (int i = 0; i < n; i++) {\n        max_ending_here = max(max_ending_here * arr[i], arr[i]);\n        max_so_far = max(max_so_far, max_ending_here);\n    }\n    return max_so_far;\n}\n"}
{"task_id": "MBCPP/469", "language": "cpp", "completion": "    int n = price.size();\n    if (n == 0 || k == 0) return 0;\n    if (k >= n / 2) {\n        int max_profit = 0;\n        for (int i = 1; i < n; i++) {\n            max_profit += max(0, price[i] - price[i - 1]);\n        }\n        return max_profit;\n    }\n\n    vector<vector<int>> dp(k + 1, vector<int>(n, 0));\n    for (int i = 1; i < n; i++) {\n        dp[1][i] = max(dp[1][i - 1], price[i] - price[i - 1]);\n    }\n    for (int i = 2; i <= k; i++) {\n        for (int j = i; j < n; j++) {\n            dp[i][j] = max(dp[i][j - 1], dp[i - 1][j - 1] + price[j] - price[j - i]);\n        }\n    }\n    return dp[k][n - 1];\n}\n"}
{"task_id": "MBCPP/470", "language": "cpp", "completion": "    vector<int> result;\n    for (int i = 0; i < testTup.size(); i++) {\n        for (int j = i + 1; j < testTup.size(); j++) {\n            result.push_back(testTup[i] + testTup[j]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/471", "language": "cpp", "completion": "    int sum = 0;\n    for (int i = 0; i < lens; i++) {\n        sum += arr[i];\n    }\n    int ans = sum % n;\n    if (ans == 0) {\n        return 0;\n    }\n    int temp = 0;\n    for (int i = 0; i < lens; i++) {\n        temp += arr[i];\n        if (temp % n == ans) {\n            return 0;\n        }\n    }\n    return ans;\n}"}
{"task_id": "MBCPP/472", "language": "cpp", "completion": "    int n = l.size();\n    if (n < 3) return false;\n    int i = 0;\n    while (i < n - 2) {\n        if (l[i] + 1 == l[i + 1] && l[i + 1] + 1 == l[i + 2]) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\n"}
{"task_id": "MBCPP/474", "language": "cpp", "completion": "    int n = str1.length();\n    for (int i = 0; i < n; i++) {\n        if (str1[i] == ch[0]) {\n            str1[i] = newch[0];\n        }\n    }\n    return str1;\n}\n"}
{"task_id": "MBCPP/476", "language": "cpp", "completion": "    int max = INT_MIN;\n    int min = INT_MAX;\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] > max) {\n            max = nums[i];\n        }\n        if (nums[i] < min) {\n            min = nums[i];\n        }\n    }\n    return max + min;\n}\n"}
{"task_id": "MBCPP/477", "language": "cpp", "completion": "    for (int i = 0; i < str.length(); i++) {\n        if (str[i] >= 'A' && str[i] <= 'Z') {\n            str[i] = str[i] + 32;\n        }\n    }\n    return str;\n}\n"}
{"task_id": "MBCPP/478", "language": "cpp", "completion": "    string str2 = \"\";\n    for (int i = 0; i < str1.length(); i++) {\n        if (str1[i] >= 'A' && str1[i] <= 'Z') {\n            str2 += str1[i];\n        }\n    }\n    return str2;\n}\n"}
{"task_id": "MBCPP/479", "language": "cpp", "completion": "    return n/10;\n}\n"}
{"task_id": "MBCPP/480", "language": "cpp", "completion": "    map<char, int> m;\n    for (int i = 0; i < str1.length(); i++) {\n        m[str1[i]]++;\n    }\n    int max = 0;\n    char ch = ' ';\n    for (auto it = m.begin(); it != m.end(); it++) {\n        if (it->second > max) {\n            max = it->second;\n            ch = it->first;\n        }\n    }\n    return string(1, ch);\n}\n"}
{"task_id": "MBCPP/481", "language": "cpp", "completion": "    if (sum == 0) return true;\n    if (n == 0) return false;\n    if (set[n - 1] > sum) return isSubsetSum(set, n - 1, sum);\n    return isSubsetSum(set, n - 1, sum) || isSubsetSum(set, n - 1, sum - set[n - 1]);\n}\n"}
{"task_id": "MBCPP/482", "language": "cpp", "completion": "    regex r(\"[A-Z][a-z]+\");\n    smatch m;\n    if (regex_search(text, m, r)) {\n        return \"Yes\";\n    }\n    return \"No\";\n}"}
{"task_id": "MBCPP/483", "language": "cpp", "completion": "    int n = 1;\n    int i = 1;\n    while (true) {\n        n *= i;\n        if (n % x == 0) {\n            return i;\n        }\n        i++;\n    }\n}"}
{"task_id": "MBCPP/484", "language": "cpp", "completion": "    vector<vector<string>> result;\n    for (int i = 0; i < testList1.size(); i++) {\n        bool isMatch = false;\n        for (int j = 0; j < testList2.size(); j++) {\n            if (testList1[i] == testList2[j]) {\n                isMatch = true;\n                break;\n            }\n        }\n        if (!isMatch) {\n            result.push_back(testList1[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/485", "language": "cpp", "completion": "    int max = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            int product = a[i] * a[j];\n            if (product > max && isPalindrome(product)) {\n                max = product;\n            }\n        }\n    }\n    return max;\n}\n\nbool isPalindrome(int n) {\n    int rev = 0;\n    while (n > 0) {\n        rev = rev * 10 + n % 10;\n        n /= 10;\n    }\n    return rev == n;\n}"}
{"task_id": "MBCPP/486", "language": "cpp", "completion": "    double result = 1;\n    for (int i = 0; i < k; i++) {\n        result *= p;\n    }\n    for (int i = 0; i < n - k; i++) {\n        result *= (1 - p);\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/487", "language": "cpp", "completion": "    sort(tup.begin(), tup.end(), [](vector<int> &a, vector<int> &b) {\n        return a[1] < b[1];\n    });\n    return tup;\n}\n"}
{"task_id": "MBCPP/488", "language": "cpp", "completion": "    double area = 0;\n    for (int i = 1; i <= a; i++) {\n        area += 1.0 / (i * (2 * i - 1));\n    }\n    return area * 4;\n}\n"}
{"task_id": "MBCPP/489", "language": "cpp", "completion": "    int max_freq = 0;\n    int max_val = arr[0];\n    unordered_map<int, int> freq;\n    for (int i = 0; i < n; i++) {\n        freq[arr[i]]++;\n        if (freq[arr[i]] > max_freq) {\n            max_freq = freq[arr[i]];\n            max_val = arr[i];\n        }\n    }\n    return max_freq;\n}\n"}
{"task_id": "MBCPP/491", "language": "cpp", "completion": "    return (a * (1 - pow(r, n)) / (1 - r));\n}\n"}
{"task_id": "MBCPP/492", "language": "cpp", "completion": "    int start = 0;\n    int end = itemList.size() - 1;\n    while (start <= end) {\n        int mid = (start + end) / 2;\n        if (itemList[mid] == item) {\n            return true;\n        } else if (itemList[mid] < item) {\n            start = mid + 1;\n        } else {\n            end = mid - 1;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "MBCPP/493", "language": "cpp", "completion": "    vector<vector<vector<double>>> polygons;\n    vector<vector<double>> polygon;\n    vector<double> point;\n    double x, y;\n    double step = 2 * M_PI / 6;\n    double r = radius;\n    double x1 = startx;\n    double y1 = starty;\n    double x2 = endx;\n    double y2 = endy;\n    double x3 = x1 + r * cos(step);\n    double y3 = y1 + r * sin(step);\n    double x4 = x2 + r * cos(step);\n    double y4 = y2 + r * sin(step);\n    double x5 = x1 + r * cos(2 * step);\n    double y5 = y1 + r * sin(2 * step);\n    double x6 = x2 + r * cos(2 * step);\n    double y6 = y2 + r * sin(2 * step);\n    double x7 = x1 + r * cos(3 * step);\n    double y7 = y1 + r * sin(3 * step);\n    double x8 = x2 + r * cos(3 * step);\n    double y8 = y2 + r * sin(3 * step);\n    double x9 = x"}
{"task_id": "MBCPP/494", "language": "cpp", "completion": "    string res = \"\";\n    for (int i = 0; i < testTup.size(); i++) {\n        res += to_string(testTup[i]);\n    }\n    return res;\n}\n"}
{"task_id": "MBCPP/495", "language": "cpp", "completion": "    string str2 = \"\";\n    for (int i = 0; i < str1.length(); i++) {\n        if (str1[i] >= 'A' && str1[i] <= 'Z') {\n            str2 += str1[i];\n        }\n    }\n    return str2;\n}\n"}
{"task_id": "MBCPP/496", "language": "cpp", "completion": "    priority_queue<int, vector<int>, greater<int>> pq;\n    vector<int> ans;\n    for (int i = 0; i < n; i++) {\n        pq.push(nums[i]);\n    }\n    for (int i = 0; i < n; i++) {\n        ans.push_back(pq.top());\n        pq.pop();\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/497", "language": "cpp", "completion": "    return (3.141592653589793 * r * r * h) + (3.141592653589793 * r * r * 2) + (3.141592653589793 * r * h);\n}\n"}
{"task_id": "MBCPP/498", "language": "cpp", "completion": "    if (x == 0) return y;\n    if (y == 0) return x;\n    if (x == y) return x;\n    if (x > y) return gcd(x - y, y);\n    return gcd(x, y - x);\n}\n"}
{"task_id": "MBCPP/499", "language": "cpp", "completion": "    return 2 * r;\n}\n"}
{"task_id": "MBCPP/500", "language": "cpp", "completion": "    string result = \"\";\n    for (int i = 0; i < list.size(); i++) {\n        result += \" \" + list[i];\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/501", "language": "cpp", "completion": "    int gcd = __gcd(x, y);\n    return gcd;\n}\n"}
{"task_id": "MBCPP/502", "language": "cpp", "completion": "    return n % m;\n}\n"}
{"task_id": "MBCPP/503", "language": "cpp", "completion": "    vector<int> res;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int sum = 0;\n        for (int j = i; j < n; j++) {\n            sum += nums[j];\n            if (sum == i + 1) {\n                res.push_back(sum);\n                break;\n            }\n        }\n    }\n    return res;\n}\n"}
{"task_id": "MBCPP/504", "language": "cpp", "completion": "    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += i * i * i;\n    }\n    return sum;\n}\n"}
{"task_id": "MBCPP/505", "language": "cpp", "completion": "    int n = a.size();\n    int j = 0;\n    for (int i = 0; i < n; i++) {\n        if (a[i] != 0) {\n            swap(a[i], a[j]);\n            j++;\n        }\n    }\n    return a;\n}\n"}
{"task_id": "MBCPP/506", "language": "cpp", "completion": "    int result = 1;\n    for (int i = 0; i < k; i++) {\n        result *= (n - i);\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/507", "language": "cpp", "completion": "    vector<string> result;\n    for (int i = 0; i < list1.size(); i++) {\n        bool flag = false;\n        for (int j = 0; j < removewords.size(); j++) {\n            if (list1[i] == removewords[j]) {\n                flag = true;\n                break;\n            }\n        }\n        if (!flag) {\n            result.push_back(list1[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/508", "language": "cpp", "completion": "    if (l1.size() != l2.size()) return false;\n    for (int i = 0; i < l1.size(); i++) {\n        if (l1[i] != l2[i]) return false;\n    }\n    return true;\n}\n"}
{"task_id": "MBCPP/509", "language": "cpp", "completion": "    int sum = 0;\n    for (int i = 1; i <= n; i += 2) {\n        sum += i;\n    }\n    return sum / (n / 2 + 1);\n}\n"}
{"task_id": "MBCPP/510", "language": "cpp", "completion": "    int n = arr.size();\n    vector<int> dp(n+1, 0);\n    dp[0] = 1;\n    for(int i=1; i<=n; i++) {\n        for(int j=0; j<i; j++) {\n            if(arr[j] < k) {\n                dp[i] += dp[j];\n            }\n        }\n    }\n    return dp[n];\n}\n"}
{"task_id": "MBCPP/511", "language": "cpp", "completion": "    int sum = 0;\n    for (int i = 1; i <= num; i++) {\n        if (num % i == 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}"}
{"task_id": "MBCPP/514", "language": "cpp", "completion": "    int sum = 0;\n    for (int i = 0; i < testTup.size(); i++) {\n        sum += testTup[i];\n    }\n    return sum;\n}\n"}
{"task_id": "MBCPP/515", "language": "cpp", "completion": "    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += arr[i];\n    }\n    return sum % m == 0;\n}\n"}
{"task_id": "MBCPP/516", "language": "cpp", "completion": "    int max = *max_element(nums.begin(), nums.end());\n    int maxDigit = 0;\n    while (max > 0) {\n        max /= 10;\n        maxDigit++;\n    }\n    vector<int> buckets[10];\n    for (int i = 0; i < maxDigit; i++) {\n        for (int j = 0; j < nums.size(); j++) {\n            int digit = (nums[j] / (int)pow(10, i)) % 10;\n            buckets[digit].push_back(nums[j]);\n        }\n        int index = 0;\n        for (int j = 0; j < 10; j++) {\n            for (int k = 0; k < buckets[j].size(); k++) {\n                nums[index++] = buckets[j][k];\n            }\n            buckets[j].clear();\n        }\n    }\n    return nums;\n}\n"}
{"task_id": "MBCPP/517", "language": "cpp", "completion": "    int max = INT_MIN;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] > max && list1[i] > 0) {\n            max = list1[i];\n        }\n    }\n    return max;\n}\n"}
{"task_id": "MBCPP/518", "language": "cpp", "completion": "    int low = 1, high = num, mid;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (mid * mid == num) {\n            return mid;\n        } else if (mid * mid < num) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return -1;\n}\n"}
{"task_id": "MBCPP/519", "language": "cpp", "completion": "    return (num * (num + 1) * (num + 2)) / 6;\n}\n"}
{"task_id": "MBCPP/520", "language": "cpp", "completion": "    int n = l.size();\n    int ans = 1;\n    for (int i = 0; i < n; i++) {\n        ans = lcm(ans, l[i]);\n    }\n    return ans;\n}"}
{"task_id": "MBCPP/521", "language": "cpp", "completion": "    if (x == y && y == z) {\n        return false;\n    }\n    if (x == y || x == z || y == z) {\n        return true;\n    }\n    return false;\n}\n"}
{"task_id": "MBCPP/522", "language": "cpp", "completion": "    int n = arr.size();\n    vector<int> l(n, 1);\n    vector<int> r(n, 1);\n    int ans = 1;\n    for (int i = 1; i < n; i++) {\n        int j = i - 1;\n        while (j >= 0 && arr[i] > arr[j]) {\n            l[i] = max(l[i], r[j] + 1);\n            j = l[j] - 1;\n        }\n        ans = max(ans, l[i]);\n    }\n    for (int i = n - 2; i >= 0; i--) {\n        int j = i + 1;\n        while (j < n && arr[i] > arr[j]) {\n            r[i] = max(r[i], l[j] + 1);\n            j = r[j] - 1;\n        }\n        ans = max(ans, r[i]);\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/523", "language": "cpp", "completion": "    vector<string> res;\n    int count = 0;\n    for(int i = 0; i < str1.length(); i++) {\n        if(isupper(str1[i])) {\n            count++;\n        }\n    }\n    if(count == 0) {\n        res.push_back(\"String must have 1 upper case character.\");\n    }\n    count = 0;\n    for(int i = 0; i < str1.length(); i++) {\n        if(islower(str1[i])) {\n            count++;\n        }\n    }\n    if(count == 0) {\n        res.push_back(\"String must have 1 lower case character.\");\n    }\n    count = 0;\n    for(int i = 0; i < str1.length(); i++) {\n        if(isdigit(str1[i])) {\n            count++;\n        }\n    }\n    if(count == 0) {\n        res.push_back(\"String must have 1 number.\");\n    }\n    if(str1.length() < 8) {\n        res.push_back(\"String length should be atleast 8.\");\n    }\n    if(res.size() == 0) {\n        res.push_"}
{"task_id": "MBCPP/524", "language": "cpp", "completion": "    int dp[n];\n    dp[0] = arr[0];\n    int maxSum = dp[0];\n    for (int i = 1; i < n; i++) {\n        dp[i] = max(arr[i], dp[i - 1] + arr[i]);\n        maxSum = max(maxSum, dp[i]);\n    }\n    return maxSum;\n}\n"}
{"task_id": "MBCPP/525", "language": "cpp", "completion": "    // Write your code here\n    int a1 = line1[0], b1 = line1[1], c1 = line1[2];\n    int a2 = line2[0], b2 = line2[1], c2 = line2[2];\n    if (a1 * b2 == a2 * b1) {\n        return true;\n    }\n    return false;\n}"}
{"task_id": "MBCPP/526", "language": "cpp", "completion": "    string str2 = \"\";\n    for(int i = 0; i < str1.length(); i++) {\n        if(i == 0 || i == str1.length() - 1) {\n            str2 += toupper(str1[i]);\n        } else {\n            str2 += str1[i];\n        }\n    }\n    return str2;\n}\n"}
{"task_id": "MBCPP/527", "language": "cpp", "completion": "    unordered_map<int, int> map;\n    int count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        int diff = sum - arr[i];\n        if (map.find(diff) != map.end()) {\n            count += map[diff];\n        }\n        map[arr[i]]++;\n    }\n    return count;\n}\n"}
{"task_id": "MBCPP/529", "language": "cpp", "completion": "    if (n == 1) return 2;\n    if (n == 2) return 5;\n    if (n == 3) return 17;\n    if (n == 4) return 31;\n    if (n == 5) return 57;\n    if (n == 6) return 105;\n    if (n == 7) return 193;\n    if (n == 8) return 353;\n    if (n == 9) return 631;\n    if (n == 10) return 1091;\n    if (n == 11) return 1819;\n    if (n == 12) return 3153;\n    if (n == 13) return 5417;\n    if (n == 14) return 9101;\n    if (n == 15) return 15153;\n    if (n == 16) return 25717;\n    if (n == 17) return 43317;\n    if (n == 18) return 70117;\n    if (n == 19) return 1147"}
{"task_id": "MBCPP/530", "language": "cpp", "completion": "    int count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] < 0) {\n            count++;\n        }\n    }\n    return (double)count / nums.size();\n}\n"}
{"task_id": "MBCPP/531", "language": "cpp", "completion": "    int n = coins.size();\n    vector<vector<int>> dp(n+1, vector<int>(v+1, INT_MAX));\n    dp[0][0] = 0;\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= v; j++) {\n            dp[i][j] = dp[i-1][j];\n            if (j >= coins[i-1]) {\n                dp[i][j] = min(dp[i][j], dp[i-1][j-coins[i-1]] + 1);\n            }\n        }\n    }\n    return dp[n][v];\n}\n"}
{"task_id": "MBCPP/532", "language": "cpp", "completion": "    if (str1.size() != str2.size()) {\n        return false;\n    }\n\n    unordered_map<char, int> charCount;\n    for (char c : str1) {\n        charCount[c]++;\n    }\n\n    for (char c : str2) {\n        if (charCount[c] == 0) {\n            return false;\n        }\n        charCount[c]--;\n    }\n\n    return true;\n}\n"}
{"task_id": "MBCPP/534", "language": "cpp", "completion": "    vector<int> result;\n    int n = text.size();\n    int m = pattern.size();\n    int i = 0;\n    int j = 0;\n    while (i < n) {\n        if (text[i] == pattern[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n        if (j == m) {\n            result.push_back(i - m);\n            j = 0;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/535", "language": "cpp", "completion": "    return 2 * 3.14 * r * r + 2 * 3.14 * r;\n}\n"}
{"task_id": "MBCPP/536", "language": "cpp", "completion": "    vector<int> result;\n    int i = 0;\n    while (i < list.size()) {\n        if (i % n == 0) {\n            result.push_back(list[i]);\n        }\n        i++;\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/537", "language": "cpp", "completion": "    string str = str1;\n    stringstream ss(str);\n    string word;\n    unordered_map<string, int> map;\n    while (ss >> word) {\n        if (map.find(word) != map.end()) {\n            return word;\n        }\n        map[word] = 1;\n    }\n    return \"None\";\n}"}
{"task_id": "MBCPP/538", "language": "cpp", "completion": "    vector<string> v;\n    stringstream ss(str1);\n    string s;\n    while (getline(ss, s, ' ')) {\n        v.push_back(s);\n    }\n    return v;\n}\n"}
{"task_id": "MBCPP/540", "language": "cpp", "completion": "    unordered_map<int, int> freq;\n    for (int i = 0; i < n; i++) {\n        freq[arr[i]]++;\n    }\n    int maxFreq = 0, minFreq = INT_MAX;\n    for (auto it = freq.begin(); it != freq.end(); it++) {\n        if (it->second > maxFreq) {\n            maxFreq = it->second;\n        }\n        if (it->second < minFreq) {\n            minFreq = it->second;\n        }\n    }\n    return maxFreq - minFreq;\n}\n"}
{"task_id": "MBCPP/541", "language": "cpp", "completion": "    int sum = 0;\n    for (int i = 1; i < n; i++) {\n        if (n % i == 0) {\n            sum += i;\n        }\n    }\n    return sum > n;\n}\n\n"}
{"task_id": "MBCPP/542", "language": "cpp", "completion": "    string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ' || text[i] == ',' || text[i] == '.') {\n            result += \":\";\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/543", "language": "cpp", "completion": "    int sum = num1 + num2;\n    int count = 0;\n    while (sum > 0) {\n        sum /= 10;\n        count++;\n    }\n    return count;\n}\n"}
{"task_id": "MBCPP/544", "language": "cpp", "completion": "    string result = \"\";\n    for (auto &v : testList) {\n        for (auto &s : v) {\n            result += s + \" \";\n        }\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/545", "language": "cpp", "completion": "    int mask = 1;\n    int firstBit = n & mask;\n    int lastBit = n & (mask << 31);\n    int result = n ^ (firstBit | lastBit);\n    return result;\n}"}
{"task_id": "MBCPP/547", "language": "cpp", "completion": "    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        int x = i;\n        int count = 0;\n        while (x > 0) {\n            if (x % 2 == 1) {\n                count++;\n            }\n            x /= 2;\n        }\n        sum += count;\n    }\n    return sum;\n}"}
{"task_id": "MBCPP/548", "language": "cpp", "completion": "    int n = arr.size();\n    vector<int> dp(n, 1);\n    int max_len = 1;\n    for (int i = 1; i < n; i++) {\n        for (int j = 0; j < i; j++) {\n            if (arr[i] > arr[j]) {\n                dp[i] = max(dp[i], dp[j] + 1);\n            }\n        }\n        max_len = max(max_len, dp[i]);\n    }\n    return max_len;\n}\n"}
{"task_id": "MBCPP/549", "language": "cpp", "completion": "    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += pow(i, 5);\n    }\n    return sum;\n}"}
{"task_id": "MBCPP/550", "language": "cpp", "completion": "    if (low > high) {\n        return -1;\n    }\n    int mid = (low + high) / 2;\n    if (arr[mid] > arr[mid + 1]) {\n        return arr[mid];\n    }\n    if (arr[mid] < arr[mid - 1]) {\n        return arr[mid];\n    }\n    if (arr[mid] > arr[low]) {\n        return findMax(arr, low, mid - 1);\n    }\n    return findMax(arr, mid + 1, high);\n}"}
{"task_id": "MBCPP/551", "language": "cpp", "completion": "    vector<int> result;\n    for (int i = 0; i < list1.size(); i++) {\n        result.push_back(list1[i][n]);\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/552", "language": "cpp", "completion": "    int n = seqNums.size();\n    if (n == 0) return \"Empty Sequence\";\n    if (n == 1) return \"Linear Sequence\";\n    int diff = seqNums[1] - seqNums[0];\n    for (int i = 2; i < n; i++) {\n        if (seqNums[i] - seqNums[i - 1] != diff) {\n            return \"Non Linear Sequence\";\n        }\n    }\n    return \"Linear Sequence\";\n}\n"}
{"task_id": "MBCPP/553", "language": "cpp", "completion": "    double ans = 0;\n    for (int i = 0; i < testTup.size(); i++) {\n        ans += (double)testTup[i] / pow(10, i);\n    }\n    return ans;\n}\n"}
{"task_id": "MBCPP/554", "language": "cpp", "completion": "    vector<int> odds;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 == 1) {\n            odds.push_back(list[i]);\n        }\n    }\n    return odds;\n}\n"}
{"task_id": "MBCPP/555", "language": "cpp", "completion": "    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += i * i * i;\n    }\n    return sum - n * (n + 1) * (2 * n + 1) / 6;\n}"}
{"task_id": "MBCPP/556", "language": "cpp", "completion": "    int count = 0;\n    for (int i = 0; i < a.size(); i++) {\n        for (int j = i + 1; j < a.size(); j++) {\n            if (a[i] ^ a[j] == n) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "MBCPP/557", "language": "cpp", "completion": "    for (int i = 0; i < str.length(); i++) {\n        if (str[i] >= 'a' && str[i] <= 'z') {\n            str[i] = str[i] - 32;\n        } else if (str[i] >= 'A' && str[i] <= 'Z') {\n            str[i] = str[i] + 32;\n        }\n    }\n    return str;\n}\n"}
{"task_id": "MBCPP/558", "language": "cpp", "completion": "    int count = 0;\n    while (n1 != 0 || n2 != 0) {\n        int d1 = n1 % 10;\n        int d2 = n2 % 10;\n        if (d1 != d2) {\n            count++;\n        }\n        n1 /= 10;\n        n2 /= 10;\n    }\n    return count;\n}\n"}
{"task_id": "MBCPP/559", "language": "cpp", "completion": "    int max_sum = INT_MIN;\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += a[i];\n        max_sum = max(max_sum, sum);\n        if (sum < 0) {\n            sum = 0;\n        }\n    }\n    return max_sum;\n}\n"}
{"task_id": "MBCPP/560", "language": "cpp", "completion": "    vector<int> result;\n    unordered_set<int> set1(testTup1.begin(), testTup1.end());\n    unordered_set<int> set2(testTup2.begin(), testTup2.end());\n    set_union(set1.begin(), set1.end(), set2.begin(), set2.end(), back_inserter(result));\n    return result;\n}\n"}
{"task_id": "MBCPP/562", "language": "cpp", "completion": "    int n = lst.size();\n    int m = lst[0].size();\n    vector<int> dp(m, 0);\n    int max_len = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n            if (lst[i][j] == 1) {\n                dp[j]++;\n            } else {\n                dp[j] = 0;\n            }\n            max_len = max(max_len, dp[j]);\n        }\n    }\n    return max_len;\n}\n"}
{"task_id": "MBCPP/563", "language": "cpp", "completion": "    vector<string> result;\n    stringstream ss(text);\n    string token;\n    while (getline(ss, token, ',')) {\n        if (token.front() == '\"' && token.back() == '\"') {\n            result.push_back(token.substr(1, token.size() - 2));\n        }\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/564", "language": "cpp", "completion": "    int count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (arr[i] != arr[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "MBCPP/565", "language": "cpp", "completion": "    vector<string> res;\n    for (int i = 0; i < word.size(); i++) {\n        res.push_back(word.substr(i, 1));\n    }\n    return res;\n}\n\n"}
{"task_id": "MBCPP/566", "language": "cpp", "completion": "    int sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum;\n}\n"}
{"task_id": "MBCPP/567", "language": "cpp", "completion": "    for (int i = 0; i < list1.size() - 1; i++) {\n        if (list1[i] > list1[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "MBCPP/569", "language": "cpp", "completion": "    vector<vector<string>> list2;\n    for (int i = 0; i < list1.size(); i++) {\n        vector<string> list3;\n        for (int j = 0; j < list1[i].size(); j++) {\n            list3.push_back(list1[i][j]);\n        }\n        sort(list3.begin(), list3.end());\n        list2.push_back(list3);\n    }\n    return list2;\n}\n"}
{"task_id": "MBCPP/570", "language": "cpp", "completion": "    vector<string> result;\n    for (string s : list1) {\n        bool flag = false;\n        for (string c : charlist) {\n            if (s.find(c) != string::npos) {\n                flag = true;\n                break;\n            }\n        }\n        if (!flag) {\n            result.push_back(s);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "MBCPP/571", "language": "cpp", "completion": "    sort(arr.begin(), arr.end());\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        int j = upper_bound(arr.begin(), arr.end(), arr[i] + k) - arr.begin();\n        sum += arr[i] + arr[j];\n    }\n    return sum;\n}\n"}
{"task_id": "MBCPP/572", "language": "cpp", "completion": "    vector<int> res;\n    unordered_map<int, int> m;\n    for (int i = 0; i < nums.size(); i++) {\n        m[nums[i]]++;\n    }\n    for (auto it = m.begin(); it != m.end(); it++) {\n        if (it->second == 1) {\n            res.push_back(it->first);\n        }\n    }\n    return res;\n}\n"}
{"task_id": "MBCPP/573", "language": "cpp", "completion": "    int product = 1;\n    unordered_set<int> uniqueSet;\n    for (int i = 0; i < listData.size(); i++) {\n        if (uniqueSet.find(listData[i]) == uniqueSet.end()) {\n            uniqueSet.insert(listData[i]);\n            product *= listData[i];\n        }\n    }\n    return product;\n}\n"}
{"task_id": "MBCPP/574", "language": "cpp", "completion": "    return 2 * 3.14 * r * r + 2 * 3.14 * r * h;\n}\n"}
{"task_id": "MBCPP/575", "language": "cpp", "completion": "    int count = 0;\n    for (int i = l; i <= r; i++) {\n        if (i % a != 0) {\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "MBCPP/576", "language": "cpp", "completion": "    int i = 0, j = 0;\n    while (i < n && j < m) {\n        if (a[i] == b[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    return j == m;\n}\n"}
{"task_id": "MBCPP/577", "language": "cpp", "completion": "    int ans = 1;\n    for (int i = 2; i <= n; i++) {\n        ans *= i;\n    }\n    return ans % 10;\n}"}
{"task_id": "MBCPP/578", "language": "cpp", "completion": "    vector<int> result;\n    int i = 0, j = 0, k = 0;\n    while (i < list1.size() && j < list2.size() && k < list3.size()) {\n        result.push_back(list1[i]);\n        result.push_back(list2[j]);\n        result.push_back(list3[k]);\n        i++;\n        j++;\n        k++;\n    }\n    while (i < list1.size()) {\n        result.push_back(list1[i]);\n        i++;\n    }\n    while (j < list2.size()) {\n        result.push_back(list2[j]);\n        j++;\n    }\n    while (k < list3.size()) {\n        result.push_back(list3[k]);\n        k++;\n    }\n    return result;\n}"}
{"task_id": "MBCPP/579", "language": "cpp", "completion": "    vector<int> result;\n    for (int i = 0; i < testTup1.size(); i++) {\n        if (testTup1[i] != testTup2[i]) {\n            result.push_back(testTup1[i]);\n        }\n    }\n    for (int i = 0; i < testTup2.size(); i++) {\n        if (testTup1[i] != testTup2[i]) {\n            result.push_back(testTup2[i]);\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n}"}
{"task_id": "MBCPP/581", "language": "cpp", "completion": "    return 2 * (b * s + b * b) + 2 * s;\n}"}
{"task_id": "MBCPP/582", "language": "cpp", "completion": "    return dict1.empty();\n}\n\n"}
